/*!
*  MIT License
*  
*  Copyright (c) 2020 ericyonng<120453674@qq.com>
*  
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the "Software"), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*  
*  The above copyright notice and this permission notice shall be included in all
*  copies or substantial portions of the Software.
*  
*  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
*  SOFTWARE.
* 
* Author: Eric Yonng
* Description: Generated By protogentool, Dont Modify This File!!!
*/


import { crystal_net_service } from "./crystal_net_service";

export namespace crystal_net_service_parser
{

    export class AllParsers {

        AllParsersDict:Map<string, (jsonData:any)=>any> = new Map<string, (jsonData:any)=>any>();

        constructor()
        {

            this.add("AddLibraryBookCountReq", (jsonData:any):any =>{
                return this.AddLibraryBookCountReqParser(jsonData);
            })


            this.add("AddLibraryBookCountRes", (jsonData:any):any =>{
                return this.AddLibraryBookCountResParser(jsonData);
            })


            this.add("AddLibraryBookReq", (jsonData:any):any =>{
                return this.AddLibraryBookReqParser(jsonData);
            })


            this.add("AddLibraryBookRes", (jsonData:any):any =>{
                return this.AddLibraryBookResParser(jsonData);
            })


            this.add("AddUserNotifyDataItemNty", (jsonData:any):any =>{
                return this.AddUserNotifyDataItemNtyParser(jsonData);
            })


            this.add("BookBagInfo", (jsonData:any):any =>{
                return this.BookBagInfoParser(jsonData);
            })


            this.add("BookBagInfoNty", (jsonData:any):any =>{
                return this.BookBagInfoNtyParser(jsonData);
            })


            this.add("BookBagInfoReq", (jsonData:any):any =>{
                return this.BookBagInfoReqParser(jsonData);
            })


            this.add("BookBagInfoRes", (jsonData:any):any =>{
                return this.BookBagInfoResParser(jsonData);
            })


            this.add("BookInfo", (jsonData:any):any =>{
                return this.BookInfoParser(jsonData);
            })


            this.add("BookInfoItem", (jsonData:any):any =>{
                return this.BookInfoItemParser(jsonData);
            })


            this.add("BookListNty", (jsonData:any):any =>{
                return this.BookListNtyParser(jsonData);
            })


            this.add("BookType", (jsonData:any):any =>{
                return this.BookTypeParser(jsonData);
            })


            this.add("BookVariantInfo", (jsonData:any):any =>{
                return this.BookVariantInfoParser(jsonData);
            })


            this.add("BookVariantInfoItem", (jsonData:any):any =>{
                return this.BookVariantInfoItemParser(jsonData);
            })


            this.add("BookVariantInfoItemsNty", (jsonData:any):any =>{
                return this.BookVariantInfoItemsNtyParser(jsonData);
            })


            this.add("BooksChangeNty", (jsonData:any):any =>{
                return this.BooksChangeNtyParser(jsonData);
            })


            this.add("BorrowBookInfo", (jsonData:any):any =>{
                return this.BorrowBookInfoParser(jsonData);
            })


            this.add("BorrowOrderInfo", (jsonData:any):any =>{
                return this.BorrowOrderInfoParser(jsonData);
            })


            this.add("BorrowOrderState", (jsonData:any):any =>{
                return this.BorrowOrderStateParser(jsonData);
            })


            this.add("ClientHeartbeatReq", (jsonData:any):any =>{
                return this.ClientHeartbeatReqParser(jsonData);
            })


            this.add("ClientHeartbeatRes", (jsonData:any):any =>{
                return this.ClientHeartbeatResParser(jsonData);
            })


            this.add("ClientUserInfo", (jsonData:any):any =>{
                return this.ClientUserInfoParser(jsonData);
            })


            this.add("ClientUserStatus", (jsonData:any):any =>{
                return this.ClientUserStatusParser(jsonData);
            })


            this.add("CreateLibraryReq", (jsonData:any):any =>{
                return this.CreateLibraryReqParser(jsonData);
            })


            this.add("CreateLibraryRes", (jsonData:any):any =>{
                return this.CreateLibraryResParser(jsonData);
            })


            this.add("CreatureAttrKey", (jsonData:any):any =>{
                return this.CreatureAttrKeyParser(jsonData);
            })


            this.add("GetBookByBookNameReq", (jsonData:any):any =>{
                return this.GetBookByBookNameReqParser(jsonData);
            })


            this.add("GetBookByBookNameRes", (jsonData:any):any =>{
                return this.GetBookByBookNameResParser(jsonData);
            })


            this.add("GetBookInfoListReq", (jsonData:any):any =>{
                return this.GetBookInfoListReqParser(jsonData);
            })


            this.add("GetBookInfoListRes", (jsonData:any):any =>{
                return this.GetBookInfoListResParser(jsonData);
            })


            this.add("GetBookInfoReq", (jsonData:any):any =>{
                return this.GetBookInfoReqParser(jsonData);
            })


            this.add("GetBookInfoRes", (jsonData:any):any =>{
                return this.GetBookInfoResParser(jsonData);
            })


            this.add("GetBookListReq", (jsonData:any):any =>{
                return this.GetBookListReqParser(jsonData);
            })


            this.add("GetBookListRes", (jsonData:any):any =>{
                return this.GetBookListResParser(jsonData);
            })


            this.add("GetLibraryInfoReq", (jsonData:any):any =>{
                return this.GetLibraryInfoReqParser(jsonData);
            })


            this.add("GetLibraryInfoRes", (jsonData:any):any =>{
                return this.GetLibraryInfoResParser(jsonData);
            })


            this.add("GetLibraryListReq", (jsonData:any):any =>{
                return this.GetLibraryListReqParser(jsonData);
            })


            this.add("GetLibraryListRes", (jsonData:any):any =>{
                return this.GetLibraryListResParser(jsonData);
            })


            this.add("GetLibraryMemberSimpleInfoReq", (jsonData:any):any =>{
                return this.GetLibraryMemberSimpleInfoReqParser(jsonData);
            })


            this.add("GetLibraryMemberSimpleInfoRes", (jsonData:any):any =>{
                return this.GetLibraryMemberSimpleInfoResParser(jsonData);
            })


            this.add("GetNodeListReq", (jsonData:any):any =>{
                return this.GetNodeListReqParser(jsonData);
            })


            this.add("GetNodeListRes", (jsonData:any):any =>{
                return this.GetNodeListResParser(jsonData);
            })


            this.add("JoinLibraryReq", (jsonData:any):any =>{
                return this.JoinLibraryReqParser(jsonData);
            })


            this.add("JoinLibraryRes", (jsonData:any):any =>{
                return this.JoinLibraryResParser(jsonData);
            })


            this.add("KeyWordsField", (jsonData:any):any =>{
                return this.KeyWordsFieldParser(jsonData);
            })


            this.add("LibararyManagerInfo", (jsonData:any):any =>{
                return this.LibararyManagerInfoParser(jsonData);
            })


            this.add("LibraryInfo", (jsonData:any):any =>{
                return this.LibraryInfoParser(jsonData);
            })


            this.add("LibraryInfoNty", (jsonData:any):any =>{
                return this.LibraryInfoNtyParser(jsonData);
            })


            this.add("LibraryPreviewInfo", (jsonData:any):any =>{
                return this.LibraryPreviewInfoParser(jsonData);
            })


            this.add("LoginFinishReq", (jsonData:any):any =>{
                return this.LoginFinishReqParser(jsonData);
            })


            this.add("LoginFinishRes", (jsonData:any):any =>{
                return this.LoginFinishResParser(jsonData);
            })


            this.add("LoginInfo", (jsonData:any):any =>{
                return this.LoginInfoParser(jsonData);
            })


            this.add("LoginInfoNty", (jsonData:any):any =>{
                return this.LoginInfoNtyParser(jsonData);
            })


            this.add("LoginMode", (jsonData:any):any =>{
                return this.LoginModeParser(jsonData);
            })


            this.add("LoginReq", (jsonData:any):any =>{
                return this.LoginReqParser(jsonData);
            })


            this.add("LoginRes", (jsonData:any):any =>{
                return this.LoginResParser(jsonData);
            })


            this.add("LogoutNty", (jsonData:any):any =>{
                return this.LogoutNtyParser(jsonData);
            })


            this.add("LogoutReason", (jsonData:any):any =>{
                return this.LogoutReasonParser(jsonData);
            })


            this.add("LogoutReq", (jsonData:any):any =>{
                return this.LogoutReqParser(jsonData);
            })


            this.add("MemberInfo", (jsonData:any):any =>{
                return this.MemberInfoParser(jsonData);
            })


            this.add("ModifyMemberInfoReq", (jsonData:any):any =>{
                return this.ModifyMemberInfoReqParser(jsonData);
            })


            this.add("ModifyMemberInfoRes", (jsonData:any):any =>{
                return this.ModifyMemberInfoResParser(jsonData);
            })


            this.add("ModifyPlayerNameReq", (jsonData:any):any =>{
                return this.ModifyPlayerNameReqParser(jsonData);
            })


            this.add("ModifyPlayerNameRes", (jsonData:any):any =>{
                return this.ModifyPlayerNameResParser(jsonData);
            })


            this.add("ModifyPwdInfo", (jsonData:any):any =>{
                return this.ModifyPwdInfoParser(jsonData);
            })


            this.add("ModifyUserInfoReq", (jsonData:any):any =>{
                return this.ModifyUserInfoReqParser(jsonData);
            })


            this.add("ModifyUserInfoRes", (jsonData:any):any =>{
                return this.ModifyUserInfoResParser(jsonData);
            })


            this.add("NODE_IPTYPE", (jsonData:any):any =>{
                return this.NODE_IPTYPEParser(jsonData);
            })


            this.add("NodeHeartbeatInfo", (jsonData:any):any =>{
                return this.NodeHeartbeatInfoParser(jsonData);
            })


            this.add("NodeHeartbeatReq", (jsonData:any):any =>{
                return this.NodeHeartbeatReqParser(jsonData);
            })


            this.add("NodeHeartbeatRes", (jsonData:any):any =>{
                return this.NodeHeartbeatResParser(jsonData);
            })


            this.add("OfflineData", (jsonData:any):any =>{
                return this.OfflineDataParser(jsonData);
            })


            this.add("OfflineType", (jsonData:any):any =>{
                return this.OfflineTypeParser(jsonData);
            })


            this.add("OperationLogInfo", (jsonData:any):any =>{
                return this.OperationLogInfoParser(jsonData);
            })


            this.add("OperationType", (jsonData:any):any =>{
                return this.OperationTypeParser(jsonData);
            })


            this.add("PassTimeData", (jsonData:any):any =>{
                return this.PassTimeDataParser(jsonData);
            })


            this.add("PlayerData", (jsonData:any):any =>{
                return this.PlayerDataParser(jsonData);
            })


            this.add("PlayerDataNty", (jsonData:any):any =>{
                return this.PlayerDataNtyParser(jsonData);
            })


            this.add("PlayerDataReq", (jsonData:any):any =>{
                return this.PlayerDataReqParser(jsonData);
            })


            this.add("PlayerDataRes", (jsonData:any):any =>{
                return this.PlayerDataResParser(jsonData);
            })


            this.add("QuitLibraryReq", (jsonData:any):any =>{
                return this.QuitLibraryReqParser(jsonData);
            })


            this.add("QuitLibraryRes", (jsonData:any):any =>{
                return this.QuitLibraryResParser(jsonData);
            })


            this.add("RegisterNodeReq", (jsonData:any):any =>{
                return this.RegisterNodeReqParser(jsonData);
            })


            this.add("RegisterNodeRes", (jsonData:any):any =>{
                return this.RegisterNodeResParser(jsonData);
            })


            this.add("RegisterUserInfo", (jsonData:any):any =>{
                return this.RegisterUserInfoParser(jsonData);
            })


            this.add("RemoveUserNotifyDataItemNty", (jsonData:any):any =>{
                return this.RemoveUserNotifyDataItemNtyParser(jsonData);
            })


            this.add("RoleType", (jsonData:any):any =>{
                return this.RoleTypeParser(jsonData);
            })


            this.add("SetBookBagInfoReq", (jsonData:any):any =>{
                return this.SetBookBagInfoReqParser(jsonData);
            })


            this.add("SetBookBagInfoRes", (jsonData:any):any =>{
                return this.SetBookBagInfoResParser(jsonData);
            })


            this.add("SimpleInfo", (jsonData:any):any =>{
                return this.SimpleInfoParser(jsonData);
            })


            this.add("SimpleUserInfo", (jsonData:any):any =>{
                return this.SimpleUserInfoParser(jsonData);
            })


            this.add("SnapshotClientInfo", (jsonData:any):any =>{
                return this.SnapshotClientInfoParser(jsonData);
            })


            this.add("SnapshotField", (jsonData:any):any =>{
                return this.SnapshotFieldParser(jsonData);
            })


            this.add("SubmitBookBagBorrowInfoReq", (jsonData:any):any =>{
                return this.SubmitBookBagBorrowInfoReqParser(jsonData);
            })


            this.add("SubmitBookBagBorrowInfoRes", (jsonData:any):any =>{
                return this.SubmitBookBagBorrowInfoResParser(jsonData);
            })


            this.add("TestMgrData", (jsonData:any):any =>{
                return this.TestMgrDataParser(jsonData);
            })


            this.add("TestOpcode2Req", (jsonData:any):any =>{
                return this.TestOpcode2ReqParser(jsonData);
            })


            this.add("TestOpcode2Res", (jsonData:any):any =>{
                return this.TestOpcode2ResParser(jsonData);
            })


            this.add("TestOpcodeInfo", (jsonData:any):any =>{
                return this.TestOpcodeInfoParser(jsonData);
            })


            this.add("TestOpcodeReq", (jsonData:any):any =>{
                return this.TestOpcodeReqParser(jsonData);
            })


            this.add("TestOpcodeRes", (jsonData:any):any =>{
                return this.TestOpcodeResParser(jsonData);
            })


            this.add("TitleInfo", (jsonData:any):any =>{
                return this.TitleInfoParser(jsonData);
            })


            this.add("TitleInfoReq", (jsonData:any):any =>{
                return this.TitleInfoReqParser(jsonData);
            })


            this.add("TitleInfoRes", (jsonData:any):any =>{
                return this.TitleInfoResParser(jsonData);
            })


            this.add("TransferLibraianReq", (jsonData:any):any =>{
                return this.TransferLibraianReqParser(jsonData);
            })


            this.add("TransferLibraianRes", (jsonData:any):any =>{
                return this.TransferLibraianResParser(jsonData);
            })


            this.add("UserBaseInfo", (jsonData:any):any =>{
                return this.UserBaseInfoParser(jsonData);
            })


            this.add("UserClientInfoNty", (jsonData:any):any =>{
                return this.UserClientInfoNtyParser(jsonData);
            })


            this.add("UserLibraryInfo", (jsonData:any):any =>{
                return this.UserLibraryInfoParser(jsonData);
            })


            this.add("UserLibraryInfoNty", (jsonData:any):any =>{
                return this.UserLibraryInfoNtyParser(jsonData);
            })


            this.add("UserLoginInfo", (jsonData:any):any =>{
                return this.UserLoginInfoParser(jsonData);
            })


            this.add("UserNotifyData", (jsonData:any):any =>{
                return this.UserNotifyDataParser(jsonData);
            })


            this.add("UserNotifyDataItem", (jsonData:any):any =>{
                return this.UserNotifyDataItemParser(jsonData);
            })


            this.add("UserNotifyDataNty", (jsonData:any):any =>{
                return this.UserNotifyDataNtyParser(jsonData);
            })


            this.add("VariantParam", (jsonData:any):any =>{
                return this.VariantParamParser(jsonData);
            })


            this.add("VariantParamType", (jsonData:any):any =>{
                return this.VariantParamTypeParser(jsonData);
            })

        }

        public add(pbType:string, cb:(jsonData:any)=>any)
        {
            this.AllParsersDict.set(pbType, cb);
        }

        public getParser(pbType:string):((jsonData:any)=>any)|undefined
        {
            var cb = this.AllParsersDict.get(pbType);
            if(cb == undefined)
            {
                console.log("have no parser, please check pbType:", pbType)
            }
            return cb;
        }


            private AddLibraryBookCountReqParser(jsonData:any):any{
                var newInfo = new crystal_net_service.AddLibraryBookCountReq()

                if(jsonData.BookId != undefined)
                {
                    newInfo.BookId = parseFloat(jsonData.BookId);
                }


                if(jsonData.ModifyCount != undefined)
                {
                    newInfo.ModifyCount = parseFloat(jsonData.ModifyCount);
                }

                 return newInfo;
            }


            private AddLibraryBookCountResParser(jsonData:any):any{
                var newInfo = new crystal_net_service.AddLibraryBookCountRes()

                if(jsonData.ErrCode != undefined)
                {
                    newInfo.ErrCode = parseFloat(jsonData.ErrCode);
                }

                 return newInfo;
            }


            private AddLibraryBookReqParser(jsonData:any):any{
                var newInfo = new crystal_net_service.AddLibraryBookReq()

                if(jsonData.BookName != undefined)
                {
                    newInfo.BookName = jsonData.BookName;
                }


                if(jsonData.IsbnCode != undefined)
                {
                    newInfo.IsbnCode = jsonData.IsbnCode;
                }


                if(jsonData.BookCoverImage != undefined)
                {
                    newInfo.BookCoverImage = jsonData.BookCoverImage;
                }


                if(jsonData.Price != undefined)
                {
                    newInfo.Price = parseFloat(jsonData.Price);
                }


                if(jsonData.ModifyCount != undefined)
                {
                    newInfo.ModifyCount = parseFloat(jsonData.ModifyCount);
                }


                if(jsonData.KeyWords != undefined)
                {
                    var jsonFieldInfo = jsonData.KeyWords;
                    var cb = this.getParser("KeyWordsField");
                    if(cb != undefined)
                    {
                        newInfo.KeyWords = cb(jsonFieldInfo);
                    }
                    else
                    {
                        console.log("field KeyWords have no KeyWordsField parser");
                    }
                }


                if(jsonData.Content != undefined)
                {
                    newInfo.Content = jsonData.Content;
                }


                if(jsonData.Snapshot != undefined)
                {
                    var jsonFieldInfo = jsonData.Snapshot;
                    var cb = this.getParser("SnapshotField");
                    if(cb != undefined)
                    {
                        newInfo.Snapshot = cb(jsonFieldInfo);
                    }
                    else
                    {
                        console.log("field Snapshot have no SnapshotField parser");
                    }
                }

                 return newInfo;
            }


            private AddLibraryBookResParser(jsonData:any):any{
                var newInfo = new crystal_net_service.AddLibraryBookRes()

                if(jsonData.ErrCode != undefined)
                {
                    newInfo.ErrCode = parseFloat(jsonData.ErrCode);
                }

                 return newInfo;
            }


            private AddUserNotifyDataItemNtyParser(jsonData:any):any{
                var newInfo = new crystal_net_service.AddUserNotifyDataItemNty()

                if(jsonData.ItemList != undefined)
                {
                    var jsonArray = jsonData.ItemList.map((value, idx, arr)=>{
                    var parser = this.getParser("UserNotifyDataItem");
                    if(parser == undefined)
                        return {}

                    return parser(value);
                    });

                    newInfo.ItemList = jsonArray;
                }

                 return newInfo;
            }


            private BookBagInfoParser(jsonData:any):any{
                var newInfo = new crystal_net_service.BookBagInfo()

                if(jsonData.BookInfoItemList != undefined)
                {
                    var jsonArray = jsonData.BookInfoItemList.map((value, idx, arr)=>{
                    var parser = this.getParser("BookInfoItem");
                    if(parser == undefined)
                        return {}

                    return parser(value);
                    });

                    newInfo.BookInfoItemList = jsonArray;
                }

                 return newInfo;
            }


            private BookBagInfoNtyParser(jsonData:any):any{
                var newInfo = new crystal_net_service.BookBagInfoNty()

                if(jsonData.BookBagInfo != undefined)
                {
                    var jsonFieldInfo = jsonData.BookBagInfo;
                    var cb = this.getParser("BookBagInfo");
                    if(cb != undefined)
                    {
                        newInfo.BookBagInfo = cb(jsonFieldInfo);
                    }
                    else
                    {
                        console.log("field BookBagInfo have no BookBagInfo parser");
                    }
                }


                if(jsonData.BookInfoList != undefined)
                {
                    var jsonArray = jsonData.BookInfoList.map((value, idx, arr)=>{
                    var parser = this.getParser("BookInfo");
                    if(parser == undefined)
                        return {}

                    return parser(value);
                    });

                    newInfo.BookInfoList = jsonArray;
                }

                 return newInfo;
            }


            private BookBagInfoReqParser(jsonData:any):any{
                var newInfo = new crystal_net_service.BookBagInfoReq()
                 return newInfo;
            }


            private BookBagInfoResParser(jsonData:any):any{
                var newInfo = new crystal_net_service.BookBagInfoRes()

                if(jsonData.ErrCode != undefined)
                {
                    newInfo.ErrCode = parseFloat(jsonData.ErrCode);
                }

                 return newInfo;
            }


            private BookInfoParser(jsonData:any):any{
                var newInfo = new crystal_net_service.BookInfo()

                if(jsonData.Id != undefined)
                {
                    newInfo.Id = parseFloat(jsonData.Id);
                }


                if(jsonData.BookType != undefined)
                {
                    newInfo.BookType = parseFloat(jsonData.BookType);
                }


                if(jsonData.BookName != undefined)
                {
                    newInfo.BookName = jsonData.BookName;
                }


                if(jsonData.IsbnCode != undefined)
                {
                    newInfo.IsbnCode = jsonData.IsbnCode;
                }


                if(jsonData.BookCoverImage != undefined)
                {
                    newInfo.BookCoverImage = jsonData.BookCoverImage;
                }


                if(jsonData.IsOnShelves != undefined)
                {
                    newInfo.IsOnShelves = parseFloat(jsonData.IsOnShelves);
                }


                if(jsonData.VariantInfo != undefined)
                {
                    var jsonFieldInfo = jsonData.VariantInfo;
                    var cb = this.getParser("BookVariantInfo");
                    if(cb != undefined)
                    {
                        newInfo.VariantInfo = cb(jsonFieldInfo);
                    }
                    else
                    {
                        console.log("field VariantInfo have no BookVariantInfo parser");
                    }
                }


                if(jsonData.BorrowedCount != undefined)
                {
                    newInfo.BorrowedCount = parseFloat(jsonData.BorrowedCount);
                }


                if(jsonData.KeyWords != undefined)
                {
                    var jsonArray = jsonData.KeyWords.map((value, idx, arr)=>{
                    return value;
                    });

                    newInfo.KeyWords = jsonArray;
                }


                if(jsonData.Content != undefined)
                {
                    newInfo.Content = jsonData.Content;
                }


                if(jsonData.Snapshot != undefined)
                {
                    var jsonArray = jsonData.Snapshot.map((value, idx, arr)=>{
                    return value;
                    });

                    newInfo.Snapshot = jsonArray;
                }


                if(jsonData.CoverImagePath != undefined)
                {
                    newInfo.CoverImagePath = jsonData.CoverImagePath;
                }


                if(jsonData.KeywordsString != undefined)
                {
                    newInfo.KeywordsString = jsonData.KeywordsString;
                }


                if(jsonData.SnapshotPreivewInfoList != undefined)
                {
                    var jsonArray = jsonData.SnapshotPreivewInfoList.map((value, idx, arr)=>{
                    var parser = this.getParser("SnapshotClientInfo");
                    if(parser == undefined)
                        return {}

                    return parser(value);
                    });

                    newInfo.SnapshotPreivewInfoList = jsonArray;
                }

                 return newInfo;
            }


            private BookInfoItemParser(jsonData:any):any{
                var newInfo = new crystal_net_service.BookInfoItem()

                if(jsonData.BookId != undefined)
                {
                    newInfo.BookId = parseFloat(jsonData.BookId);
                }


                if(jsonData.BookCount != undefined)
                {
                    newInfo.BookCount = parseFloat(jsonData.BookCount);
                }


                if(jsonData.BorrowDays != undefined)
                {
                    newInfo.BorrowDays = parseFloat(jsonData.BorrowDays);
                }

                 return newInfo;
            }


            private BookListNtyParser(jsonData:any):any{
                var newInfo = new crystal_net_service.BookListNty()

                if(jsonData.BookInfoList != undefined)
                {
                    var jsonArray = jsonData.BookInfoList.map((value, idx, arr)=>{
                    var parser = this.getParser("BookInfo");
                    if(parser == undefined)
                        return {}

                    return parser(value);
                    });

                    newInfo.BookInfoList = jsonArray;
                }

                 return newInfo;
            }


            private BookTypeParser(jsonData:any):any{
                var newInfo = new crystal_net_service.BookType()
                 return newInfo;
            }


            private BookVariantInfoParser(jsonData:any):any{
                var newInfo = new crystal_net_service.BookVariantInfo()

                if(jsonData.Count != undefined)
                {
                    newInfo.Count = parseFloat(jsonData.Count);
                }


                if(jsonData.Price != undefined)
                {
                    newInfo.Price = parseFloat(jsonData.Price);
                }

                 return newInfo;
            }


            private BookVariantInfoItemParser(jsonData:any):any{
                var newInfo = new crystal_net_service.BookVariantInfoItem()

                if(jsonData.Id != undefined)
                {
                    newInfo.Id = parseFloat(jsonData.Id);
                }


                if(jsonData.BookVariantInfo != undefined)
                {
                    var jsonFieldInfo = jsonData.BookVariantInfo;
                    var cb = this.getParser("BookVariantInfo");
                    if(cb != undefined)
                    {
                        newInfo.BookVariantInfo = cb(jsonFieldInfo);
                    }
                    else
                    {
                        console.log("field BookVariantInfo have no BookVariantInfo parser");
                    }
                }

                 return newInfo;
            }


            private BookVariantInfoItemsNtyParser(jsonData:any):any{
                var newInfo = new crystal_net_service.BookVariantInfoItemsNty()

                if(jsonData.BookVariantInfoItemList != undefined)
                {
                    var jsonArray = jsonData.BookVariantInfoItemList.map((value, idx, arr)=>{
                    var parser = this.getParser("BookVariantInfoItem");
                    if(parser == undefined)
                        return {}

                    return parser(value);
                    });

                    newInfo.BookVariantInfoItemList = jsonArray;
                }

                 return newInfo;
            }


            private BooksChangeNtyParser(jsonData:any):any{
                var newInfo = new crystal_net_service.BooksChangeNty()

                if(jsonData.BookInfoList != undefined)
                {
                    var jsonArray = jsonData.BookInfoList.map((value, idx, arr)=>{
                    var parser = this.getParser("BookInfo");
                    if(parser == undefined)
                        return {}

                    return parser(value);
                    });

                    newInfo.BookInfoList = jsonArray;
                }

                 return newInfo;
            }


            private BorrowBookInfoParser(jsonData:any):any{
                var newInfo = new crystal_net_service.BorrowBookInfo()

                if(jsonData.BookId != undefined)
                {
                    newInfo.BookId = parseFloat(jsonData.BookId);
                }


                if(jsonData.IsbnCode != undefined)
                {
                    newInfo.IsbnCode = jsonData.IsbnCode;
                }


                if(jsonData.BorrowCount != undefined)
                {
                    newInfo.BorrowCount = parseFloat(jsonData.BorrowCount);
                }


                if(jsonData.BorrowTime != undefined)
                {
                    newInfo.BorrowTime = parseFloat(jsonData.BorrowTime);
                }


                if(jsonData.PlanGiveBackTime != undefined)
                {
                    newInfo.PlanGiveBackTime = parseFloat(jsonData.PlanGiveBackTime);
                }


                if(jsonData.RealGiveBackTime != undefined)
                {
                    newInfo.RealGiveBackTime = parseFloat(jsonData.RealGiveBackTime);
                }


                if(jsonData.ReturnBackCount != undefined)
                {
                    newInfo.ReturnBackCount = parseFloat(jsonData.ReturnBackCount);
                }


                if(jsonData.SubOrderId != undefined)
                {
                    newInfo.SubOrderId = parseFloat(jsonData.SubOrderId);
                }

                 return newInfo;
            }


            private BorrowOrderInfoParser(jsonData:any):any{
                var newInfo = new crystal_net_service.BorrowOrderInfo()

                if(jsonData.OrderId != undefined)
                {
                    newInfo.OrderId = parseFloat(jsonData.OrderId);
                }


                if(jsonData.BorrowBookList != undefined)
                {
                    var jsonArray = jsonData.BorrowBookList.map((value, idx, arr)=>{
                    var parser = this.getParser("BorrowBookInfo");
                    if(parser == undefined)
                        return {}

                    return parser(value);
                    });

                    newInfo.BorrowBookList = jsonArray;
                }


                if(jsonData.CreateOrderTime != undefined)
                {
                    newInfo.CreateOrderTime = parseFloat(jsonData.CreateOrderTime);
                }


                if(jsonData.OrderState != undefined)
                {
                    newInfo.OrderState = parseFloat(jsonData.OrderState);
                }


                if(jsonData.CancelReason != undefined)
                {
                    newInfo.CancelReason = jsonData.CancelReason;
                }

                 return newInfo;
            }


            private BorrowOrderStateParser(jsonData:any):any{
                var newInfo = new crystal_net_service.BorrowOrderState()
                 return newInfo;
            }


            private ClientHeartbeatReqParser(jsonData:any):any{
                var newInfo = new crystal_net_service.ClientHeartbeatReq()
                 return newInfo;
            }


            private ClientHeartbeatResParser(jsonData:any):any{
                var newInfo = new crystal_net_service.ClientHeartbeatRes()

                if(jsonData.ServerTimeMs != undefined)
                {
                    newInfo.ServerTimeMs = parseFloat(jsonData.ServerTimeMs);
                }

                 return newInfo;
            }


            private ClientUserInfoParser(jsonData:any):any{
                var newInfo = new crystal_net_service.ClientUserInfo()

                if(jsonData.UserId != undefined)
                {
                    newInfo.UserId = parseFloat(jsonData.UserId);
                }


                if(jsonData.AccountName != undefined)
                {
                    newInfo.AccountName = jsonData.AccountName;
                }


                if(jsonData.Name != undefined)
                {
                    newInfo.Name = jsonData.Name;
                }


                if(jsonData.Nickname != undefined)
                {
                    newInfo.Nickname = jsonData.Nickname;
                }


                if(jsonData.PhoneImei != undefined)
                {
                    newInfo.PhoneImei = jsonData.PhoneImei;
                }


                if(jsonData.ClientStatus != undefined)
                {
                    newInfo.ClientStatus = parseFloat(jsonData.ClientStatus);
                }


                if(jsonData.LastToken != undefined)
                {
                    newInfo.LastToken = jsonData.LastToken;
                }


                if(jsonData.TokenExpireTime != undefined)
                {
                    newInfo.TokenExpireTime = parseFloat(jsonData.TokenExpireTime);
                }


                if(jsonData.BindPhone != undefined)
                {
                    newInfo.BindPhone = parseFloat(jsonData.BindPhone);
                }

                 return newInfo;
            }


            private ClientUserStatusParser(jsonData:any):any{
                var newInfo = new crystal_net_service.ClientUserStatus()
                 return newInfo;
            }


            private CreateLibraryReqParser(jsonData:any):any{
                var newInfo = new crystal_net_service.CreateLibraryReq()

                if(jsonData.InviteCode != undefined)
                {
                    newInfo.InviteCode = jsonData.InviteCode;
                }


                if(jsonData.Name != undefined)
                {
                    newInfo.Name = jsonData.Name;
                }


                if(jsonData.Address != undefined)
                {
                    newInfo.Address = jsonData.Address;
                }


                if(jsonData.OpenTime != undefined)
                {
                    newInfo.OpenTime = jsonData.OpenTime;
                }


                if(jsonData.TelphoneNumber != undefined)
                {
                    newInfo.TelphoneNumber = jsonData.TelphoneNumber;
                }


                if(jsonData.BindPhone != undefined)
                {
                    newInfo.BindPhone = parseFloat(jsonData.BindPhone);
                }

                 return newInfo;
            }


            private CreateLibraryResParser(jsonData:any):any{
                var newInfo = new crystal_net_service.CreateLibraryRes()

                if(jsonData.ErrCode != undefined)
                {
                    newInfo.ErrCode = parseFloat(jsonData.ErrCode);
                }

                 return newInfo;
            }


            private CreatureAttrKeyParser(jsonData:any):any{
                var newInfo = new crystal_net_service.CreatureAttrKey()
                 return newInfo;
            }


            private GetBookByBookNameReqParser(jsonData:any):any{
                var newInfo = new crystal_net_service.GetBookByBookNameReq()

                if(jsonData.BookName != undefined)
                {
                    newInfo.BookName = jsonData.BookName;
                }

                 return newInfo;
            }


            private GetBookByBookNameResParser(jsonData:any):any{
                var newInfo = new crystal_net_service.GetBookByBookNameRes()

                if(jsonData.BookInfoList != undefined)
                {
                    var jsonArray = jsonData.BookInfoList.map((value, idx, arr)=>{
                    var parser = this.getParser("BookInfo");
                    if(parser == undefined)
                        return {}

                    return parser(value);
                    });

                    newInfo.BookInfoList = jsonArray;
                }

                 return newInfo;
            }


            private GetBookInfoListReqParser(jsonData:any):any{
                var newInfo = new crystal_net_service.GetBookInfoListReq()

                if(jsonData.BaseBookId != undefined)
                {
                    newInfo.BaseBookId = parseFloat(jsonData.BaseBookId);
                }


                if(jsonData.BookCount != undefined)
                {
                    newInfo.BookCount = parseFloat(jsonData.BookCount);
                }

                 return newInfo;
            }


            private GetBookInfoListResParser(jsonData:any):any{
                var newInfo = new crystal_net_service.GetBookInfoListRes()

                if(jsonData.BookInfoList != undefined)
                {
                    var jsonArray = jsonData.BookInfoList.map((value, idx, arr)=>{
                    var parser = this.getParser("BookInfo");
                    if(parser == undefined)
                        return {}

                    return parser(value);
                    });

                    newInfo.BookInfoList = jsonArray;
                }

                 return newInfo;
            }


            private GetBookInfoReqParser(jsonData:any):any{
                var newInfo = new crystal_net_service.GetBookInfoReq()

                if(jsonData.IsbnCode != undefined)
                {
                    newInfo.IsbnCode = jsonData.IsbnCode;
                }

                 return newInfo;
            }


            private GetBookInfoResParser(jsonData:any):any{
                var newInfo = new crystal_net_service.GetBookInfoRes()

                if(jsonData.ErrCode != undefined)
                {
                    newInfo.ErrCode = parseFloat(jsonData.ErrCode);
                }


                if(jsonData.BookInfo != undefined)
                {
                    var jsonFieldInfo = jsonData.BookInfo;
                    var cb = this.getParser("BookInfo");
                    if(cb != undefined)
                    {
                        newInfo.BookInfo = cb(jsonFieldInfo);
                    }
                    else
                    {
                        console.log("field BookInfo have no BookInfo parser");
                    }
                }

                 return newInfo;
            }


            private GetBookListReqParser(jsonData:any):any{
                var newInfo = new crystal_net_service.GetBookListReq()
                 return newInfo;
            }


            private GetBookListResParser(jsonData:any):any{
                var newInfo = new crystal_net_service.GetBookListRes()

                if(jsonData.ErrCode != undefined)
                {
                    newInfo.ErrCode = parseFloat(jsonData.ErrCode);
                }

                 return newInfo;
            }


            private GetLibraryInfoReqParser(jsonData:any):any{
                var newInfo = new crystal_net_service.GetLibraryInfoReq()
                 return newInfo;
            }


            private GetLibraryInfoResParser(jsonData:any):any{
                var newInfo = new crystal_net_service.GetLibraryInfoRes()

                if(jsonData.ErrCode != undefined)
                {
                    newInfo.ErrCode = parseFloat(jsonData.ErrCode);
                }

                 return newInfo;
            }


            private GetLibraryListReqParser(jsonData:any):any{
                var newInfo = new crystal_net_service.GetLibraryListReq()
                 return newInfo;
            }


            private GetLibraryListResParser(jsonData:any):any{
                var newInfo = new crystal_net_service.GetLibraryListRes()

                if(jsonData.LibraryPreviewInfoList != undefined)
                {
                    var jsonArray = jsonData.LibraryPreviewInfoList.map((value, idx, arr)=>{
                    var parser = this.getParser("LibraryPreviewInfo");
                    if(parser == undefined)
                        return {}

                    return parser(value);
                    });

                    newInfo.LibraryPreviewInfoList = jsonArray;
                }

                 return newInfo;
            }


            private GetLibraryMemberSimpleInfoReqParser(jsonData:any):any{
                var newInfo = new crystal_net_service.GetLibraryMemberSimpleInfoReq()
                 return newInfo;
            }


            private GetLibraryMemberSimpleInfoResParser(jsonData:any):any{
                var newInfo = new crystal_net_service.GetLibraryMemberSimpleInfoRes()

                if(jsonData.ErrCode != undefined)
                {
                    newInfo.ErrCode = parseFloat(jsonData.ErrCode);
                }


                if(jsonData.SimpleUserInfoList != undefined)
                {
                    var jsonArray = jsonData.SimpleUserInfoList.map((value, idx, arr)=>{
                    var parser = this.getParser("SimpleUserInfo");
                    if(parser == undefined)
                        return {}

                    return parser(value);
                    });

                    newInfo.SimpleUserInfoList = jsonArray;
                }

                 return newInfo;
            }


            private GetNodeListReqParser(jsonData:any):any{
                var newInfo = new crystal_net_service.GetNodeListReq()

                if(jsonData.ClusterName != undefined)
                {
                    newInfo.ClusterName = jsonData.ClusterName;
                }


                if(jsonData.CareNodeServiceNameList != undefined)
                {
                    var jsonArray = jsonData.CareNodeServiceNameList.map((value, idx, arr)=>{
                    return value;
                    });

                    newInfo.CareNodeServiceNameList = jsonArray;
                }

                 return newInfo;
            }


            private GetNodeListResParser(jsonData:any):any{
                var newInfo = new crystal_net_service.GetNodeListRes()

                if(jsonData.NodeInfoList != undefined)
                {
                    var jsonArray = jsonData.NodeInfoList.map((value, idx, arr)=>{
                    var parser = this.getParser("NodeHeartbeatInfo");
                    if(parser == undefined)
                        return {}

                    return parser(value);
                    });

                    newInfo.NodeInfoList = jsonArray;
                }

                 return newInfo;
            }


            private JoinLibraryReqParser(jsonData:any):any{
                var newInfo = new crystal_net_service.JoinLibraryReq()

                if(jsonData.LibraryId != undefined)
                {
                    newInfo.LibraryId = parseFloat(jsonData.LibraryId);
                }

                 return newInfo;
            }


            private JoinLibraryResParser(jsonData:any):any{
                var newInfo = new crystal_net_service.JoinLibraryRes()

                if(jsonData.ErrCode != undefined)
                {
                    newInfo.ErrCode = parseFloat(jsonData.ErrCode);
                }

                 return newInfo;
            }


            private KeyWordsFieldParser(jsonData:any):any{
                var newInfo = new crystal_net_service.KeyWordsField()

                if(jsonData.KeyWords != undefined)
                {
                    var jsonArray = jsonData.KeyWords.map((value, idx, arr)=>{
                    return value;
                    });

                    newInfo.KeyWords = jsonArray;
                }

                 return newInfo;
            }


            private LibararyManagerInfoParser(jsonData:any):any{
                var newInfo = new crystal_net_service.LibararyManagerInfo()

                if(jsonData.UserId != undefined)
                {
                    newInfo.UserId = parseFloat(jsonData.UserId);
                }

                 return newInfo;
            }


            private LibraryInfoParser(jsonData:any):any{
                var newInfo = new crystal_net_service.LibraryInfo()

                if(jsonData.Id != undefined)
                {
                    newInfo.Id = parseFloat(jsonData.Id);
                }


                if(jsonData.Name != undefined)
                {
                    newInfo.Name = jsonData.Name;
                }


                if(jsonData.Address != undefined)
                {
                    newInfo.Address = jsonData.Address;
                }


                if(jsonData.OpenTime != undefined)
                {
                    newInfo.OpenTime = jsonData.OpenTime;
                }


                if(jsonData.TelphoneNumber != undefined)
                {
                    newInfo.TelphoneNumber = jsonData.TelphoneNumber;
                }


                if(jsonData.LibrarianUserId != undefined)
                {
                    newInfo.LibrarianUserId = parseFloat(jsonData.LibrarianUserId);
                }


                if(jsonData.LibrarianUserNickname != undefined)
                {
                    newInfo.LibrarianUserNickname = jsonData.LibrarianUserNickname;
                }


                if(jsonData.ManagerInfoList != undefined)
                {
                    var jsonArray = jsonData.ManagerInfoList.map((value, idx, arr)=>{
                    var parser = this.getParser("LibararyManagerInfo");
                    if(parser == undefined)
                        return {}

                    return parser(value);
                    });

                    newInfo.ManagerInfoList = jsonArray;
                }


                if(jsonData.MemberList != undefined)
                {
                    var jsonArray = jsonData.MemberList.map((value, idx, arr)=>{
                    var parser = this.getParser("MemberInfo");
                    if(parser == undefined)
                        return {}

                    return parser(value);
                    });

                    newInfo.MemberList = jsonArray;
                }


                if(jsonData.BookList != undefined)
                {
                    var jsonArray = jsonData.BookList.map((value, idx, arr)=>{
                    var parser = this.getParser("BookInfo");
                    if(parser == undefined)
                        return {}

                    return parser(value);
                    });

                    newInfo.BookList = jsonArray;
                }


                if(jsonData.LogInfoList != undefined)
                {
                    var jsonArray = jsonData.LogInfoList.map((value, idx, arr)=>{
                    var parser = this.getParser("OperationLogInfo");
                    if(parser == undefined)
                        return {}

                    return parser(value);
                    });

                    newInfo.LogInfoList = jsonArray;
                }

                 return newInfo;
            }


            private LibraryInfoNtyParser(jsonData:any):any{
                var newInfo = new crystal_net_service.LibraryInfoNty()

                if(jsonData.LibraryInfo != undefined)
                {
                    var jsonFieldInfo = jsonData.LibraryInfo;
                    var cb = this.getParser("LibraryInfo");
                    if(cb != undefined)
                    {
                        newInfo.LibraryInfo = cb(jsonFieldInfo);
                    }
                    else
                    {
                        console.log("field LibraryInfo have no LibraryInfo parser");
                    }
                }

                 return newInfo;
            }


            private LibraryPreviewInfoParser(jsonData:any):any{
                var newInfo = new crystal_net_service.LibraryPreviewInfo()

                if(jsonData.Id != undefined)
                {
                    newInfo.Id = parseFloat(jsonData.Id);
                }


                if(jsonData.Name != undefined)
                {
                    newInfo.Name = jsonData.Name;
                }


                if(jsonData.LibrarianUserId != undefined)
                {
                    newInfo.LibrarianUserId = parseFloat(jsonData.LibrarianUserId);
                }


                if(jsonData.LibrarianNickname != undefined)
                {
                    newInfo.LibrarianNickname = jsonData.LibrarianNickname;
                }

                 return newInfo;
            }


            private LoginFinishReqParser(jsonData:any):any{
                var newInfo = new crystal_net_service.LoginFinishReq()
                 return newInfo;
            }


            private LoginFinishResParser(jsonData:any):any{
                var newInfo = new crystal_net_service.LoginFinishRes()

                if(jsonData.ErrCode != undefined)
                {
                    newInfo.ErrCode = parseFloat(jsonData.ErrCode);
                }

                 return newInfo;
            }


            private LoginInfoParser(jsonData:any):any{
                var newInfo = new crystal_net_service.LoginInfo()

                if(jsonData.LoginMode != undefined)
                {
                    newInfo.LoginMode = parseFloat(jsonData.LoginMode);
                }


                if(jsonData.AccountName != undefined)
                {
                    newInfo.AccountName = jsonData.AccountName;
                }


                if(jsonData.Pwd != undefined)
                {
                    newInfo.Pwd = jsonData.Pwd;
                }


                if(jsonData.LoginToken != undefined)
                {
                    newInfo.LoginToken = jsonData.LoginToken;
                }


                if(jsonData.LoginPhoneImei != undefined)
                {
                    newInfo.LoginPhoneImei = jsonData.LoginPhoneImei;
                }


                if(jsonData.TargetIp != undefined)
                {
                    newInfo.TargetIp = jsonData.TargetIp;
                }


                if(jsonData.Port != undefined)
                {
                    newInfo.Port = parseFloat(jsonData.Port);
                }


                if(jsonData.UserRegisterInfo != undefined)
                {
                    var jsonFieldInfo = jsonData.UserRegisterInfo;
                    var cb = this.getParser("RegisterUserInfo");
                    if(cb != undefined)
                    {
                        newInfo.UserRegisterInfo = cb(jsonFieldInfo);
                    }
                    else
                    {
                        console.log("field UserRegisterInfo have no RegisterUserInfo parser");
                    }
                }


                if(jsonData.AppId != undefined)
                {
                    newInfo.AppId = jsonData.AppId;
                }


                if(jsonData.cypherText != undefined)
                {
                    newInfo.cypherText = jsonData.cypherText;
                }


                if(jsonData.originText != undefined)
                {
                    newInfo.originText = jsonData.originText;
                }


                if(jsonData.versionId != undefined)
                {
                    newInfo.versionId = parseFloat(jsonData.versionId);
                }

                 return newInfo;
            }


            private LoginInfoNtyParser(jsonData:any):any{
                var newInfo = new crystal_net_service.LoginInfoNty()

                if(jsonData.Token != undefined)
                {
                    newInfo.Token = jsonData.Token;
                }


                if(jsonData.KeyExpireTime != undefined)
                {
                    newInfo.KeyExpireTime = parseFloat(jsonData.KeyExpireTime);
                }

                 return newInfo;
            }


            private LoginModeParser(jsonData:any):any{
                var newInfo = new crystal_net_service.LoginMode()
                 return newInfo;
            }


            private LoginReqParser(jsonData:any):any{
                var newInfo = new crystal_net_service.LoginReq()

                if(jsonData.LoginUserInfo != undefined)
                {
                    var jsonFieldInfo = jsonData.LoginUserInfo;
                    var cb = this.getParser("LoginInfo");
                    if(cb != undefined)
                    {
                        newInfo.LoginUserInfo = cb(jsonFieldInfo);
                    }
                    else
                    {
                        console.log("field LoginUserInfo have no LoginInfo parser");
                    }
                }

                 return newInfo;
            }


            private LoginResParser(jsonData:any):any{
                var newInfo = new crystal_net_service.LoginRes()

                if(jsonData.errCode != undefined)
                {
                    newInfo.errCode = parseFloat(jsonData.errCode);
                }


                if(jsonData.UserId != undefined)
                {
                    newInfo.UserId = parseFloat(jsonData.UserId);
                }


                if(jsonData.ServerTime != undefined)
                {
                    newInfo.ServerTime = parseFloat(jsonData.ServerTime);
                }

                 return newInfo;
            }


            private LogoutNtyParser(jsonData:any):any{
                var newInfo = new crystal_net_service.LogoutNty()

                if(jsonData.LogoutReason != undefined)
                {
                    newInfo.LogoutReason = parseFloat(jsonData.LogoutReason);
                }


                if(jsonData.ip != undefined)
                {
                    newInfo.ip = jsonData.ip;
                }

                 return newInfo;
            }


            private LogoutReasonParser(jsonData:any):any{
                var newInfo = new crystal_net_service.LogoutReason()
                 return newInfo;
            }


            private LogoutReqParser(jsonData:any):any{
                var newInfo = new crystal_net_service.LogoutReq()
                 return newInfo;
            }


            private MemberInfoParser(jsonData:any):any{
                var newInfo = new crystal_net_service.MemberInfo()

                if(jsonData.UserId != undefined)
                {
                    newInfo.UserId = parseFloat(jsonData.UserId);
                }


                if(jsonData.Role != undefined)
                {
                    newInfo.Role = parseFloat(jsonData.Role);
                }


                if(jsonData.Nickname != undefined)
                {
                    newInfo.Nickname = jsonData.Nickname;
                }


                if(jsonData.BorrowList != undefined)
                {
                    var jsonArray = jsonData.BorrowList.map((value, idx, arr)=>{
                    var parser = this.getParser("BorrowOrderInfo");
                    if(parser == undefined)
                        return {}

                    return parser(value);
                    });

                    newInfo.BorrowList = jsonArray;
                }


                if(jsonData.LockTimestampMs != undefined)
                {
                    newInfo.LockTimestampMs = parseFloat(jsonData.LockTimestampMs);
                }


                if(jsonData.BindPhone != undefined)
                {
                    newInfo.BindPhone = parseFloat(jsonData.BindPhone);
                }

                 return newInfo;
            }


            private ModifyMemberInfoReqParser(jsonData:any):any{
                var newInfo = new crystal_net_service.ModifyMemberInfoReq()

                if(jsonData.memberUserId != undefined)
                {
                    newInfo.memberUserId = parseFloat(jsonData.memberUserId);
                }


                if(jsonData.newRole != undefined)
                {
                    newInfo.newRole = parseFloat(jsonData.newRole);
                }


                if(jsonData.newMemberPhone != undefined)
                {
                    newInfo.newMemberPhone = parseFloat(jsonData.newMemberPhone);
                }

                 return newInfo;
            }


            private ModifyMemberInfoResParser(jsonData:any):any{
                var newInfo = new crystal_net_service.ModifyMemberInfoRes()

                if(jsonData.ErrCode != undefined)
                {
                    newInfo.ErrCode = parseFloat(jsonData.ErrCode);
                }

                 return newInfo;
            }


            private ModifyPlayerNameReqParser(jsonData:any):any{
                var newInfo = new crystal_net_service.ModifyPlayerNameReq()

                if(jsonData.newName != undefined)
                {
                    newInfo.newName = jsonData.newName;
                }

                 return newInfo;
            }


            private ModifyPlayerNameResParser(jsonData:any):any{
                var newInfo = new crystal_net_service.ModifyPlayerNameRes()

                if(jsonData.errCode != undefined)
                {
                    newInfo.errCode = parseFloat(jsonData.errCode);
                }

                 return newInfo;
            }


            private ModifyPwdInfoParser(jsonData:any):any{
                var newInfo = new crystal_net_service.ModifyPwdInfo()

                if(jsonData.OldPwd != undefined)
                {
                    newInfo.OldPwd = jsonData.OldPwd;
                }


                if(jsonData.NewPwd != undefined)
                {
                    newInfo.NewPwd = jsonData.NewPwd;
                }

                 return newInfo;
            }


            private ModifyUserInfoReqParser(jsonData:any):any{
                var newInfo = new crystal_net_service.ModifyUserInfoReq()

                if(jsonData.PwdInfo != undefined)
                {
                    var jsonFieldInfo = jsonData.PwdInfo;
                    var cb = this.getParser("ModifyPwdInfo");
                    if(cb != undefined)
                    {
                        newInfo.PwdInfo = cb(jsonFieldInfo);
                    }
                    else
                    {
                        console.log("field PwdInfo have no ModifyPwdInfo parser");
                    }
                }


                if(jsonData.Nickname != undefined)
                {
                    newInfo.Nickname = jsonData.Nickname;
                }

                 return newInfo;
            }


            private ModifyUserInfoResParser(jsonData:any):any{
                var newInfo = new crystal_net_service.ModifyUserInfoRes()

                if(jsonData.ErrCode != undefined)
                {
                    newInfo.ErrCode = parseFloat(jsonData.ErrCode);
                }

                 return newInfo;
            }


            private NODE_IPTYPEParser(jsonData:any):any{
                var newInfo = new crystal_net_service.NODE_IPTYPE()
                 return newInfo;
            }


            private NodeHeartbeatInfoParser(jsonData:any):any{
                var newInfo = new crystal_net_service.NodeHeartbeatInfo()

                if(jsonData.ServiceName != undefined)
                {
                    newInfo.ServiceName = jsonData.ServiceName;
                }


                if(jsonData.address != undefined)
                {
                    newInfo.address = jsonData.address;
                }


                if(jsonData.IpType != undefined)
                {
                    newInfo.IpType = parseFloat(jsonData.IpType);
                }


                if(jsonData.InnerLinkPort != undefined)
                {
                    newInfo.InnerLinkPort = parseFloat(jsonData.InnerLinkPort);
                }


                if(jsonData.SubscribeOpcodes != undefined)
                {
                    var jsonArray = jsonData.SubscribeOpcodes.map((value, idx, arr)=>{
                    return parseFloat(value);
                    });

                    newInfo.SubscribeOpcodes = jsonArray;
                }


                if(jsonData.ApiList != undefined)
                {
                    var jsonArray = jsonData.ApiList.map((value, idx, arr)=>{
                    return value;
                    });

                    newInfo.ApiList = jsonArray;
                }

                 return newInfo;
            }


            private NodeHeartbeatReqParser(jsonData:any):any{
                var newInfo = new crystal_net_service.NodeHeartbeatReq()
                 return newInfo;
            }


            private NodeHeartbeatResParser(jsonData:any):any{
                var newInfo = new crystal_net_service.NodeHeartbeatRes()

                if(jsonData.NowTimeNanoseconds != undefined)
                {
                    newInfo.NowTimeNanoseconds = parseFloat(jsonData.NowTimeNanoseconds);
                }

                 return newInfo;
            }


            private OfflineDataParser(jsonData:any):any{
                var newInfo = new crystal_net_service.OfflineData()

                if(jsonData.OfflineType != undefined)
                {
                    newInfo.OfflineType = parseFloat(jsonData.OfflineType);
                }


                if(jsonData.UserId != undefined)
                {
                    newInfo.UserId = parseFloat(jsonData.UserId);
                }


                if(jsonData.OfflineData != undefined)
                {
                    newInfo.OfflineData = jsonData.OfflineData;
                }


                if(jsonData.CreateTime != undefined)
                {
                    newInfo.CreateTime = parseFloat(jsonData.CreateTime);
                }

                 return newInfo;
            }


            private OfflineTypeParser(jsonData:any):any{
                var newInfo = new crystal_net_service.OfflineType()
                 return newInfo;
            }


            private OperationLogInfoParser(jsonData:any):any{
                var newInfo = new crystal_net_service.OperationLogInfo()

                if(jsonData.OpType != undefined)
                {
                    newInfo.OpType = parseFloat(jsonData.OpType);
                }


                if(jsonData.OpUserId != undefined)
                {
                    newInfo.OpUserId = parseFloat(jsonData.OpUserId);
                }


                if(jsonData.OpNickname != undefined)
                {
                    newInfo.OpNickname = jsonData.OpNickname;
                }


                if(jsonData.Role != undefined)
                {
                    newInfo.Role = parseFloat(jsonData.Role);
                }


                if(jsonData.OpTimeMs != undefined)
                {
                    newInfo.OpTimeMs = parseFloat(jsonData.OpTimeMs);
                }


                if(jsonData.Params != undefined)
                {
                    var jsonArray = jsonData.Params.map((value, idx, arr)=>{
                    var parser = this.getParser("VariantParam");
                    if(parser == undefined)
                        return {}

                    return parser(value);
                    });

                    newInfo.Params = jsonArray;
                }

                 return newInfo;
            }


            private OperationTypeParser(jsonData:any):any{
                var newInfo = new crystal_net_service.OperationType()
                 return newInfo;
            }


            private PassTimeDataParser(jsonData:any):any{
                var newInfo = new crystal_net_service.PassTimeData()

                if(jsonData.LastPassDayTime != undefined)
                {
                    newInfo.LastPassDayTime = parseFloat(jsonData.LastPassDayTime);
                }

                 return newInfo;
            }


            private PlayerDataParser(jsonData:any):any{
                var newInfo = new crystal_net_service.PlayerData()

                if(jsonData.account != undefined)
                {
                    newInfo.account = jsonData.account;
                }


                if(jsonData.playerId != undefined)
                {
                    newInfo.playerId = parseFloat(jsonData.playerId);
                }


                if(jsonData.sex != undefined)
                {
                    newInfo.sex = parseFloat(jsonData.sex);
                }


                if(jsonData.name != undefined)
                {
                    newInfo.name = jsonData.name;
                }

                 return newInfo;
            }


            private PlayerDataNtyParser(jsonData:any):any{
                var newInfo = new crystal_net_service.PlayerDataNty()

                if(jsonData.playerData != undefined)
                {
                    var jsonFieldInfo = jsonData.playerData;
                    var cb = this.getParser("PlayerData");
                    if(cb != undefined)
                    {
                        newInfo.playerData = cb(jsonFieldInfo);
                    }
                    else
                    {
                        console.log("field playerData have no PlayerData parser");
                    }
                }

                 return newInfo;
            }


            private PlayerDataReqParser(jsonData:any):any{
                var newInfo = new crystal_net_service.PlayerDataReq()

                if(jsonData.account != undefined)
                {
                    newInfo.account = jsonData.account;
                }


                if(jsonData.pwd != undefined)
                {
                    newInfo.pwd = jsonData.pwd;
                }

                 return newInfo;
            }


            private PlayerDataResParser(jsonData:any):any{
                var newInfo = new crystal_net_service.PlayerDataRes()

                if(jsonData.errCode != undefined)
                {
                    newInfo.errCode = parseFloat(jsonData.errCode);
                }


                if(jsonData.playerData != undefined)
                {
                    var jsonFieldInfo = jsonData.playerData;
                    var cb = this.getParser("PlayerData");
                    if(cb != undefined)
                    {
                        newInfo.playerData = cb(jsonFieldInfo);
                    }
                    else
                    {
                        console.log("field playerData have no PlayerData parser");
                    }
                }


                if(jsonData.loginToken != undefined)
                {
                    newInfo.loginToken = jsonData.loginToken;
                }

                 return newInfo;
            }


            private QuitLibraryReqParser(jsonData:any):any{
                var newInfo = new crystal_net_service.QuitLibraryReq()
                 return newInfo;
            }


            private QuitLibraryResParser(jsonData:any):any{
                var newInfo = new crystal_net_service.QuitLibraryRes()

                if(jsonData.ErrCode != undefined)
                {
                    newInfo.ErrCode = parseFloat(jsonData.ErrCode);
                }

                 return newInfo;
            }


            private RegisterNodeReqParser(jsonData:any):any{
                var newInfo = new crystal_net_service.RegisterNodeReq()

                if(jsonData.NodeInfo != undefined)
                {
                    var jsonFieldInfo = jsonData.NodeInfo;
                    var cb = this.getParser("NodeHeartbeatInfo");
                    if(cb != undefined)
                    {
                        newInfo.NodeInfo = cb(jsonFieldInfo);
                    }
                    else
                    {
                        console.log("field NodeInfo have no NodeHeartbeatInfo parser");
                    }
                }

                 return newInfo;
            }


            private RegisterNodeResParser(jsonData:any):any{
                var newInfo = new crystal_net_service.RegisterNodeRes()

                if(jsonData.ErrCode != undefined)
                {
                    newInfo.ErrCode = parseFloat(jsonData.ErrCode);
                }

                 return newInfo;
            }


            private RegisterUserInfoParser(jsonData:any):any{
                var newInfo = new crystal_net_service.RegisterUserInfo()

                if(jsonData.AccountName != undefined)
                {
                    newInfo.AccountName = jsonData.AccountName;
                }


                if(jsonData.Nickname != undefined)
                {
                    newInfo.Nickname = jsonData.Nickname;
                }


                if(jsonData.Pwd != undefined)
                {
                    newInfo.Pwd = jsonData.Pwd;
                }


                if(jsonData.CreatePhoneImei != undefined)
                {
                    newInfo.CreatePhoneImei = jsonData.CreatePhoneImei;
                }

                 return newInfo;
            }


            private RemoveUserNotifyDataItemNtyParser(jsonData:any):any{
                var newInfo = new crystal_net_service.RemoveUserNotifyDataItemNty()

                if(jsonData.NotifyIds != undefined)
                {
                    var jsonArray = jsonData.NotifyIds.map((value, idx, arr)=>{
                    return parseFloat(value);
                    });

                    newInfo.NotifyIds = jsonArray;
                }

                 return newInfo;
            }


            private RoleTypeParser(jsonData:any):any{
                var newInfo = new crystal_net_service.RoleType()
                 return newInfo;
            }


            private SetBookBagInfoReqParser(jsonData:any):any{
                var newInfo = new crystal_net_service.SetBookBagInfoReq()

                if(jsonData.BookInfoItem != undefined)
                {
                    var jsonFieldInfo = jsonData.BookInfoItem;
                    var cb = this.getParser("BookInfoItem");
                    if(cb != undefined)
                    {
                        newInfo.BookInfoItem = cb(jsonFieldInfo);
                    }
                    else
                    {
                        console.log("field BookInfoItem have no BookInfoItem parser");
                    }
                }

                 return newInfo;
            }


            private SetBookBagInfoResParser(jsonData:any):any{
                var newInfo = new crystal_net_service.SetBookBagInfoRes()

                if(jsonData.ErrCode != undefined)
                {
                    newInfo.ErrCode = parseFloat(jsonData.ErrCode);
                }

                 return newInfo;
            }


            private SimpleInfoParser(jsonData:any):any{
                var newInfo = new crystal_net_service.SimpleInfo()

                if(jsonData.MaxIncId != undefined)
                {
                    newInfo.MaxIncId = parseFloat(jsonData.MaxIncId);
                }


                if(jsonData.DirtyCount != undefined)
                {
                    newInfo.DirtyCount = parseFloat(jsonData.DirtyCount);
                }


                if(jsonData.VersionNo != undefined)
                {
                    newInfo.VersionNo = parseFloat(jsonData.VersionNo);
                }

                 return newInfo;
            }


            private SimpleUserInfoParser(jsonData:any):any{
                var newInfo = new crystal_net_service.SimpleUserInfo()

                if(jsonData.UserId != undefined)
                {
                    newInfo.UserId = parseFloat(jsonData.UserId);
                }


                if(jsonData.Nickname != undefined)
                {
                    newInfo.Nickname = jsonData.Nickname;
                }


                if(jsonData.BindPhone != undefined)
                {
                    newInfo.BindPhone = parseFloat(jsonData.BindPhone);
                }

                 return newInfo;
            }


            private SnapshotClientInfoParser(jsonData:any):any{
                var newInfo = new crystal_net_service.SnapshotClientInfo()

                if(jsonData.Id != undefined)
                {
                    newInfo.Id = parseFloat(jsonData.Id);
                }


                if(jsonData.FilePath != undefined)
                {
                    newInfo.FilePath = jsonData.FilePath;
                }

                 return newInfo;
            }


            private SnapshotFieldParser(jsonData:any):any{
                var newInfo = new crystal_net_service.SnapshotField()

                if(jsonData.Snapshots != undefined)
                {
                    var jsonArray = jsonData.Snapshots.map((value, idx, arr)=>{
                    return value;
                    });

                    newInfo.Snapshots = jsonArray;
                }

                 return newInfo;
            }


            private SubmitBookBagBorrowInfoReqParser(jsonData:any):any{
                var newInfo = new crystal_net_service.SubmitBookBagBorrowInfoReq()
                 return newInfo;
            }


            private SubmitBookBagBorrowInfoResParser(jsonData:any):any{
                var newInfo = new crystal_net_service.SubmitBookBagBorrowInfoRes()

                if(jsonData.ErrCode != undefined)
                {
                    newInfo.ErrCode = parseFloat(jsonData.ErrCode);
                }

                 return newInfo;
            }


            private TestMgrDataParser(jsonData:any):any{
                var newInfo = new crystal_net_service.TestMgrData()

                if(jsonData.Account != undefined)
                {
                    newInfo.Account = jsonData.Account;
                }


                if(jsonData.TestId != undefined)
                {
                    newInfo.TestId = parseFloat(jsonData.TestId);
                }

                 return newInfo;
            }


            private TestOpcode2ReqParser(jsonData:any):any{
                var newInfo = new crystal_net_service.TestOpcode2Req()

                if(jsonData.id != undefined)
                {
                    newInfo.id = parseFloat(jsonData.id);
                }


                if(jsonData.content != undefined)
                {
                    newInfo.content = jsonData.content;
                }

                 return newInfo;
            }


            private TestOpcode2ResParser(jsonData:any):any{
                var newInfo = new crystal_net_service.TestOpcode2Res()

                if(jsonData.id_info != undefined)
                {
                    newInfo.id_info = parseFloat(jsonData.id_info);
                }


                if(jsonData.testInfo != undefined)
                {
                    var jsonFieldInfo = jsonData.testInfo;
                    var cb = this.getParser("TestOpcodeInfo");
                    if(cb != undefined)
                    {
                        newInfo.testInfo = cb(jsonFieldInfo);
                    }
                    else
                    {
                        console.log("field testInfo have no TestOpcodeInfo parser");
                    }
                }

                 return newInfo;
            }


            private TestOpcodeInfoParser(jsonData:any):any{
                var newInfo = new crystal_net_service.TestOpcodeInfo()

                if(jsonData.errCode != undefined)
                {
                    newInfo.errCode = parseFloat(jsonData.errCode);
                }


                if(jsonData.errMsg != undefined)
                {
                    newInfo.errMsg = jsonData.errMsg;
                }

                 return newInfo;
            }


            private TestOpcodeReqParser(jsonData:any):any{
                var newInfo = new crystal_net_service.TestOpcodeReq()

                if(jsonData.content != undefined)
                {
                    newInfo.content = jsonData.content;
                }


                if(jsonData.TestId != undefined)
                {
                    newInfo.TestId = parseFloat(jsonData.TestId);
                }

                 return newInfo;
            }


            private TestOpcodeResParser(jsonData:any):any{
                var newInfo = new crystal_net_service.TestOpcodeRes()

                if(jsonData.content != undefined)
                {
                    newInfo.content = jsonData.content;
                }


                if(jsonData.TestId != undefined)
                {
                    newInfo.TestId = parseFloat(jsonData.TestId);
                }

                 return newInfo;
            }


            private TitleInfoParser(jsonData:any):any{
                var newInfo = new crystal_net_service.TitleInfo()

                if(jsonData.titleCfgId != undefined)
                {
                    newInfo.titleCfgId = parseFloat(jsonData.titleCfgId);
                }


                if(jsonData.expiredTs != undefined)
                {
                    newInfo.expiredTs = parseFloat(jsonData.expiredTs);
                }

                 return newInfo;
            }


            private TitleInfoReqParser(jsonData:any):any{
                var newInfo = new crystal_net_service.TitleInfoReq()
                 return newInfo;
            }


            private TitleInfoResParser(jsonData:any):any{
                var newInfo = new crystal_net_service.TitleInfoRes()

                if(jsonData.errCode != undefined)
                {
                    newInfo.errCode = parseFloat(jsonData.errCode);
                }


                if(jsonData.titleList != undefined)
                {
                    var jsonArray = jsonData.titleList.map((value, idx, arr)=>{
                    var parser = this.getParser("TitleInfo");
                    if(parser == undefined)
                        return {}

                    return parser(value);
                    });

                    newInfo.titleList = jsonArray;
                }

                 return newInfo;
            }


            private TransferLibraianReqParser(jsonData:any):any{
                var newInfo = new crystal_net_service.TransferLibraianReq()

                if(jsonData.TargetUserId != undefined)
                {
                    newInfo.TargetUserId = parseFloat(jsonData.TargetUserId);
                }

                 return newInfo;
            }


            private TransferLibraianResParser(jsonData:any):any{
                var newInfo = new crystal_net_service.TransferLibraianRes()

                if(jsonData.ErrCode != undefined)
                {
                    newInfo.ErrCode = parseFloat(jsonData.ErrCode);
                }

                 return newInfo;
            }


            private UserBaseInfoParser(jsonData:any):any{
                var newInfo = new crystal_net_service.UserBaseInfo()

                if(jsonData.UserId != undefined)
                {
                    newInfo.UserId = parseFloat(jsonData.UserId);
                }


                if(jsonData.AccountName != undefined)
                {
                    newInfo.AccountName = jsonData.AccountName;
                }


                if(jsonData.Name != undefined)
                {
                    newInfo.Name = jsonData.Name;
                }


                if(jsonData.Nickname != undefined)
                {
                    newInfo.Nickname = jsonData.Nickname;
                }


                if(jsonData.Pwd != undefined)
                {
                    newInfo.Pwd = jsonData.Pwd;
                }


                if(jsonData.PwdSalt != undefined)
                {
                    newInfo.PwdSalt = jsonData.PwdSalt;
                }


                if(jsonData.BindPhone != undefined)
                {
                    newInfo.BindPhone = parseFloat(jsonData.BindPhone);
                }


                if(jsonData.LastLoginTime != undefined)
                {
                    newInfo.LastLoginTime = parseFloat(jsonData.LastLoginTime);
                }


                if(jsonData.LastLoginIp != undefined)
                {
                    newInfo.LastLoginIp = jsonData.LastLoginIp;
                }


                if(jsonData.LastLoginPhoneImei != undefined)
                {
                    newInfo.LastLoginPhoneImei = jsonData.LastLoginPhoneImei;
                }


                if(jsonData.CreateIp != undefined)
                {
                    newInfo.CreateIp = jsonData.CreateIp;
                }


                if(jsonData.CreateTime != undefined)
                {
                    newInfo.CreateTime = parseFloat(jsonData.CreateTime);
                }


                if(jsonData.CreatePhoneImei != undefined)
                {
                    newInfo.CreatePhoneImei = jsonData.CreatePhoneImei;
                }


                if(jsonData.BindMailAddr != undefined)
                {
                    newInfo.BindMailAddr = jsonData.BindMailAddr;
                }


                if(jsonData.LastPassDayTime != undefined)
                {
                    newInfo.LastPassDayTime = parseFloat(jsonData.LastPassDayTime);
                }

                 return newInfo;
            }


            private UserClientInfoNtyParser(jsonData:any):any{
                var newInfo = new crystal_net_service.UserClientInfoNty()

                if(jsonData.ClientInfo != undefined)
                {
                    var jsonFieldInfo = jsonData.ClientInfo;
                    var cb = this.getParser("ClientUserInfo");
                    if(cb != undefined)
                    {
                        newInfo.ClientInfo = cb(jsonFieldInfo);
                    }
                    else
                    {
                        console.log("field ClientInfo have no ClientUserInfo parser");
                    }
                }

                 return newInfo;
            }


            private UserLibraryInfoParser(jsonData:any):any{
                var newInfo = new crystal_net_service.UserLibraryInfo()

                if(jsonData.LibraryId != undefined)
                {
                    newInfo.LibraryId = parseFloat(jsonData.LibraryId);
                }

                 return newInfo;
            }


            private UserLibraryInfoNtyParser(jsonData:any):any{
                var newInfo = new crystal_net_service.UserLibraryInfoNty()

                if(jsonData.UserLibraryInfo != undefined)
                {
                    var jsonFieldInfo = jsonData.UserLibraryInfo;
                    var cb = this.getParser("UserLibraryInfo");
                    if(cb != undefined)
                    {
                        newInfo.UserLibraryInfo = cb(jsonFieldInfo);
                    }
                    else
                    {
                        console.log("field UserLibraryInfo have no UserLibraryInfo parser");
                    }
                }

                 return newInfo;
            }


            private UserLoginInfoParser(jsonData:any):any{
                var newInfo = new crystal_net_service.UserLoginInfo()

                if(jsonData.Token != undefined)
                {
                    newInfo.Token = jsonData.Token;
                }


                if(jsonData.Key != undefined)
                {
                    newInfo.Key = jsonData.Key;
                }


                if(jsonData.KeyExpireTime != undefined)
                {
                    newInfo.KeyExpireTime = parseFloat(jsonData.KeyExpireTime);
                }

                 return newInfo;
            }


            private UserNotifyDataParser(jsonData:any):any{
                var newInfo = new crystal_net_service.UserNotifyData()

                if(jsonData.ItemList != undefined)
                {
                    var jsonArray = jsonData.ItemList.map((value, idx, arr)=>{
                    var parser = this.getParser("UserNotifyDataItem");
                    if(parser == undefined)
                        return {}

                    return parser(value);
                    });

                    newInfo.ItemList = jsonArray;
                }

                 return newInfo;
            }


            private UserNotifyDataItemParser(jsonData:any):any{
                var newInfo = new crystal_net_service.UserNotifyDataItem()

                if(jsonData.NotifyId != undefined)
                {
                    newInfo.NotifyId = parseFloat(jsonData.NotifyId);
                }


                if(jsonData.NotifyTitleWordId != undefined)
                {
                    newInfo.NotifyTitleWordId = jsonData.NotifyTitleWordId;
                }


                if(jsonData.TitleParams != undefined)
                {
                    var jsonArray = jsonData.TitleParams.map((value, idx, arr)=>{
                    var parser = this.getParser("VariantParam");
                    if(parser == undefined)
                        return {}

                    return parser(value);
                    });

                    newInfo.TitleParams = jsonArray;
                }


                if(jsonData.NotifyContentWordId != undefined)
                {
                    newInfo.NotifyContentWordId = jsonData.NotifyContentWordId;
                }


                if(jsonData.ContentParams != undefined)
                {
                    var jsonArray = jsonData.ContentParams.map((value, idx, arr)=>{
                    var parser = this.getParser("VariantParam");
                    if(parser == undefined)
                        return {}

                    return parser(value);
                    });

                    newInfo.ContentParams = jsonArray;
                }


                if(jsonData.CreateTime != undefined)
                {
                    newInfo.CreateTime = parseFloat(jsonData.CreateTime);
                }


                if(jsonData.IsRead != undefined)
                {
                    newInfo.IsRead = parseFloat(jsonData.IsRead);
                }

                 return newInfo;
            }


            private UserNotifyDataNtyParser(jsonData:any):any{
                var newInfo = new crystal_net_service.UserNotifyDataNty()

                if(jsonData.UserNotifyData != undefined)
                {
                    var jsonFieldInfo = jsonData.UserNotifyData;
                    var cb = this.getParser("UserNotifyData");
                    if(cb != undefined)
                    {
                        newInfo.UserNotifyData = cb(jsonFieldInfo);
                    }
                    else
                    {
                        console.log("field UserNotifyData have no UserNotifyData parser");
                    }
                }

                 return newInfo;
            }


            private VariantParamParser(jsonData:any):any{
                var newInfo = new crystal_net_service.VariantParam()

                if(jsonData.VariantType != undefined)
                {
                    newInfo.VariantType = parseFloat(jsonData.VariantType);
                }


                if(jsonData.StrValue != undefined)
                {
                    newInfo.StrValue = jsonData.StrValue;
                }


                if(jsonData.IntValue != undefined)
                {
                    newInfo.IntValue = parseFloat(jsonData.IntValue);
                }


                if(jsonData.UnSignedValue != undefined)
                {
                    newInfo.UnSignedValue = parseFloat(jsonData.UnSignedValue);
                }


                if(jsonData.DoubleValue != undefined)
                {
                    newInfo.DoubleValue = parseFloat(jsonData.DoubleValue);
                }

                 return newInfo;
            }


            private VariantParamTypeParser(jsonData:any):any{
                var newInfo = new crystal_net_service.VariantParamType()
                 return newInfo;
            }


    }

}