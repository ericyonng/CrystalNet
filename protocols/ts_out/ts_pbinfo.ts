/*!
*  MIT License
*  
*  Copyright (c) 2020 ericyonng<120453674@qq.com>
*  
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the "Software"), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*  
*  The above copyright notice and this permission notice shall be included in all
*  copies or substantial portions of the Software.
*  
*  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
*  SOFTWARE.
* 
* Author: Eric Yonng
* Description: Generated By protogentool, Dont Modify This File!!!
*/


export namespace ts_pbinfo{

    // login.proto 
    export class LoginReq {
      getOpcode():number {return LoginReq.OPCODE; }
      getIsXorEncrypt():boolean {return LoginReq.XorEncrypt; }
      getIsKeyBase64():boolean {return LoginReq.KeyBase64; }
      getOpcodeName():string {return LoginReq.OPCODE_NAME; }
      static OPCODE:number = 1;
      static OPCODE_NAME:string = "LoginReq";
      static XorEncrypt:boolean = true;
      static KeyBase64:boolean = true;
    }


    // login.proto 
    export class LoginRes {
      getOpcode():number {return LoginRes.OPCODE; }
      getIsXorEncrypt():boolean {return LoginRes.XorEncrypt; }
      getIsKeyBase64():boolean {return LoginRes.KeyBase64; }
      getOpcodeName():string {return LoginRes.OPCODE_NAME; }
      static OPCODE:number = 2;
      static OPCODE_NAME:string = "LoginRes";
      static XorEncrypt:boolean = false;
      static KeyBase64:boolean = false;
    }


    // test_opcode.proto 
    export class TestOpcodeReq {
      getOpcode():number {return TestOpcodeReq.OPCODE; }
      getIsXorEncrypt():boolean {return TestOpcodeReq.XorEncrypt; }
      getIsKeyBase64():boolean {return TestOpcodeReq.KeyBase64; }
      getOpcodeName():string {return TestOpcodeReq.OPCODE_NAME; }
      static OPCODE:number = 3;
      static OPCODE_NAME:string = "TestOpcodeReq";
      static XorEncrypt:boolean = false;
      static KeyBase64:boolean = false;
    }


    // test_opcode.proto 
    export class TestOpcodeRes {
      getOpcode():number {return TestOpcodeRes.OPCODE; }
      getIsXorEncrypt():boolean {return TestOpcodeRes.XorEncrypt; }
      getIsKeyBase64():boolean {return TestOpcodeRes.KeyBase64; }
      getOpcodeName():string {return TestOpcodeRes.OPCODE_NAME; }
      static OPCODE:number = 4;
      static OPCODE_NAME:string = "TestOpcodeRes";
      static XorEncrypt:boolean = false;
      static KeyBase64:boolean = false;
    }


    // test_opcode.proto 
    export class TestOpcode2Req {
      getOpcode():number {return TestOpcode2Req.OPCODE; }
      getIsXorEncrypt():boolean {return TestOpcode2Req.XorEncrypt; }
      getIsKeyBase64():boolean {return TestOpcode2Req.KeyBase64; }
      getOpcodeName():string {return TestOpcode2Req.OPCODE_NAME; }
      static OPCODE:number = 5;
      static OPCODE_NAME:string = "TestOpcode2Req";
      static XorEncrypt:boolean = false;
      static KeyBase64:boolean = false;
    }


    // test_opcode.proto 
    export class TestOpcode2Res {
      getOpcode():number {return TestOpcode2Res.OPCODE; }
      getIsXorEncrypt():boolean {return TestOpcode2Res.XorEncrypt; }
      getIsKeyBase64():boolean {return TestOpcode2Res.KeyBase64; }
      getOpcodeName():string {return TestOpcode2Res.OPCODE_NAME; }
      static OPCODE:number = 6;
      static OPCODE_NAME:string = "TestOpcode2Res";
      static XorEncrypt:boolean = false;
      static KeyBase64:boolean = false;
    }


    // player.proto 
    export class PlayerDataReq {
      getOpcode():number {return PlayerDataReq.OPCODE; }
      getIsXorEncrypt():boolean {return PlayerDataReq.XorEncrypt; }
      getIsKeyBase64():boolean {return PlayerDataReq.KeyBase64; }
      getOpcodeName():string {return PlayerDataReq.OPCODE_NAME; }
      static OPCODE:number = 7;
      static OPCODE_NAME:string = "PlayerDataReq";
      static XorEncrypt:boolean = false;
      static KeyBase64:boolean = false;
    }


    // player.proto 
    export class PlayerDataRes {
      getOpcode():number {return PlayerDataRes.OPCODE; }
      getIsXorEncrypt():boolean {return PlayerDataRes.XorEncrypt; }
      getIsKeyBase64():boolean {return PlayerDataRes.KeyBase64; }
      getOpcodeName():string {return PlayerDataRes.OPCODE_NAME; }
      static OPCODE:number = 8;
      static OPCODE_NAME:string = "PlayerDataRes";
      static XorEncrypt:boolean = false;
      static KeyBase64:boolean = false;
    }


    // player.proto 
    export class ModifyPlayerNameReq {
      getOpcode():number {return ModifyPlayerNameReq.OPCODE; }
      getIsXorEncrypt():boolean {return ModifyPlayerNameReq.XorEncrypt; }
      getIsKeyBase64():boolean {return ModifyPlayerNameReq.KeyBase64; }
      getOpcodeName():string {return ModifyPlayerNameReq.OPCODE_NAME; }
      static OPCODE:number = 9;
      static OPCODE_NAME:string = "ModifyPlayerNameReq";
      static XorEncrypt:boolean = false;
      static KeyBase64:boolean = false;
    }


    // player.proto 
    export class ModifyPlayerNameRes {
      getOpcode():number {return ModifyPlayerNameRes.OPCODE; }
      getIsXorEncrypt():boolean {return ModifyPlayerNameRes.XorEncrypt; }
      getIsKeyBase64():boolean {return ModifyPlayerNameRes.KeyBase64; }
      getOpcodeName():string {return ModifyPlayerNameRes.OPCODE_NAME; }
      static OPCODE:number = 10;
      static OPCODE_NAME:string = "ModifyPlayerNameRes";
      static XorEncrypt:boolean = false;
      static KeyBase64:boolean = false;
    }


    // player.proto 
    export class PlayerDataNty {
      getOpcode():number {return PlayerDataNty.OPCODE; }
      getIsXorEncrypt():boolean {return PlayerDataNty.XorEncrypt; }
      getIsKeyBase64():boolean {return PlayerDataNty.KeyBase64; }
      getOpcodeName():string {return PlayerDataNty.OPCODE_NAME; }
      static OPCODE:number = 11;
      static OPCODE_NAME:string = "PlayerDataNty";
      static XorEncrypt:boolean = false;
      static KeyBase64:boolean = false;
    }


    // title.proto 
    export class TitleInfoReq {
      getOpcode():number {return TitleInfoReq.OPCODE; }
      getIsXorEncrypt():boolean {return TitleInfoReq.XorEncrypt; }
      getIsKeyBase64():boolean {return TitleInfoReq.KeyBase64; }
      getOpcodeName():string {return TitleInfoReq.OPCODE_NAME; }
      static OPCODE:number = 20;
      static OPCODE_NAME:string = "TitleInfoReq";
      static XorEncrypt:boolean = false;
      static KeyBase64:boolean = false;
    }


    // title.proto 
    export class TitleInfoRes {
      getOpcode():number {return TitleInfoRes.OPCODE; }
      getIsXorEncrypt():boolean {return TitleInfoRes.XorEncrypt; }
      getIsKeyBase64():boolean {return TitleInfoRes.KeyBase64; }
      getOpcodeName():string {return TitleInfoRes.OPCODE_NAME; }
      static OPCODE:number = 21;
      static OPCODE_NAME:string = "TitleInfoRes";
      static XorEncrypt:boolean = false;
      static KeyBase64:boolean = false;
    }


    // login.proto 
    export class LoginInfoNty {
      getOpcode():number {return LoginInfoNty.OPCODE; }
      getIsXorEncrypt():boolean {return LoginInfoNty.XorEncrypt; }
      getIsKeyBase64():boolean {return LoginInfoNty.KeyBase64; }
      getOpcodeName():string {return LoginInfoNty.OPCODE_NAME; }
      static OPCODE:number = 22;
      static OPCODE_NAME:string = "LoginInfoNty";
      static XorEncrypt:boolean = false;
      static KeyBase64:boolean = false;
    }


    // heartbeat.proto 
    export class NodeHeartbeatReq {
      getOpcode():number {return NodeHeartbeatReq.OPCODE; }
      getIsXorEncrypt():boolean {return NodeHeartbeatReq.XorEncrypt; }
      getIsKeyBase64():boolean {return NodeHeartbeatReq.KeyBase64; }
      getOpcodeName():string {return NodeHeartbeatReq.OPCODE_NAME; }
      static OPCODE:number = 23;
      static OPCODE_NAME:string = "NodeHeartbeatReq";
      static XorEncrypt:boolean = false;
      static KeyBase64:boolean = false;
    }


    // heartbeat.proto 
    export class NodeHeartbeatRes {
      getOpcode():number {return NodeHeartbeatRes.OPCODE; }
      getIsXorEncrypt():boolean {return NodeHeartbeatRes.XorEncrypt; }
      getIsKeyBase64():boolean {return NodeHeartbeatRes.KeyBase64; }
      getOpcodeName():string {return NodeHeartbeatRes.OPCODE_NAME; }
      static OPCODE:number = 24;
      static OPCODE_NAME:string = "NodeHeartbeatRes";
      static XorEncrypt:boolean = false;
      static KeyBase64:boolean = false;
    }


    // heartbeat.proto 
    export class RegisterNodeReq {
      getOpcode():number {return RegisterNodeReq.OPCODE; }
      getIsXorEncrypt():boolean {return RegisterNodeReq.XorEncrypt; }
      getIsKeyBase64():boolean {return RegisterNodeReq.KeyBase64; }
      getOpcodeName():string {return RegisterNodeReq.OPCODE_NAME; }
      static OPCODE:number = 25;
      static OPCODE_NAME:string = "RegisterNodeReq";
      static XorEncrypt:boolean = false;
      static KeyBase64:boolean = false;
    }


    // heartbeat.proto 
    export class RegisterNodeRes {
      getOpcode():number {return RegisterNodeRes.OPCODE; }
      getIsXorEncrypt():boolean {return RegisterNodeRes.XorEncrypt; }
      getIsKeyBase64():boolean {return RegisterNodeRes.KeyBase64; }
      getOpcodeName():string {return RegisterNodeRes.OPCODE_NAME; }
      static OPCODE:number = 26;
      static OPCODE_NAME:string = "RegisterNodeRes";
      static XorEncrypt:boolean = false;
      static KeyBase64:boolean = false;
    }


    // heartbeat.proto 
    export class GetNodeListReq {
      getOpcode():number {return GetNodeListReq.OPCODE; }
      getIsXorEncrypt():boolean {return GetNodeListReq.XorEncrypt; }
      getIsKeyBase64():boolean {return GetNodeListReq.KeyBase64; }
      getOpcodeName():string {return GetNodeListReq.OPCODE_NAME; }
      static OPCODE:number = 27;
      static OPCODE_NAME:string = "GetNodeListReq";
      static XorEncrypt:boolean = false;
      static KeyBase64:boolean = false;
    }


    // heartbeat.proto 
    export class GetNodeListRes {
      getOpcode():number {return GetNodeListRes.OPCODE; }
      getIsXorEncrypt():boolean {return GetNodeListRes.XorEncrypt; }
      getIsKeyBase64():boolean {return GetNodeListRes.KeyBase64; }
      getOpcodeName():string {return GetNodeListRes.OPCODE_NAME; }
      static OPCODE:number = 28;
      static OPCODE_NAME:string = "GetNodeListRes";
      static XorEncrypt:boolean = false;
      static KeyBase64:boolean = false;
    }


    // heartbeat.proto 
    export class ClientHeartbeatReq {
      getOpcode():number {return ClientHeartbeatReq.OPCODE; }
      getIsXorEncrypt():boolean {return ClientHeartbeatReq.XorEncrypt; }
      getIsKeyBase64():boolean {return ClientHeartbeatReq.KeyBase64; }
      getOpcodeName():string {return ClientHeartbeatReq.OPCODE_NAME; }
      static OPCODE:number = 29;
      static OPCODE_NAME:string = "ClientHeartbeatReq";
      static XorEncrypt:boolean = true;
      static KeyBase64:boolean = true;
    }


    // heartbeat.proto 
    export class ClientHeartbeatRes {
      getOpcode():number {return ClientHeartbeatRes.OPCODE; }
      getIsXorEncrypt():boolean {return ClientHeartbeatRes.XorEncrypt; }
      getIsKeyBase64():boolean {return ClientHeartbeatRes.KeyBase64; }
      getOpcodeName():string {return ClientHeartbeatRes.OPCODE_NAME; }
      static OPCODE:number = 30;
      static OPCODE_NAME:string = "ClientHeartbeatRes";
      static XorEncrypt:boolean = false;
      static KeyBase64:boolean = false;
    }


    // login.proto 
    export class LogoutReq {
      getOpcode():number {return LogoutReq.OPCODE; }
      getIsXorEncrypt():boolean {return LogoutReq.XorEncrypt; }
      getIsKeyBase64():boolean {return LogoutReq.KeyBase64; }
      getOpcodeName():string {return LogoutReq.OPCODE_NAME; }
      static OPCODE:number = 31;
      static OPCODE_NAME:string = "LogoutReq";
      static XorEncrypt:boolean = false;
      static KeyBase64:boolean = false;
    }


    // login.proto 
    export class LogoutNty {
      getOpcode():number {return LogoutNty.OPCODE; }
      getIsXorEncrypt():boolean {return LogoutNty.XorEncrypt; }
      getIsKeyBase64():boolean {return LogoutNty.KeyBase64; }
      getOpcodeName():string {return LogoutNty.OPCODE_NAME; }
      static OPCODE:number = 32;
      static OPCODE_NAME:string = "LogoutNty";
      static XorEncrypt:boolean = false;
      static KeyBase64:boolean = false;
    }


    export class TsPbDict {
      static pb_dict = {
          [LoginReq.OPCODE]: new LoginReq(),

          [LoginRes.OPCODE]: new LoginRes(),

          [TestOpcodeReq.OPCODE]: new TestOpcodeReq(),

          [TestOpcodeRes.OPCODE]: new TestOpcodeRes(),

          [TestOpcode2Req.OPCODE]: new TestOpcode2Req(),

          [TestOpcode2Res.OPCODE]: new TestOpcode2Res(),

          [PlayerDataReq.OPCODE]: new PlayerDataReq(),

          [PlayerDataRes.OPCODE]: new PlayerDataRes(),

          [ModifyPlayerNameReq.OPCODE]: new ModifyPlayerNameReq(),

          [ModifyPlayerNameRes.OPCODE]: new ModifyPlayerNameRes(),

          [PlayerDataNty.OPCODE]: new PlayerDataNty(),

          [TitleInfoReq.OPCODE]: new TitleInfoReq(),

          [TitleInfoRes.OPCODE]: new TitleInfoRes(),

          [LoginInfoNty.OPCODE]: new LoginInfoNty(),

          [NodeHeartbeatReq.OPCODE]: new NodeHeartbeatReq(),

          [NodeHeartbeatRes.OPCODE]: new NodeHeartbeatRes(),

          [RegisterNodeReq.OPCODE]: new RegisterNodeReq(),

          [RegisterNodeRes.OPCODE]: new RegisterNodeRes(),

          [GetNodeListReq.OPCODE]: new GetNodeListReq(),

          [GetNodeListRes.OPCODE]: new GetNodeListRes(),

          [ClientHeartbeatReq.OPCODE]: new ClientHeartbeatReq(),

          [ClientHeartbeatRes.OPCODE]: new ClientHeartbeatRes(),

          [LogoutReq.OPCODE]: new LogoutReq(),

          [LogoutNty.OPCODE]: new LogoutNty()


      }

    }
}