/*!
*  MIT License
*  
*  Copyright (c) 2020 ericyonng<120453674@qq.com>
*  
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the "Software"), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*  
*  The above copyright notice and this permission notice shall be included in all
*  copies or substantial portions of the Software.
*  
*  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
*  SOFTWARE.
* 
* Author: Eric Yonng
* Description: Generated By protogentool, Dont Modify This File!!!
*/


    {// LoginReq
        auto info = OpcodeInfo();
        info._opcode = 1;
        info._opcodeName = "LoginReq";
        info._protoFile = "login.proto";
        _allOpcodeInfo.push_back(info);
        _opcodeRefCoderFactory.insert(std::make_pair(info._opcode, LoginReqFactory::CreateFactory()));
    }

    {// LoginRes
        auto info = OpcodeInfo();
        info._opcode = 2;
        info._opcodeName = "LoginRes";
        info._protoFile = "login.proto";
        _allOpcodeInfo.push_back(info);
        _opcodeRefCoderFactory.insert(std::make_pair(info._opcode, LoginResFactory::CreateFactory()));
    }

    {// TestOpcodeReq
        auto info = OpcodeInfo();
        info._opcode = 3;
        info._opcodeName = "TestOpcodeReq";
        info._protoFile = "test_opcode.proto";
        _allOpcodeInfo.push_back(info);
        _opcodeRefCoderFactory.insert(std::make_pair(info._opcode, TestOpcodeReqFactory::CreateFactory()));
    }

    {// TestOpcodeRes
        auto info = OpcodeInfo();
        info._opcode = 4;
        info._opcodeName = "TestOpcodeRes";
        info._protoFile = "test_opcode.proto";
        _allOpcodeInfo.push_back(info);
        _opcodeRefCoderFactory.insert(std::make_pair(info._opcode, TestOpcodeResFactory::CreateFactory()));
    }

    {// TestOpcode2Req
        auto info = OpcodeInfo();
        info._opcode = 5;
        info._opcodeName = "TestOpcode2Req";
        info._protoFile = "test_opcode.proto";
        _allOpcodeInfo.push_back(info);
        _opcodeRefCoderFactory.insert(std::make_pair(info._opcode, TestOpcode2ReqFactory::CreateFactory()));
    }

    {// TestOpcode2Res
        auto info = OpcodeInfo();
        info._opcode = 6;
        info._opcodeName = "TestOpcode2Res";
        info._protoFile = "test_opcode.proto";
        _allOpcodeInfo.push_back(info);
        _opcodeRefCoderFactory.insert(std::make_pair(info._opcode, TestOpcode2ResFactory::CreateFactory()));
    }

    {// PlayerDataReq
        auto info = OpcodeInfo();
        info._opcode = 7;
        info._opcodeName = "PlayerDataReq";
        info._protoFile = "player.proto";
        _allOpcodeInfo.push_back(info);
        _opcodeRefCoderFactory.insert(std::make_pair(info._opcode, PlayerDataReqFactory::CreateFactory()));
    }

    {// PlayerDataRes
        auto info = OpcodeInfo();
        info._opcode = 8;
        info._opcodeName = "PlayerDataRes";
        info._protoFile = "player.proto";
        _allOpcodeInfo.push_back(info);
        _opcodeRefCoderFactory.insert(std::make_pair(info._opcode, PlayerDataResFactory::CreateFactory()));
    }

    {// ModifyPlayerNameReq
        auto info = OpcodeInfo();
        info._opcode = 9;
        info._opcodeName = "ModifyPlayerNameReq";
        info._protoFile = "player.proto";
        _allOpcodeInfo.push_back(info);
        _opcodeRefCoderFactory.insert(std::make_pair(info._opcode, ModifyPlayerNameReqFactory::CreateFactory()));
    }

    {// ModifyPlayerNameRes
        auto info = OpcodeInfo();
        info._opcode = 10;
        info._opcodeName = "ModifyPlayerNameRes";
        info._protoFile = "player.proto";
        _allOpcodeInfo.push_back(info);
        _opcodeRefCoderFactory.insert(std::make_pair(info._opcode, ModifyPlayerNameResFactory::CreateFactory()));
    }

    {// PlayerDataNty
        auto info = OpcodeInfo();
        info._opcode = 11;
        info._opcodeName = "PlayerDataNty";
        info._protoFile = "player.proto";
        _allOpcodeInfo.push_back(info);
        _opcodeRefCoderFactory.insert(std::make_pair(info._opcode, PlayerDataNtyFactory::CreateFactory()));
    }

    {// TitleInfoReq
        auto info = OpcodeInfo();
        info._opcode = 20;
        info._opcodeName = "TitleInfoReq";
        info._protoFile = "title.proto";
        _allOpcodeInfo.push_back(info);
        _opcodeRefCoderFactory.insert(std::make_pair(info._opcode, TitleInfoReqFactory::CreateFactory()));
    }

    {// TitleInfoRes
        auto info = OpcodeInfo();
        info._opcode = 21;
        info._opcodeName = "TitleInfoRes";
        info._protoFile = "title.proto";
        _allOpcodeInfo.push_back(info);
        _opcodeRefCoderFactory.insert(std::make_pair(info._opcode, TitleInfoResFactory::CreateFactory()));
    }

    {// LoginInfoNty
        auto info = OpcodeInfo();
        info._opcode = 22;
        info._opcodeName = "LoginInfoNty";
        info._protoFile = "login.proto";
        _allOpcodeInfo.push_back(info);
        _opcodeRefCoderFactory.insert(std::make_pair(info._opcode, LoginInfoNtyFactory::CreateFactory()));
    }

    {// NodeHeartbeatReq
        auto info = OpcodeInfo();
        info._opcode = 23;
        info._opcodeName = "NodeHeartbeatReq";
        info._protoFile = "heartbeat.proto";
        _allOpcodeInfo.push_back(info);
        _opcodeRefCoderFactory.insert(std::make_pair(info._opcode, NodeHeartbeatReqFactory::CreateFactory()));
    }

    {// NodeHeartbeatRes
        auto info = OpcodeInfo();
        info._opcode = 24;
        info._opcodeName = "NodeHeartbeatRes";
        info._protoFile = "heartbeat.proto";
        _allOpcodeInfo.push_back(info);
        _opcodeRefCoderFactory.insert(std::make_pair(info._opcode, NodeHeartbeatResFactory::CreateFactory()));
    }

    {// RegisterNodeReq
        auto info = OpcodeInfo();
        info._opcode = 25;
        info._opcodeName = "RegisterNodeReq";
        info._protoFile = "heartbeat.proto";
        _allOpcodeInfo.push_back(info);
        _opcodeRefCoderFactory.insert(std::make_pair(info._opcode, RegisterNodeReqFactory::CreateFactory()));
    }

    {// RegisterNodeRes
        auto info = OpcodeInfo();
        info._opcode = 26;
        info._opcodeName = "RegisterNodeRes";
        info._protoFile = "heartbeat.proto";
        _allOpcodeInfo.push_back(info);
        _opcodeRefCoderFactory.insert(std::make_pair(info._opcode, RegisterNodeResFactory::CreateFactory()));
    }

    {// GetNodeListReq
        auto info = OpcodeInfo();
        info._opcode = 27;
        info._opcodeName = "GetNodeListReq";
        info._protoFile = "heartbeat.proto";
        _allOpcodeInfo.push_back(info);
        _opcodeRefCoderFactory.insert(std::make_pair(info._opcode, GetNodeListReqFactory::CreateFactory()));
    }

    {// GetNodeListRes
        auto info = OpcodeInfo();
        info._opcode = 28;
        info._opcodeName = "GetNodeListRes";
        info._protoFile = "heartbeat.proto";
        _allOpcodeInfo.push_back(info);
        _opcodeRefCoderFactory.insert(std::make_pair(info._opcode, GetNodeListResFactory::CreateFactory()));
    }

    {// ClientHeartbeatReq
        auto info = OpcodeInfo();
        info._opcode = 29;
        info._opcodeName = "ClientHeartbeatReq";
        info._protoFile = "heartbeat.proto";
        _allOpcodeInfo.push_back(info);
        _opcodeRefCoderFactory.insert(std::make_pair(info._opcode, ClientHeartbeatReqFactory::CreateFactory()));
    }

    {// ClientHeartbeatRes
        auto info = OpcodeInfo();
        info._opcode = 30;
        info._opcodeName = "ClientHeartbeatRes";
        info._protoFile = "heartbeat.proto";
        _allOpcodeInfo.push_back(info);
        _opcodeRefCoderFactory.insert(std::make_pair(info._opcode, ClientHeartbeatResFactory::CreateFactory()));
    }
