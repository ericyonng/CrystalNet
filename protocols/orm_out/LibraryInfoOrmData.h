/*!
*  MIT License
*  
*  Copyright (c) 2020 ericyonng<120453674@qq.com>
*  
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the "Software"), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*  
*  The above copyright notice and this permission notice shall be included in all
*  copies or substantial portions of the Software.
*  
*  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
*  SOFTWARE.
* 
* Author: Eric Yonng
* Description: Generated By protogentool, Dont Modify This File!!!
*/


#ifndef __PROTOCOLS_ORM_OUT_LIBRARYINFOORMDATA_H__
#define __PROTOCOLS_ORM_OUT_LIBRARYINFOORMDATA_H__

#pragma once
#include <kernel/kernel.h>
#include <service_common/protocol/ORM/IOrmData.h>

#include <string>
#include <vector>


namespace CRYSTAL_NET {
namespace service {

class LibraryInfo;
class LibararyManagerInfo;
class MemberInfo;
class BookInfo;

}
}

namespace google {
    namespace protobuf {
template <typename Element>
class RepeatedPtrField;


    }
}

SERVICE_COMMON_BEGIN

class LibararyManagerInfoOrmData;
class MemberInfoOrmData;
class BookInfoOrmData;

SERVICE_COMMON_END

SERVICE_COMMON_BEGIN

class LibraryInfoOrmData : public SERVICE_COMMON_NS::IOrmData
{
    POOL_CREATE_OBJ_DEFAULT_P1(IOrmData, LibraryInfoOrmData)

public:
    LibraryInfoOrmData();
    LibraryInfoOrmData(::CRYSTAL_NET::service::LibraryInfo *pb);
    LibraryInfoOrmData(const LibraryInfoOrmData &other);
    LibraryInfoOrmData(LibraryInfoOrmData &&other);
    LibraryInfoOrmData(const ::CRYSTAL_NET::service::LibraryInfo &pb);
    ~LibraryInfoOrmData();

    virtual void Release() override;

    LibraryInfoOrmData &operator =(const ::CRYSTAL_NET::service::LibraryInfo &pb);

    LibraryInfoOrmData &operator =(const LibraryInfoOrmData &other);

    LibraryInfoOrmData &operator =(LibraryInfoOrmData &&other);

    virtual KERNEL_NS::LibString ToJsonString() const override;

    virtual bool ToJsonString(std::string *data) const override;

    virtual bool FromJsonString(const Byte8 *data, size_t len) override;

    virtual Int64 GetOrmId() const override{ return 5; }

    void Clear();
    const ::CRYSTAL_NET::service::LibraryInfo *GetPbRawData() const;

    void clear_id();

    uint64_t id() const;

    void set_id(uint64_t value);

    void clear_name();

    const std::string &name() const;

    void set_name(const std::string &value);

    std::string *mutable_name();

    void clear_address();

    const std::string &address() const;

    void set_address(const std::string &value);

    std::string *mutable_address();

    void clear_opentime();

    const std::string &opentime() const;

    void set_opentime(const std::string &value);

    std::string *mutable_opentime();

    void clear_telphonenumber();

    const std::string &telphonenumber() const;

    void set_telphonenumber(const std::string &value);

    std::string *mutable_telphonenumber();

    void clear_librarianuserid();

    uint64_t librarianuserid() const;

    void set_librarianuserid(uint64_t value);

    void clear_librarianusernickname();

    const std::string &librarianusernickname() const;

    void set_librarianusernickname(const std::string &value);

    std::string *mutable_librarianusernickname();

    Int32 managerinfolist_size() const;

    KERNEL_NS::SmartPtr<LibararyManagerInfoOrmData, KERNEL_NS::AutoDelMethods::CustomDelete> &mutable_managerinfolist(Int32 idx);

    void DeleteArray_managerinfolist(Int32 idx, Int32 count = 1);

    const std::vector<KERNEL_NS::SmartPtr<LibararyManagerInfoOrmData, KERNEL_NS::AutoDelMethods::CustomDelete>> &managerinfolist_OrmDataArray() const;

    const ::google::protobuf::RepeatedPtrField<::CRYSTAL_NET::service::LibararyManagerInfo> &managerinfolist() const;

    const KERNEL_NS::SmartPtr<LibararyManagerInfoOrmData, KERNEL_NS::AutoDelMethods::CustomDelete> &managerinfolist_OrmDataArray(Int32 idx) const;

    const ::CRYSTAL_NET::service::LibararyManagerInfo &managerinfolist(Int32 idx) const;

    KERNEL_NS::SmartPtr<LibararyManagerInfoOrmData, KERNEL_NS::AutoDelMethods::CustomDelete> &add_managerinfolist();

    void clear_managerinfolist();

    Int32 memberlist_size() const;

    KERNEL_NS::SmartPtr<MemberInfoOrmData, KERNEL_NS::AutoDelMethods::CustomDelete> &mutable_memberlist(Int32 idx);

    void DeleteArray_memberlist(Int32 idx, Int32 count = 1);

    const std::vector<KERNEL_NS::SmartPtr<MemberInfoOrmData, KERNEL_NS::AutoDelMethods::CustomDelete>> &memberlist_OrmDataArray() const;

    const ::google::protobuf::RepeatedPtrField<::CRYSTAL_NET::service::MemberInfo> &memberlist() const;

    const KERNEL_NS::SmartPtr<MemberInfoOrmData, KERNEL_NS::AutoDelMethods::CustomDelete> &memberlist_OrmDataArray(Int32 idx) const;

    const ::CRYSTAL_NET::service::MemberInfo &memberlist(Int32 idx) const;

    KERNEL_NS::SmartPtr<MemberInfoOrmData, KERNEL_NS::AutoDelMethods::CustomDelete> &add_memberlist();

    void clear_memberlist();

    Int32 booklist_size() const;

    KERNEL_NS::SmartPtr<BookInfoOrmData, KERNEL_NS::AutoDelMethods::CustomDelete> &mutable_booklist(Int32 idx);

    void DeleteArray_booklist(Int32 idx, Int32 count = 1);

    const std::vector<KERNEL_NS::SmartPtr<BookInfoOrmData, KERNEL_NS::AutoDelMethods::CustomDelete>> &booklist_OrmDataArray() const;

    const ::google::protobuf::RepeatedPtrField<::CRYSTAL_NET::service::BookInfo> &booklist() const;

    const KERNEL_NS::SmartPtr<BookInfoOrmData, KERNEL_NS::AutoDelMethods::CustomDelete> &booklist_OrmDataArray(Int32 idx) const;

    const ::CRYSTAL_NET::service::BookInfo &booklist(Int32 idx) const;

    KERNEL_NS::SmartPtr<BookInfoOrmData, KERNEL_NS::AutoDelMethods::CustomDelete> &add_booklist();

    void clear_booklist();


protected:

    virtual bool _OnEncode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) const override;
    virtual bool _OnEncode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) const override;

    virtual bool _OnDecode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override;
    virtual bool _OnDecode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override;

    virtual void _AttachPb(void *pb) override;

private:

    ::CRYSTAL_NET::service::LibraryInfo *_ormRawPbData;

    std::vector<KERNEL_NS::SmartPtr<LibararyManagerInfoOrmData, KERNEL_NS::AutoDelMethods::CustomDelete>> _managerinfolist;

    std::vector<KERNEL_NS::SmartPtr<MemberInfoOrmData, KERNEL_NS::AutoDelMethods::CustomDelete>> _memberlist;

    std::vector<KERNEL_NS::SmartPtr<BookInfoOrmData, KERNEL_NS::AutoDelMethods::CustomDelete>> _booklist;

};

class LibraryInfoOrmDataFactory : public IOrmDataFactory
{
    POOL_CREATE_OBJ_DEFAULT_P1(IOrmDataFactory, LibraryInfoOrmDataFactory);
public:
    LibraryInfoOrmDataFactory(){}
    ~LibraryInfoOrmDataFactory(){}

    virtual void Release() override { LibraryInfoOrmDataFactory::DeleteThreadLocal_LibraryInfoOrmDataFactory(this);}

    virtual IOrmData *Create() const override;
    virtual Int64 GetOrmId() const override { return 5; }
};

SERVICE_COMMON_END
#endif // __PROTOCOLS_ORM_OUT_LIBRARYINFOORMDATA_H__