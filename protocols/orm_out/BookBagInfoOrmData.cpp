/*!
*  MIT License
*  
*  Copyright (c) 2020 ericyonng<120453674@qq.com>
*  
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the "Software"), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*  
*  The above copyright notice and this permission notice shall be included in all
*  copies or substantial portions of the Software.
*  
*  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
*  SOFTWARE.
* 
* Author: Eric Yonng
* Description: Generated By protogentool, Dont Modify This File!!!
*/


#include "pch.h"
#include <protocols/cplusplus/library/com_bookbag.pb.h>
#include <protocols/orm_out/BookBagInfoOrmData.h>
#include <protocols/orm_out/BookInfoItemOrmData.h>
#include <protocols/cplusplus/library/com_bookbag.pb.h>

SERVICE_COMMON_BEGIN

POOL_CREATE_OBJ_DEFAULT_IMPL(BookBagInfoOrmData);

BookBagInfoOrmData::BookBagInfoOrmData()
:_ormRawPbData(new ::CRYSTAL_NET::service::BookBagInfo)
{
}

BookBagInfoOrmData::BookBagInfoOrmData(::CRYSTAL_NET::service::BookBagInfo *pb)
:_ormRawPbData(NULL)
{
    AttachPb(pb);
}

BookBagInfoOrmData::BookBagInfoOrmData(const BookBagInfoOrmData &other)
:IOrmData(reinterpret_cast<const IOrmData &>(other))
,_ormRawPbData(other._ormRawPbData ? new ::CRYSTAL_NET::service::BookBagInfo(*other._ormRawPbData) : NULL)
{
    {
        auto arr = _ormRawPbData->mutable_bookinfoitemlist();
        const auto count = _ormRawPbData->bookinfoitemlist_size();

        _bookinfoitemlist.resize(count);

        for(Int32 idx = 0; idx < count; ++idx)
        {
        _bookinfoitemlist[idx] = SERVICE_COMMON_NS::BookInfoItemOrmData::NewThreadLocal_BookInfoItemOrmData(_ormRawPbData->mutable_bookinfoitemlist(idx));

        _bookinfoitemlist[idx].SetClosureDelegate([](void *ptr){
            SERVICE_COMMON_NS::BookInfoItemOrmData::DeleteThreadLocal_BookInfoItemOrmData(KERNEL_NS::KernelCastTo<SERVICE_COMMON_NS::BookInfoItemOrmData>(ptr));
        }) ;

        _bookinfoitemlist[idx]->SetMaskDirtyCallback([this](IOrmData *ptr){
            _MaskDirty(true);
        }) ;

        }
    }


}

BookBagInfoOrmData::BookBagInfoOrmData(BookBagInfoOrmData &&other)
:IOrmData(std::forward<IOrmData>(other))
,_ormRawPbData(other._ormRawPbData)
{
    other._ormRawPbData = NULL;
    _bookinfoitemlist = std::move(other._bookinfoitemlist);

}

BookBagInfoOrmData::BookBagInfoOrmData(const ::CRYSTAL_NET::service::BookBagInfo &pb)
:_ormRawPbData(new ::CRYSTAL_NET::service::BookBagInfo(pb))
{
    {
        auto arr = _ormRawPbData->mutable_bookinfoitemlist();
        const auto count = _ormRawPbData->bookinfoitemlist_size();

        _bookinfoitemlist.resize(count);

        for(Int32 idx = 0; idx < count; ++idx)
        {
        _bookinfoitemlist[idx] = SERVICE_COMMON_NS::BookInfoItemOrmData::NewThreadLocal_BookInfoItemOrmData(_ormRawPbData->mutable_bookinfoitemlist(idx));

        _bookinfoitemlist[idx].SetClosureDelegate([](void *ptr){
            SERVICE_COMMON_NS::BookInfoItemOrmData::DeleteThreadLocal_BookInfoItemOrmData(KERNEL_NS::KernelCastTo<SERVICE_COMMON_NS::BookInfoItemOrmData>(ptr));
        }) ;

        _bookinfoitemlist[idx]->SetMaskDirtyCallback([this](IOrmData *ptr){
            _MaskDirty(true);
        }) ;

        }
    }



}

BookBagInfoOrmData::~BookBagInfoOrmData()
{
    if(LIKELY(!IsAttachPb()))
        CRYSTAL_RELEASE_SAFE(_ormRawPbData);
}

void BookBagInfoOrmData::Release()
{
    BookBagInfoOrmData::DeleteThreadLocal_BookBagInfoOrmData(this);
}

BookBagInfoOrmData &BookBagInfoOrmData::operator =(const ::CRYSTAL_NET::service::BookBagInfo &pb)
{
    CRYSTAL_RELEASE_SAFE(_ormRawPbData);
    _ormRawPbData = new ::CRYSTAL_NET::service::BookBagInfo(pb);
    {
        auto arr = _ormRawPbData->mutable_bookinfoitemlist();
        const auto count = _ormRawPbData->bookinfoitemlist_size();

        _bookinfoitemlist.resize(count);

        for(Int32 idx = 0; idx < count; ++idx)
        {
        _bookinfoitemlist[idx] = SERVICE_COMMON_NS::BookInfoItemOrmData::NewThreadLocal_BookInfoItemOrmData(_ormRawPbData->mutable_bookinfoitemlist(idx));

        _bookinfoitemlist[idx].SetClosureDelegate([](void *ptr){
            SERVICE_COMMON_NS::BookInfoItemOrmData::DeleteThreadLocal_BookInfoItemOrmData(KERNEL_NS::KernelCastTo<SERVICE_COMMON_NS::BookInfoItemOrmData>(ptr));
        }) ;

        _bookinfoitemlist[idx]->SetMaskDirtyCallback([this](IOrmData *ptr){
            _MaskDirty(true);
        }) ;

        }
    }


    _MaskDirty(true);
    return *this;
}

BookBagInfoOrmData &BookBagInfoOrmData::operator =(const BookBagInfoOrmData &other)
{
    if(this == &other)
        return *this;

    IOrmData::operator =(reinterpret_cast<const IOrmData &>(other));
    CRYSTAL_RELEASE_SAFE(_ormRawPbData);
    if(other._ormRawPbData)
        _ormRawPbData = new ::CRYSTAL_NET::service::BookBagInfo(*other._ormRawPbData);
    if(_ormRawPbData)
    {
            {
                auto arr = _ormRawPbData->mutable_bookinfoitemlist();
                const auto count = _ormRawPbData->bookinfoitemlist_size();
        
                _bookinfoitemlist.resize(count);
        
                for(Int32 idx = 0; idx < count; ++idx)
                {
                _bookinfoitemlist[idx] = SERVICE_COMMON_NS::BookInfoItemOrmData::NewThreadLocal_BookInfoItemOrmData(_ormRawPbData->mutable_bookinfoitemlist(idx));
        
                _bookinfoitemlist[idx].SetClosureDelegate([](void *ptr){
                    SERVICE_COMMON_NS::BookInfoItemOrmData::DeleteThreadLocal_BookInfoItemOrmData(KERNEL_NS::KernelCastTo<SERVICE_COMMON_NS::BookInfoItemOrmData>(ptr));
                }) ;
        
                _bookinfoitemlist[idx]->SetMaskDirtyCallback([this](IOrmData *ptr){
                    _MaskDirty(true);
                }) ;
        
                }
            }
        
        
    }
    _MaskDirty(true);

    return *this;
}

BookBagInfoOrmData &BookBagInfoOrmData::operator =(BookBagInfoOrmData &&other)
{
    if(this == &other)
        return *this;

    IOrmData::operator =(std::forward<IOrmData>(other));
    _ormRawPbData = other._ormRawPbData;
    other._ormRawPbData = NULL;

    _bookinfoitemlist = std::move(other._bookinfoitemlist);


    return *this;
}

void BookBagInfoOrmData::Clear()
{
    _bookinfoitemlist.clear();


    if(_ormRawPbData)
        _ormRawPbData->Clear();

    _MaskDirty(true);
}

void BookBagInfoOrmData::_AttachPb(void *pb)
{
    if(LIKELY(!IsAttachPb()))
        CRYSTAL_RELEASE_SAFE(_ormRawPbData);

    _ormRawPbData = reinterpret_cast<::CRYSTAL_NET::service::BookBagInfo *>(pb);

    {
        auto arr = _ormRawPbData->mutable_bookinfoitemlist();
        const auto count = _ormRawPbData->bookinfoitemlist_size();

        _bookinfoitemlist.resize(count);

        for(Int32 idx = 0; idx < count; ++idx)
        {
        _bookinfoitemlist[idx] = SERVICE_COMMON_NS::BookInfoItemOrmData::NewThreadLocal_BookInfoItemOrmData(_ormRawPbData->mutable_bookinfoitemlist(idx));

        _bookinfoitemlist[idx].SetClosureDelegate([](void *ptr){
            SERVICE_COMMON_NS::BookInfoItemOrmData::DeleteThreadLocal_BookInfoItemOrmData(KERNEL_NS::KernelCastTo<SERVICE_COMMON_NS::BookInfoItemOrmData>(ptr));
        }) ;

        _bookinfoitemlist[idx]->SetMaskDirtyCallback([this](IOrmData *ptr){
            _MaskDirty(true);
        }) ;

        }
    }



}

KERNEL_NS::LibString BookBagInfoOrmData::ToJsonString() const
{
    return _ormRawPbData->ToJsonString();
}

bool BookBagInfoOrmData::ToJsonString(std::string *data) const
{
    return _ormRawPbData->ToJsonString(data);
}

bool BookBagInfoOrmData::FromJsonString(const Byte8 *data, size_t len)
{
    const auto ret = _ormRawPbData->FromJsonString(data, len);
    if(ret)
    {
        {
            auto arr = _ormRawPbData->mutable_bookinfoitemlist();
            const auto count = _ormRawPbData->bookinfoitemlist_size();
    
            _bookinfoitemlist.resize(count);
    
            for(Int32 idx = 0; idx < count; ++idx)
            {
            _bookinfoitemlist[idx] = SERVICE_COMMON_NS::BookInfoItemOrmData::NewThreadLocal_BookInfoItemOrmData(_ormRawPbData->mutable_bookinfoitemlist(idx));
    
            _bookinfoitemlist[idx].SetClosureDelegate([](void *ptr){
                SERVICE_COMMON_NS::BookInfoItemOrmData::DeleteThreadLocal_BookInfoItemOrmData(KERNEL_NS::KernelCastTo<SERVICE_COMMON_NS::BookInfoItemOrmData>(ptr));
            }) ;
    
            _bookinfoitemlist[idx]->SetMaskDirtyCallback([this](IOrmData *ptr){
                _MaskDirty(true);
            }) ;
    
            }
        }
    
    
    }

    return ret;
}

const ::CRYSTAL_NET::service::BookBagInfo *BookBagInfoOrmData::GetPbRawData() const
{
    return _ormRawPbData;
}

Int32 BookBagInfoOrmData::bookinfoitemlist_size() const
{
    return _ormRawPbData->bookinfoitemlist_size();
}

KERNEL_NS::SmartPtr<BookInfoItemOrmData, KERNEL_NS::AutoDelMethods::CustomDelete> &BookBagInfoOrmData::mutable_bookinfoitemlist(Int32 idx)
{
    return _bookinfoitemlist[idx];
}

void BookBagInfoOrmData::DeleteArray_bookinfoitemlist(Int32 idx, Int32 count)
{
    for(Int32 pos = idx + count - 1; pos >= idx; --pos)
    {
        _bookinfoitemlist.erase(_bookinfoitemlist.begin() + pos);
    }

    _ormRawPbData->mutable_bookinfoitemlist()->DeleteSubrange(idx, count);
    _MaskDirty(true);
}

const std::vector<KERNEL_NS::SmartPtr<BookInfoItemOrmData, KERNEL_NS::AutoDelMethods::CustomDelete>> &BookBagInfoOrmData::bookinfoitemlist_OrmDataArray() const
{
    return _bookinfoitemlist;
}

const ::google::protobuf::RepeatedPtrField<::CRYSTAL_NET::service::BookInfoItem> &BookBagInfoOrmData::bookinfoitemlist() const
{
    return _ormRawPbData->bookinfoitemlist();
}

const KERNEL_NS::SmartPtr<BookInfoItemOrmData, KERNEL_NS::AutoDelMethods::CustomDelete> &BookBagInfoOrmData::bookinfoitemlist_OrmDataArray(Int32 idx) const
{
    return _bookinfoitemlist[idx];
}

const ::CRYSTAL_NET::service::BookInfoItem &BookBagInfoOrmData::bookinfoitemlist(Int32 idx) const
{
    return _ormRawPbData->bookinfoitemlist(idx);
}

KERNEL_NS::SmartPtr<BookInfoItemOrmData, KERNEL_NS::AutoDelMethods::CustomDelete> &BookBagInfoOrmData::add_bookinfoitemlist()
{
    auto newPb = _ormRawPbData->add_bookinfoitemlist();
    _bookinfoitemlist.push_back(KERNEL_NS::SmartPtr<BookInfoItemOrmData, KERNEL_NS::AutoDelMethods::CustomDelete>());
    auto &elem = _bookinfoitemlist.back();
        elem = SERVICE_COMMON_NS::BookInfoItemOrmData::NewThreadLocal_BookInfoItemOrmData(newPb);

        elem.SetClosureDelegate([](void *ptr){
            SERVICE_COMMON_NS::BookInfoItemOrmData::DeleteThreadLocal_BookInfoItemOrmData(KERNEL_NS::KernelCastTo<SERVICE_COMMON_NS::BookInfoItemOrmData>(ptr));
        }) ;

        elem->SetMaskDirtyCallback([this](IOrmData *ptr){
            _MaskDirty(true);
        }) ;

    _MaskDirty(true);
    return elem;
}

void BookBagInfoOrmData::clear_bookinfoitemlist()
{
    _ormRawPbData->clear_bookinfoitemlist();
    _bookinfoitemlist.clear();
    _MaskDirty(true);
}

bool BookBagInfoOrmData::_OnEncode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) const
{
    return _ormRawPbData->Encode(stream);
}

bool BookBagInfoOrmData::_OnEncode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) const
{
    return _ormRawPbData->Encode(stream);
}

bool BookBagInfoOrmData::_OnDecode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream)
{
    const auto ret = _ormRawPbData->Decode(stream);
    if(ret)
    {
        {
            auto arr = _ormRawPbData->mutable_bookinfoitemlist();
            const auto count = _ormRawPbData->bookinfoitemlist_size();
    
            _bookinfoitemlist.resize(count);
    
            for(Int32 idx = 0; idx < count; ++idx)
            {
            _bookinfoitemlist[idx] = SERVICE_COMMON_NS::BookInfoItemOrmData::NewThreadLocal_BookInfoItemOrmData(_ormRawPbData->mutable_bookinfoitemlist(idx));
    
            _bookinfoitemlist[idx].SetClosureDelegate([](void *ptr){
                SERVICE_COMMON_NS::BookInfoItemOrmData::DeleteThreadLocal_BookInfoItemOrmData(KERNEL_NS::KernelCastTo<SERVICE_COMMON_NS::BookInfoItemOrmData>(ptr));
            }) ;
    
            _bookinfoitemlist[idx]->SetMaskDirtyCallback([this](IOrmData *ptr){
                _MaskDirty(true);
            }) ;
    
            }
        }
    
    
    }

    return ret;
}

bool BookBagInfoOrmData::_OnDecode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream)
{
    const auto ret = _ormRawPbData->Decode(stream);
    if(ret)
    {
        {
            auto arr = _ormRawPbData->mutable_bookinfoitemlist();
            const auto count = _ormRawPbData->bookinfoitemlist_size();
    
            _bookinfoitemlist.resize(count);
    
            for(Int32 idx = 0; idx < count; ++idx)
            {
            _bookinfoitemlist[idx] = SERVICE_COMMON_NS::BookInfoItemOrmData::NewThreadLocal_BookInfoItemOrmData(_ormRawPbData->mutable_bookinfoitemlist(idx));
    
            _bookinfoitemlist[idx].SetClosureDelegate([](void *ptr){
                SERVICE_COMMON_NS::BookInfoItemOrmData::DeleteThreadLocal_BookInfoItemOrmData(KERNEL_NS::KernelCastTo<SERVICE_COMMON_NS::BookInfoItemOrmData>(ptr));
            }) ;
    
            _bookinfoitemlist[idx]->SetMaskDirtyCallback([this](IOrmData *ptr){
                _MaskDirty(true);
            }) ;
    
            }
        }
    
    
    }

    return ret;
}

POOL_CREATE_OBJ_DEFAULT_IMPL(BookBagInfoOrmDataFactory);

IOrmData *BookBagInfoOrmDataFactory::Create() const
{
    return BookBagInfoOrmData::NewThreadLocal_BookBagInfoOrmData();
}


SERVICE_COMMON_END
