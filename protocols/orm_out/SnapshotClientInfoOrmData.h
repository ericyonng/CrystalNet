/*!
*  MIT License
*  
*  Copyright (c) 2020 ericyonng<120453674@qq.com>
*  
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the "Software"), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*  
*  The above copyright notice and this permission notice shall be included in all
*  copies or substantial portions of the Software.
*  
*  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
*  SOFTWARE.
* 
* Author: Eric Yonng
* Description: Generated By protogentool, Dont Modify This File!!!
*/


#ifndef __PROTOCOLS_ORM_OUT_SNAPSHOTCLIENTINFOORMDATA_H__
#define __PROTOCOLS_ORM_OUT_SNAPSHOTCLIENTINFOORMDATA_H__

#pragma once
#include <kernel/kernel.h>
#include <service_common/protocol/ORM/IOrmData.h>

#include <string>


namespace CRYSTAL_NET {
namespace service {

class SnapshotClientInfo;

}
}

namespace google {
    namespace protobuf {

    }
}

SERVICE_COMMON_BEGIN


SERVICE_COMMON_END

SERVICE_COMMON_BEGIN

class SnapshotClientInfoOrmData : public SERVICE_COMMON_NS::IOrmData
{
    POOL_CREATE_OBJ_DEFAULT_P1(IOrmData, SnapshotClientInfoOrmData)

public:
    SnapshotClientInfoOrmData();
    SnapshotClientInfoOrmData(::CRYSTAL_NET::service::SnapshotClientInfo *pb);
    SnapshotClientInfoOrmData(const SnapshotClientInfoOrmData &other);
    SnapshotClientInfoOrmData(SnapshotClientInfoOrmData &&other);
    SnapshotClientInfoOrmData(const ::CRYSTAL_NET::service::SnapshotClientInfo &pb);
    ~SnapshotClientInfoOrmData();

    virtual void Release() override;

    SnapshotClientInfoOrmData &operator =(const ::CRYSTAL_NET::service::SnapshotClientInfo &pb);

    SnapshotClientInfoOrmData &operator =(const SnapshotClientInfoOrmData &other);

    SnapshotClientInfoOrmData &operator =(SnapshotClientInfoOrmData &&other);

    virtual KERNEL_NS::LibString ToJsonString() const override;

    virtual bool ToJsonString(std::string *data) const override;

    virtual bool FromJsonString(const Byte8 *data, size_t len) override;

    virtual Int64 GetOrmId() const override{ return 15; }

    void Clear();
    const ::CRYSTAL_NET::service::SnapshotClientInfo *GetPbRawData() const;

    void clear_id();

    int64_t id() const;

    void set_id(int64_t value);

    void clear_filepath();

    const std::string &filepath() const;

    void set_filepath(const std::string &value);

    std::string *mutable_filepath();


protected:

    virtual bool _OnEncode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) const override;
    virtual bool _OnEncode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) const override;

    virtual bool _OnDecode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override;
    virtual bool _OnDecode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override;

    virtual void _AttachPb(void *pb) override;

private:

    ::CRYSTAL_NET::service::SnapshotClientInfo *_ormRawPbData;

};

class SnapshotClientInfoOrmDataFactory : public IOrmDataFactory
{
    POOL_CREATE_OBJ_DEFAULT_P1(IOrmDataFactory, SnapshotClientInfoOrmDataFactory);
public:
    SnapshotClientInfoOrmDataFactory(){}
    ~SnapshotClientInfoOrmDataFactory(){}

    virtual void Release() override { SnapshotClientInfoOrmDataFactory::DeleteThreadLocal_SnapshotClientInfoOrmDataFactory(this);}

    virtual IOrmData *Create() const override;
    virtual Int64 GetOrmId() const override { return 15; }
};

SERVICE_COMMON_END
#endif // __PROTOCOLS_ORM_OUT_SNAPSHOTCLIENTINFOORMDATA_H__