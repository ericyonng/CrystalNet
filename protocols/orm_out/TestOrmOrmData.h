/*!
*  MIT License
*  
*  Copyright (c) 2020 ericyonng<120453674@qq.com>
*  
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the "Software"), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*  
*  The above copyright notice and this permission notice shall be included in all
*  copies or substantial portions of the Software.
*  
*  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
*  SOFTWARE.
* 
* Author: Eric Yonng
* Description: Generated By protogentool, Dont Modify This File!!!
*/


#ifndef __PROTOCOLS_ORM_OUT_TESTORMORMDATA_H__
#define __PROTOCOLS_ORM_OUT_TESTORMORMDATA_H__

#pragma once
#include <kernel/kernel.h>
#include <service_common/protocol/ORM/IOrmData.h>

#include <string>
#include <vector>


namespace CRYSTAL_NET {
namespace service {

class TestOrm;
class TestCustomData;

}
}

namespace google {
    namespace protobuf {
template <typename Element>
class RepeatedField;

template <typename Element>
class RepeatedPtrField;


    }
}

SERVICE_COMMON_BEGIN

class TestCustomDataOrmData;

SERVICE_COMMON_END

SERVICE_COMMON_BEGIN

class TestOrmOrmData : public SERVICE_COMMON_NS::IOrmData
{
    POOL_CREATE_OBJ_DEFAULT_P1(IOrmData, TestOrmOrmData)

public:
    TestOrmOrmData();
    TestOrmOrmData(::CRYSTAL_NET::service::TestOrm *pb);
    TestOrmOrmData(const TestOrmOrmData &other);
    TestOrmOrmData(TestOrmOrmData &&other);
    TestOrmOrmData(const ::CRYSTAL_NET::service::TestOrm &pb);
    ~TestOrmOrmData();

    virtual void Release() override;

    TestOrmOrmData &operator =(const ::CRYSTAL_NET::service::TestOrm &pb);

    TestOrmOrmData &operator =(const TestOrmOrmData &other);

    TestOrmOrmData &operator =(TestOrmOrmData &&other);

    virtual KERNEL_NS::LibString ToJsonString() const override;

    virtual bool ToJsonString(std::string *data) const override;

    virtual bool FromJsonString(const Byte8 *data, size_t len) override;

    virtual Int64 GetOrmId() const override{ return 4; }

    void Clear();
    const ::CRYSTAL_NET::service::TestOrm *GetPbRawData() const;

    void clear_testint();

    int32_t testint() const;

    void set_testint(int32_t value);

    void clear_teststring();

    const std::string &teststring() const;

    void set_teststring(const std::string &value);

    std::string *mutable_teststring();

    Int32 testintarray_size() const;

    void clear_testintarray();

    int32_t testintarray(Int32 idx) const;

    void set_testintarray(Int32 idx, int32_t value);

    void add_testintarray(int32_t value);

    void DeleteArray_testintarray(Int32 idx, Int32 count = 1);

    const ::google::protobuf::RepeatedField<int32_t> &testintarray() const;

    Int32 teststringarray_size() const;

    void clear_teststringarray();

    const std::string &teststringarray(Int32 idx) const;

    std::string *mutable_teststringarray(Int32 idx);

    void set_teststringarray(Int32 idx, const std::string &value);

    void set_teststringarray(Int32 idx, std::string &&value);

    void set_teststringarray(Int32 idx, const Byte8 *value);

    void set_teststringarray(Int32 idx, const Byte8 *value, size_t sz);

    std::string *add_teststringarray();

    void add_teststringarray(const std::string &value);

    void add_teststringarray(std::string &&value);

    void add_teststringarray(const Byte8 *value);

    void add_teststringarray(const Byte8 *value, size_t sz);

    void DeleteArray_teststringarray(Int32 idx, Int32 count = 1);

    const ::google::protobuf::RepeatedPtrField<std::string> &teststringarray() const;

    KERNEL_NS::SmartPtr<TestCustomDataOrmData, KERNEL_NS::AutoDelMethods::CustomDelete> &mutable_testcustom();

    const ::CRYSTAL_NET::service::TestCustomData &testcustom() const;

    const KERNEL_NS::SmartPtr<TestCustomDataOrmData, KERNEL_NS::AutoDelMethods::CustomDelete> &testcustom_OrmData() const;

    bool has_testcustom() const;

    void clear_testcustom();

    Int32 testcustomarray_size() const;

    KERNEL_NS::SmartPtr<TestCustomDataOrmData, KERNEL_NS::AutoDelMethods::CustomDelete> &mutable_testcustomarray(Int32 idx);

    void DeleteArray_testcustomarray(Int32 idx, Int32 count = 1);

    const std::vector<KERNEL_NS::SmartPtr<TestCustomDataOrmData, KERNEL_NS::AutoDelMethods::CustomDelete>> &testcustomarray_OrmDataArray() const;

    const ::google::protobuf::RepeatedPtrField<::CRYSTAL_NET::service::TestCustomData> &testcustomarray() const;

    const KERNEL_NS::SmartPtr<TestCustomDataOrmData, KERNEL_NS::AutoDelMethods::CustomDelete> &testcustomarray_OrmDataArray(Int32 idx) const;

    const ::CRYSTAL_NET::service::TestCustomData &testcustomarray(Int32 idx) const;

    KERNEL_NS::SmartPtr<TestCustomDataOrmData, KERNEL_NS::AutoDelMethods::CustomDelete> &add_testcustomarray();

    void clear_testcustomarray();

    bool has_testoneofint() const;

    void clear_testoneofint();

    int32_t testoneofint() const;

    void set_testoneofint(int32_t value);

    bool has_testoneofstring() const;

    void clear_testoneofstring();

    const std::string &testoneofstring() const;

    void set_testoneofstring(const std::string &value);

    std::string *mutable_testoneofstring();

    KERNEL_NS::SmartPtr<TestCustomDataOrmData, KERNEL_NS::AutoDelMethods::CustomDelete> &mutable_testoneofcustom();

    const ::CRYSTAL_NET::service::TestCustomData &testoneofcustom() const;

    const KERNEL_NS::SmartPtr<TestCustomDataOrmData, KERNEL_NS::AutoDelMethods::CustomDelete> &testoneofcustom_OrmData() const;

    bool has_testoneofcustom() const;

    void clear_testoneofcustom();


protected:

    virtual bool _OnEncode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) const override;
    virtual bool _OnEncode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) const override;

    virtual bool _OnDecode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override;
    virtual bool _OnDecode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override;

    virtual void _AttachPb(void *pb) override;

private:

    ::CRYSTAL_NET::service::TestOrm *_ormRawPbData;

    KERNEL_NS::SmartPtr<TestCustomDataOrmData, KERNEL_NS::AutoDelMethods::CustomDelete> _testcustom;

    std::vector<KERNEL_NS::SmartPtr<TestCustomDataOrmData, KERNEL_NS::AutoDelMethods::CustomDelete>> _testcustomarray;

    KERNEL_NS::SmartPtr<TestCustomDataOrmData, KERNEL_NS::AutoDelMethods::CustomDelete> _testoneofcustom;

};

class TestOrmOrmDataFactory : public IOrmDataFactory
{
    POOL_CREATE_OBJ_DEFAULT_P1(IOrmDataFactory, TestOrmOrmDataFactory);
public:
    TestOrmOrmDataFactory(){}
    ~TestOrmOrmDataFactory(){}

    virtual void Release() override { TestOrmOrmDataFactory::DeleteThreadLocal_TestOrmOrmDataFactory(this);}

    virtual IOrmData *Create() const override;
    virtual Int64 GetOrmId() const override { return 4; }
};

SERVICE_COMMON_END
#endif // __PROTOCOLS_ORM_OUT_TESTORMORMDATA_H__