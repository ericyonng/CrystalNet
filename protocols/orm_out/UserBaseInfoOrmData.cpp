/*!
*  MIT License
*  
*  Copyright (c) 2020 ericyonng<120453674@qq.com>
*  
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the "Software"), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*  
*  The above copyright notice and this permission notice shall be included in all
*  copies or substantial portions of the Software.
*  
*  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
*  SOFTWARE.
* 
* Author: Eric Yonng
* Description: Generated By protogentool, Dont Modify This File!!!
*/


#include "pch.h"
#include <protocols/cplusplus/com_user.pb.h>
#include <protocols/orm_out/UserBaseInfoOrmData.h>

SERVICE_COMMON_BEGIN

POOL_CREATE_OBJ_DEFAULT_IMPL(UserBaseInfoOrmData);

UserBaseInfoOrmData::UserBaseInfoOrmData()
:_ormRawPbData(new ::CRYSTAL_NET::service::UserBaseInfo)
{
}

UserBaseInfoOrmData::UserBaseInfoOrmData(::CRYSTAL_NET::service::UserBaseInfo *pb)
:_ormRawPbData(NULL)
{
    AttachPb(pb);
}

UserBaseInfoOrmData::UserBaseInfoOrmData(const UserBaseInfoOrmData &other)
:IOrmData(reinterpret_cast<const IOrmData &>(other))
,_ormRawPbData(other._ormRawPbData ? new ::CRYSTAL_NET::service::UserBaseInfo(*other._ormRawPbData) : NULL)
{
    SetAttachPbFlag(false);
}

UserBaseInfoOrmData::UserBaseInfoOrmData(UserBaseInfoOrmData &&other)
:IOrmData(std::forward<IOrmData>(other))
,_ormRawPbData(other._ormRawPbData)
{
    other._ormRawPbData = NULL;
}

UserBaseInfoOrmData::UserBaseInfoOrmData(const ::CRYSTAL_NET::service::UserBaseInfo &pb)
:_ormRawPbData(new ::CRYSTAL_NET::service::UserBaseInfo(pb))
{

}

UserBaseInfoOrmData::~UserBaseInfoOrmData()
{
    if(LIKELY(!IsAttachPb()))
        CRYSTAL_RELEASE_SAFE(_ormRawPbData);
}

void UserBaseInfoOrmData::Release()
{
    UserBaseInfoOrmData::DeleteThreadLocal_UserBaseInfoOrmData(this);
}

UserBaseInfoOrmData &UserBaseInfoOrmData::operator =(const ::CRYSTAL_NET::service::UserBaseInfo &pb)
{
    if(LIKELY(!IsAttachPb()))
        CRYSTAL_RELEASE_SAFE(_ormRawPbData);

    SetAttachPbFlag(false);
    _ormRawPbData = new ::CRYSTAL_NET::service::UserBaseInfo(pb);
    _MaskDirty(true);
    return *this;
}

UserBaseInfoOrmData &UserBaseInfoOrmData::operator =(const UserBaseInfoOrmData &other)
{
    if(this == &other)
        return *this;

    IOrmData::operator =(reinterpret_cast<const IOrmData &>(other));
    if(LIKELY(!IsAttachPb()))
        CRYSTAL_RELEASE_SAFE(_ormRawPbData);

    _ormRawPbData = NULL;
    SetAttachPbFlag(false);
    if(other._ormRawPbData)
        _ormRawPbData = new ::CRYSTAL_NET::service::UserBaseInfo(*other._ormRawPbData);
    _MaskDirty(true);

    return *this;
}

UserBaseInfoOrmData &UserBaseInfoOrmData::operator =(UserBaseInfoOrmData &&other)
{
    if(this == &other)
        return *this;

    IOrmData::operator =(std::forward<IOrmData>(other));
    _ormRawPbData = other._ormRawPbData;
    other._ormRawPbData = NULL;


    return *this;
}

void UserBaseInfoOrmData::Clear()
{

    if(_ormRawPbData)
        _ormRawPbData->Clear();

    _MaskDirty(true);
}

void UserBaseInfoOrmData::_AttachPb(void *pb)
{
    if(LIKELY(!IsAttachPb()))
        CRYSTAL_RELEASE_SAFE(_ormRawPbData);

    _ormRawPbData = reinterpret_cast<::CRYSTAL_NET::service::UserBaseInfo *>(pb);


}

KERNEL_NS::LibString UserBaseInfoOrmData::ToJsonString() const
{
    return _ormRawPbData->ToJsonString();
}

bool UserBaseInfoOrmData::ToJsonString(std::string *data) const
{
    return _ormRawPbData->ToJsonString(data);
}

bool UserBaseInfoOrmData::FromJsonString(const Byte8 *data, size_t len)
{
    return _ormRawPbData->FromJsonString(data, len);
}

const ::CRYSTAL_NET::service::UserBaseInfo *UserBaseInfoOrmData::GetPbRawData() const
{
    return _ormRawPbData;
}

void UserBaseInfoOrmData::clear_userid()
{
    _ormRawPbData->clear_userid();
    _MaskDirty(true);
}

uint64_t UserBaseInfoOrmData::userid() const
{
    return _ormRawPbData->userid();
}

void UserBaseInfoOrmData::set_userid(uint64_t value)
{
    _ormRawPbData->set_userid(value);
    _MaskDirty(true);
}

void UserBaseInfoOrmData::clear_accountname()
{
    _ormRawPbData->clear_accountname();
    _MaskDirty(true);
}

const std::string &UserBaseInfoOrmData::accountname() const
{
    return _ormRawPbData->accountname();
}

void UserBaseInfoOrmData::set_accountname(const std::string &value)
{
    _ormRawPbData->set_accountname(value);
    _MaskDirty(true);
}

std::string *UserBaseInfoOrmData::mutable_accountname()
{
    _MaskDirty(true);
    return _ormRawPbData->mutable_accountname();
}

void UserBaseInfoOrmData::clear_name()
{
    _ormRawPbData->clear_name();
    _MaskDirty(true);
}

const std::string &UserBaseInfoOrmData::name() const
{
    return _ormRawPbData->name();
}

void UserBaseInfoOrmData::set_name(const std::string &value)
{
    _ormRawPbData->set_name(value);
    _MaskDirty(true);
}

std::string *UserBaseInfoOrmData::mutable_name()
{
    _MaskDirty(true);
    return _ormRawPbData->mutable_name();
}

void UserBaseInfoOrmData::clear_nickname()
{
    _ormRawPbData->clear_nickname();
    _MaskDirty(true);
}

const std::string &UserBaseInfoOrmData::nickname() const
{
    return _ormRawPbData->nickname();
}

void UserBaseInfoOrmData::set_nickname(const std::string &value)
{
    _ormRawPbData->set_nickname(value);
    _MaskDirty(true);
}

std::string *UserBaseInfoOrmData::mutable_nickname()
{
    _MaskDirty(true);
    return _ormRawPbData->mutable_nickname();
}

void UserBaseInfoOrmData::clear_pwd()
{
    _ormRawPbData->clear_pwd();
    _MaskDirty(true);
}

const std::string &UserBaseInfoOrmData::pwd() const
{
    return _ormRawPbData->pwd();
}

void UserBaseInfoOrmData::set_pwd(const std::string &value)
{
    _ormRawPbData->set_pwd(value);
    _MaskDirty(true);
}

std::string *UserBaseInfoOrmData::mutable_pwd()
{
    _MaskDirty(true);
    return _ormRawPbData->mutable_pwd();
}

void UserBaseInfoOrmData::clear_pwdsalt()
{
    _ormRawPbData->clear_pwdsalt();
    _MaskDirty(true);
}

const std::string &UserBaseInfoOrmData::pwdsalt() const
{
    return _ormRawPbData->pwdsalt();
}

void UserBaseInfoOrmData::set_pwdsalt(const std::string &value)
{
    _ormRawPbData->set_pwdsalt(value);
    _MaskDirty(true);
}

std::string *UserBaseInfoOrmData::mutable_pwdsalt()
{
    _MaskDirty(true);
    return _ormRawPbData->mutable_pwdsalt();
}

void UserBaseInfoOrmData::clear_bindphone()
{
    _ormRawPbData->clear_bindphone();
    _MaskDirty(true);
}

uint64_t UserBaseInfoOrmData::bindphone() const
{
    return _ormRawPbData->bindphone();
}

void UserBaseInfoOrmData::set_bindphone(uint64_t value)
{
    _ormRawPbData->set_bindphone(value);
    _MaskDirty(true);
}

void UserBaseInfoOrmData::clear_lastlogintime()
{
    _ormRawPbData->clear_lastlogintime();
    _MaskDirty(true);
}

int64_t UserBaseInfoOrmData::lastlogintime() const
{
    return _ormRawPbData->lastlogintime();
}

void UserBaseInfoOrmData::set_lastlogintime(int64_t value)
{
    _ormRawPbData->set_lastlogintime(value);
    _MaskDirty(true);
}

void UserBaseInfoOrmData::clear_lastloginip()
{
    _ormRawPbData->clear_lastloginip();
    _MaskDirty(true);
}

const std::string &UserBaseInfoOrmData::lastloginip() const
{
    return _ormRawPbData->lastloginip();
}

void UserBaseInfoOrmData::set_lastloginip(const std::string &value)
{
    _ormRawPbData->set_lastloginip(value);
    _MaskDirty(true);
}

std::string *UserBaseInfoOrmData::mutable_lastloginip()
{
    _MaskDirty(true);
    return _ormRawPbData->mutable_lastloginip();
}

void UserBaseInfoOrmData::clear_lastloginphoneimei()
{
    _ormRawPbData->clear_lastloginphoneimei();
    _MaskDirty(true);
}

const std::string &UserBaseInfoOrmData::lastloginphoneimei() const
{
    return _ormRawPbData->lastloginphoneimei();
}

void UserBaseInfoOrmData::set_lastloginphoneimei(const std::string &value)
{
    _ormRawPbData->set_lastloginphoneimei(value);
    _MaskDirty(true);
}

std::string *UserBaseInfoOrmData::mutable_lastloginphoneimei()
{
    _MaskDirty(true);
    return _ormRawPbData->mutable_lastloginphoneimei();
}

void UserBaseInfoOrmData::clear_createip()
{
    _ormRawPbData->clear_createip();
    _MaskDirty(true);
}

const std::string &UserBaseInfoOrmData::createip() const
{
    return _ormRawPbData->createip();
}

void UserBaseInfoOrmData::set_createip(const std::string &value)
{
    _ormRawPbData->set_createip(value);
    _MaskDirty(true);
}

std::string *UserBaseInfoOrmData::mutable_createip()
{
    _MaskDirty(true);
    return _ormRawPbData->mutable_createip();
}

void UserBaseInfoOrmData::clear_createtime()
{
    _ormRawPbData->clear_createtime();
    _MaskDirty(true);
}

int64_t UserBaseInfoOrmData::createtime() const
{
    return _ormRawPbData->createtime();
}

void UserBaseInfoOrmData::set_createtime(int64_t value)
{
    _ormRawPbData->set_createtime(value);
    _MaskDirty(true);
}

void UserBaseInfoOrmData::clear_createphoneimei()
{
    _ormRawPbData->clear_createphoneimei();
    _MaskDirty(true);
}

const std::string &UserBaseInfoOrmData::createphoneimei() const
{
    return _ormRawPbData->createphoneimei();
}

void UserBaseInfoOrmData::set_createphoneimei(const std::string &value)
{
    _ormRawPbData->set_createphoneimei(value);
    _MaskDirty(true);
}

std::string *UserBaseInfoOrmData::mutable_createphoneimei()
{
    _MaskDirty(true);
    return _ormRawPbData->mutable_createphoneimei();
}

void UserBaseInfoOrmData::clear_bindmailaddr()
{
    _ormRawPbData->clear_bindmailaddr();
    _MaskDirty(true);
}

const std::string &UserBaseInfoOrmData::bindmailaddr() const
{
    return _ormRawPbData->bindmailaddr();
}

void UserBaseInfoOrmData::set_bindmailaddr(const std::string &value)
{
    _ormRawPbData->set_bindmailaddr(value);
    _MaskDirty(true);
}

std::string *UserBaseInfoOrmData::mutable_bindmailaddr()
{
    _MaskDirty(true);
    return _ormRawPbData->mutable_bindmailaddr();
}

void UserBaseInfoOrmData::clear_lastpassdaytime()
{
    _ormRawPbData->clear_lastpassdaytime();
    _MaskDirty(true);
}

int64_t UserBaseInfoOrmData::lastpassdaytime() const
{
    return _ormRawPbData->lastpassdaytime();
}

void UserBaseInfoOrmData::set_lastpassdaytime(int64_t value)
{
    _ormRawPbData->set_lastpassdaytime(value);
    _MaskDirty(true);
}

bool UserBaseInfoOrmData::_OnEncode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) const
{
    return _ormRawPbData->Encode(stream);
}

bool UserBaseInfoOrmData::_OnEncode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) const
{
    return _ormRawPbData->Encode(stream);
}

bool UserBaseInfoOrmData::_OnDecode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream)
{
    return _ormRawPbData->Decode(stream);
}

bool UserBaseInfoOrmData::_OnDecode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream)
{
    return _ormRawPbData->Decode(stream);
}

POOL_CREATE_OBJ_DEFAULT_IMPL(UserBaseInfoOrmDataFactory);

IOrmData *UserBaseInfoOrmDataFactory::Create() const
{
    return UserBaseInfoOrmData::NewThreadLocal_UserBaseInfoOrmData();
}


SERVICE_COMMON_END
