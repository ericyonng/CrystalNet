/*!
*  MIT License
*  
*  Copyright (c) 2020 ericyonng<120453674@qq.com>
*  
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the "Software"), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*  
*  The above copyright notice and this permission notice shall be included in all
*  copies or substantial portions of the Software.
*  
*  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
*  SOFTWARE.
* 
* Author: Eric Yonng
* Description: Generated By protogentool, Dont Modify This File!!!
*/


#ifndef __PROTOCOLS_ORM_OUT_MEMBERINFOORMDATA_H__
#define __PROTOCOLS_ORM_OUT_MEMBERINFOORMDATA_H__

#pragma once
#include <kernel/kernel.h>
#include <service_common/protocol/ORM/IOrmData.h>

#include <string>
#include <vector>


namespace CRYSTAL_NET {
namespace service {

class MemberInfo;
class BorrowOrderInfo;

}
}

namespace google {
    namespace protobuf {
template <typename Element>
class RepeatedPtrField;


    }
}

SERVICE_COMMON_BEGIN

class BorrowOrderInfoOrmData;

SERVICE_COMMON_END

SERVICE_COMMON_BEGIN

class MemberInfoOrmData : public SERVICE_COMMON_NS::IOrmData
{
    POOL_CREATE_OBJ_DEFAULT_P1(IOrmData, MemberInfoOrmData)

public:
    MemberInfoOrmData();
    MemberInfoOrmData(::CRYSTAL_NET::service::MemberInfo *pb);
    MemberInfoOrmData(const MemberInfoOrmData &other);
    MemberInfoOrmData(MemberInfoOrmData &&other);
    MemberInfoOrmData(const ::CRYSTAL_NET::service::MemberInfo &pb);
    ~MemberInfoOrmData();

    virtual void Release() override;

    MemberInfoOrmData &operator =(const ::CRYSTAL_NET::service::MemberInfo &pb);

    MemberInfoOrmData &operator =(const MemberInfoOrmData &other);

    MemberInfoOrmData &operator =(MemberInfoOrmData &&other);

    virtual KERNEL_NS::LibString ToJsonString() const override;

    virtual bool ToJsonString(std::string *data) const override;

    virtual bool FromJsonString(const Byte8 *data, size_t len) override;

    virtual Int64 GetOrmId() const override{ return 7; }

    void Clear();
    const ::CRYSTAL_NET::service::MemberInfo *GetPbRawData() const;

    void clear_userid();

    uint64_t userid() const;

    void set_userid(uint64_t value);

    void clear_role();

    int32_t role() const;

    void set_role(int32_t value);

    void clear_nickname();

    const std::string &nickname() const;

    void set_nickname(const std::string &value);

    std::string *mutable_nickname();

    Int32 borrowlist_size() const;

    KERNEL_NS::SmartPtr<BorrowOrderInfoOrmData, KERNEL_NS::AutoDelMethods::CustomDelete> &mutable_borrowlist(Int32 idx);

    void DeleteArray_borrowlist(Int32 idx, Int32 count = 1);

    const std::vector<KERNEL_NS::SmartPtr<BorrowOrderInfoOrmData, KERNEL_NS::AutoDelMethods::CustomDelete>> &borrowlist_OrmDataArray() const;

    const ::google::protobuf::RepeatedPtrField<::CRYSTAL_NET::service::BorrowOrderInfo> &borrowlist() const;

    const KERNEL_NS::SmartPtr<BorrowOrderInfoOrmData, KERNEL_NS::AutoDelMethods::CustomDelete> &borrowlist_OrmDataArray(Int32 idx) const;

    const ::CRYSTAL_NET::service::BorrowOrderInfo &borrowlist(Int32 idx) const;

    KERNEL_NS::SmartPtr<BorrowOrderInfoOrmData, KERNEL_NS::AutoDelMethods::CustomDelete> &add_borrowlist();

    void clear_borrowlist();

    void clear_locktimestampms();

    int64_t locktimestampms() const;

    void set_locktimestampms(int64_t value);

    bool has_bindphone() const;

    void clear_bindphone();

    uint64_t bindphone() const;

    void set_bindphone(uint64_t value);


protected:

    virtual bool _OnEncode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) const override;
    virtual bool _OnEncode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) const override;

    virtual bool _OnDecode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override;
    virtual bool _OnDecode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override;

    virtual void _AttachPb(void *pb) override;

private:

    ::CRYSTAL_NET::service::MemberInfo *_ormRawPbData;

    std::vector<KERNEL_NS::SmartPtr<BorrowOrderInfoOrmData, KERNEL_NS::AutoDelMethods::CustomDelete>> _borrowlist;

};

class MemberInfoOrmDataFactory : public IOrmDataFactory
{
    POOL_CREATE_OBJ_DEFAULT_P1(IOrmDataFactory, MemberInfoOrmDataFactory);
public:
    MemberInfoOrmDataFactory(){}
    ~MemberInfoOrmDataFactory(){}

    virtual void Release() override { MemberInfoOrmDataFactory::DeleteThreadLocal_MemberInfoOrmDataFactory(this);}

    virtual IOrmData *Create() const override;
    virtual Int64 GetOrmId() const override { return 7; }
};

SERVICE_COMMON_END
#endif // __PROTOCOLS_ORM_OUT_MEMBERINFOORMDATA_H__