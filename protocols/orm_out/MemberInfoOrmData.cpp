/*!
*  MIT License
*  
*  Copyright (c) 2020 ericyonng<120453674@qq.com>
*  
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the "Software"), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*  
*  The above copyright notice and this permission notice shall be included in all
*  copies or substantial portions of the Software.
*  
*  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
*  SOFTWARE.
* 
* Author: Eric Yonng
* Description: Generated By protogentool, Dont Modify This File!!!
*/


#include "pch.h"
#include <protocols/cplusplus/library/com_library.pb.h>
#include <protocols/orm_out/MemberInfoOrmData.h>
#include <protocols/orm_out/BorrowOrderInfoOrmData.h>
#include <protocols/cplusplus/library/com_library.pb.h>

SERVICE_COMMON_BEGIN

POOL_CREATE_OBJ_DEFAULT_IMPL(MemberInfoOrmData);

MemberInfoOrmData::MemberInfoOrmData()
:_ormRawPbData(new ::CRYSTAL_NET::service::MemberInfo)
{
}

MemberInfoOrmData::MemberInfoOrmData(::CRYSTAL_NET::service::MemberInfo *pb)
:_ormRawPbData(NULL)
{
    AttachPb(pb);
}

MemberInfoOrmData::MemberInfoOrmData(const MemberInfoOrmData &other)
:IOrmData(reinterpret_cast<const IOrmData &>(other))
,_ormRawPbData(other._ormRawPbData ? new ::CRYSTAL_NET::service::MemberInfo(*other._ormRawPbData) : NULL)
{
    {
        const auto count = _ormRawPbData->borrowlist_size();

        _borrowlist.resize(count);

        for(Int32 idx = 0; idx < count; ++idx)
        {
        _borrowlist[idx] = SERVICE_COMMON_NS::BorrowOrderInfoOrmData::NewThreadLocal_BorrowOrderInfoOrmData(_ormRawPbData->mutable_borrowlist(idx));

        _borrowlist[idx].SetClosureDelegate([](void *ptr){
            SERVICE_COMMON_NS::BorrowOrderInfoOrmData::DeleteThreadLocal_BorrowOrderInfoOrmData(KERNEL_NS::KernelCastTo<SERVICE_COMMON_NS::BorrowOrderInfoOrmData>(ptr));
        }) ;

        _borrowlist[idx]->SetMaskDirtyCallback([this](IOrmData *ptr){
            _MaskDirty(true);
        }) ;

        }
    }


}

MemberInfoOrmData::MemberInfoOrmData(MemberInfoOrmData &&other)
:IOrmData(std::forward<IOrmData>(other))
,_ormRawPbData(other._ormRawPbData)
{
    other._ormRawPbData = NULL;
    _borrowlist = std::move(other._borrowlist);

}

MemberInfoOrmData::MemberInfoOrmData(const ::CRYSTAL_NET::service::MemberInfo &pb)
:_ormRawPbData(new ::CRYSTAL_NET::service::MemberInfo(pb))
{
    {
        const auto count = _ormRawPbData->borrowlist_size();

        _borrowlist.resize(count);

        for(Int32 idx = 0; idx < count; ++idx)
        {
        _borrowlist[idx] = SERVICE_COMMON_NS::BorrowOrderInfoOrmData::NewThreadLocal_BorrowOrderInfoOrmData(_ormRawPbData->mutable_borrowlist(idx));

        _borrowlist[idx].SetClosureDelegate([](void *ptr){
            SERVICE_COMMON_NS::BorrowOrderInfoOrmData::DeleteThreadLocal_BorrowOrderInfoOrmData(KERNEL_NS::KernelCastTo<SERVICE_COMMON_NS::BorrowOrderInfoOrmData>(ptr));
        }) ;

        _borrowlist[idx]->SetMaskDirtyCallback([this](IOrmData *ptr){
            _MaskDirty(true);
        }) ;

        }
    }



}

MemberInfoOrmData::~MemberInfoOrmData()
{
    if(LIKELY(!IsAttachPb()))
        CRYSTAL_RELEASE_SAFE(_ormRawPbData);
}

void MemberInfoOrmData::Release()
{
    MemberInfoOrmData::DeleteThreadLocal_MemberInfoOrmData(this);
}

MemberInfoOrmData &MemberInfoOrmData::operator =(const ::CRYSTAL_NET::service::MemberInfo &pb)
{
    CRYSTAL_RELEASE_SAFE(_ormRawPbData);
    _ormRawPbData = new ::CRYSTAL_NET::service::MemberInfo(pb);
    {
        const auto count = _ormRawPbData->borrowlist_size();

        _borrowlist.resize(count);

        for(Int32 idx = 0; idx < count; ++idx)
        {
        _borrowlist[idx] = SERVICE_COMMON_NS::BorrowOrderInfoOrmData::NewThreadLocal_BorrowOrderInfoOrmData(_ormRawPbData->mutable_borrowlist(idx));

        _borrowlist[idx].SetClosureDelegate([](void *ptr){
            SERVICE_COMMON_NS::BorrowOrderInfoOrmData::DeleteThreadLocal_BorrowOrderInfoOrmData(KERNEL_NS::KernelCastTo<SERVICE_COMMON_NS::BorrowOrderInfoOrmData>(ptr));
        }) ;

        _borrowlist[idx]->SetMaskDirtyCallback([this](IOrmData *ptr){
            _MaskDirty(true);
        }) ;

        }
    }


    _MaskDirty(true);
    return *this;
}

MemberInfoOrmData &MemberInfoOrmData::operator =(const MemberInfoOrmData &other)
{
    if(this == &other)
        return *this;

    IOrmData::operator =(reinterpret_cast<const IOrmData &>(other));
    CRYSTAL_RELEASE_SAFE(_ormRawPbData);
    if(other._ormRawPbData)
        _ormRawPbData = new ::CRYSTAL_NET::service::MemberInfo(*other._ormRawPbData);
    if(_ormRawPbData)
    {
            {
                const auto count = _ormRawPbData->borrowlist_size();
        
                _borrowlist.resize(count);
        
                for(Int32 idx = 0; idx < count; ++idx)
                {
                _borrowlist[idx] = SERVICE_COMMON_NS::BorrowOrderInfoOrmData::NewThreadLocal_BorrowOrderInfoOrmData(_ormRawPbData->mutable_borrowlist(idx));
        
                _borrowlist[idx].SetClosureDelegate([](void *ptr){
                    SERVICE_COMMON_NS::BorrowOrderInfoOrmData::DeleteThreadLocal_BorrowOrderInfoOrmData(KERNEL_NS::KernelCastTo<SERVICE_COMMON_NS::BorrowOrderInfoOrmData>(ptr));
                }) ;
        
                _borrowlist[idx]->SetMaskDirtyCallback([this](IOrmData *ptr){
                    _MaskDirty(true);
                }) ;
        
                }
            }
        
        
    }
    _MaskDirty(true);

    return *this;
}

MemberInfoOrmData &MemberInfoOrmData::operator =(MemberInfoOrmData &&other)
{
    if(this == &other)
        return *this;

    IOrmData::operator =(std::forward<IOrmData>(other));
    _ormRawPbData = other._ormRawPbData;
    other._ormRawPbData = NULL;

    _borrowlist = std::move(other._borrowlist);


    return *this;
}

void MemberInfoOrmData::Clear()
{
    _borrowlist.clear();


    if(_ormRawPbData)
        _ormRawPbData->Clear();

    _MaskDirty(true);
}

void MemberInfoOrmData::_AttachPb(void *pb)
{
    if(LIKELY(!IsAttachPb()))
        CRYSTAL_RELEASE_SAFE(_ormRawPbData);

    _ormRawPbData = reinterpret_cast<::CRYSTAL_NET::service::MemberInfo *>(pb);

    {
        const auto count = _ormRawPbData->borrowlist_size();

        _borrowlist.resize(count);

        for(Int32 idx = 0; idx < count; ++idx)
        {
        _borrowlist[idx] = SERVICE_COMMON_NS::BorrowOrderInfoOrmData::NewThreadLocal_BorrowOrderInfoOrmData(_ormRawPbData->mutable_borrowlist(idx));

        _borrowlist[idx].SetClosureDelegate([](void *ptr){
            SERVICE_COMMON_NS::BorrowOrderInfoOrmData::DeleteThreadLocal_BorrowOrderInfoOrmData(KERNEL_NS::KernelCastTo<SERVICE_COMMON_NS::BorrowOrderInfoOrmData>(ptr));
        }) ;

        _borrowlist[idx]->SetMaskDirtyCallback([this](IOrmData *ptr){
            _MaskDirty(true);
        }) ;

        }
    }



}

KERNEL_NS::LibString MemberInfoOrmData::ToJsonString() const
{
    return _ormRawPbData->ToJsonString();
}

bool MemberInfoOrmData::ToJsonString(std::string *data) const
{
    return _ormRawPbData->ToJsonString(data);
}

bool MemberInfoOrmData::FromJsonString(const Byte8 *data, size_t len)
{
    const auto ret = _ormRawPbData->FromJsonString(data, len);
    if(ret)
    {
        {
            const auto count = _ormRawPbData->borrowlist_size();
    
            _borrowlist.resize(count);
    
            for(Int32 idx = 0; idx < count; ++idx)
            {
            _borrowlist[idx] = SERVICE_COMMON_NS::BorrowOrderInfoOrmData::NewThreadLocal_BorrowOrderInfoOrmData(_ormRawPbData->mutable_borrowlist(idx));
    
            _borrowlist[idx].SetClosureDelegate([](void *ptr){
                SERVICE_COMMON_NS::BorrowOrderInfoOrmData::DeleteThreadLocal_BorrowOrderInfoOrmData(KERNEL_NS::KernelCastTo<SERVICE_COMMON_NS::BorrowOrderInfoOrmData>(ptr));
            }) ;
    
            _borrowlist[idx]->SetMaskDirtyCallback([this](IOrmData *ptr){
                _MaskDirty(true);
            }) ;
    
            }
        }
    
    
    }

    return ret;
}

const ::CRYSTAL_NET::service::MemberInfo *MemberInfoOrmData::GetPbRawData() const
{
    return _ormRawPbData;
}

void MemberInfoOrmData::clear_userid()
{
    _ormRawPbData->clear_userid();
    _MaskDirty(true);
}

uint64_t MemberInfoOrmData::userid() const
{
    return _ormRawPbData->userid();
}

void MemberInfoOrmData::set_userid(uint64_t value)
{
    _ormRawPbData->set_userid(value);
    _MaskDirty(true);
}

void MemberInfoOrmData::clear_role()
{
    _ormRawPbData->clear_role();
    _MaskDirty(true);
}

int32_t MemberInfoOrmData::role() const
{
    return _ormRawPbData->role();
}

void MemberInfoOrmData::set_role(int32_t value)
{
    _ormRawPbData->set_role(value);
    _MaskDirty(true);
}

void MemberInfoOrmData::clear_nickname()
{
    _ormRawPbData->clear_nickname();
    _MaskDirty(true);
}

const std::string &MemberInfoOrmData::nickname() const
{
    return _ormRawPbData->nickname();
}

void MemberInfoOrmData::set_nickname(const std::string &value)
{
    _ormRawPbData->set_nickname(value);
    _MaskDirty(true);
}

std::string *MemberInfoOrmData::mutable_nickname()
{
    _MaskDirty(true);
    return _ormRawPbData->mutable_nickname();
}

Int32 MemberInfoOrmData::borrowlist_size() const
{
    return _ormRawPbData->borrowlist_size();
}

KERNEL_NS::SmartPtr<BorrowOrderInfoOrmData, KERNEL_NS::AutoDelMethods::CustomDelete> &MemberInfoOrmData::mutable_borrowlist(Int32 idx)
{
    return _borrowlist[idx];
}

void MemberInfoOrmData::DeleteArray_borrowlist(Int32 idx, Int32 count)
{
    for(Int32 pos = idx + count - 1; pos >= idx; --pos)
    {
        _borrowlist.erase(_borrowlist.begin() + pos);
    }

    _ormRawPbData->mutable_borrowlist()->DeleteSubrange(idx, count);
    _MaskDirty(true);
}

const std::vector<KERNEL_NS::SmartPtr<BorrowOrderInfoOrmData, KERNEL_NS::AutoDelMethods::CustomDelete>> &MemberInfoOrmData::borrowlist_OrmDataArray() const
{
    return _borrowlist;
}

const ::google::protobuf::RepeatedPtrField<::CRYSTAL_NET::service::BorrowOrderInfo> &MemberInfoOrmData::borrowlist() const
{
    return _ormRawPbData->borrowlist();
}

const KERNEL_NS::SmartPtr<BorrowOrderInfoOrmData, KERNEL_NS::AutoDelMethods::CustomDelete> &MemberInfoOrmData::borrowlist_OrmDataArray(Int32 idx) const
{
    return _borrowlist[idx];
}

const ::CRYSTAL_NET::service::BorrowOrderInfo &MemberInfoOrmData::borrowlist(Int32 idx) const
{
    return _ormRawPbData->borrowlist(idx);
}

KERNEL_NS::SmartPtr<BorrowOrderInfoOrmData, KERNEL_NS::AutoDelMethods::CustomDelete> &MemberInfoOrmData::add_borrowlist()
{
    auto newPb = _ormRawPbData->add_borrowlist();
    _borrowlist.push_back(KERNEL_NS::SmartPtr<BorrowOrderInfoOrmData, KERNEL_NS::AutoDelMethods::CustomDelete>());
    auto &elem = _borrowlist.back();
        elem = SERVICE_COMMON_NS::BorrowOrderInfoOrmData::NewThreadLocal_BorrowOrderInfoOrmData(newPb);

        elem.SetClosureDelegate([](void *ptr){
            SERVICE_COMMON_NS::BorrowOrderInfoOrmData::DeleteThreadLocal_BorrowOrderInfoOrmData(KERNEL_NS::KernelCastTo<SERVICE_COMMON_NS::BorrowOrderInfoOrmData>(ptr));
        }) ;

        elem->SetMaskDirtyCallback([this](IOrmData *ptr){
            _MaskDirty(true);
        }) ;

    _MaskDirty(true);
    return elem;
}

void MemberInfoOrmData::clear_borrowlist()
{
    _ormRawPbData->clear_borrowlist();
    _borrowlist.clear();
    _MaskDirty(true);
}

void MemberInfoOrmData::clear_locktimestampms()
{
    _ormRawPbData->clear_locktimestampms();
    _MaskDirty(true);
}

int64_t MemberInfoOrmData::locktimestampms() const
{
    return _ormRawPbData->locktimestampms();
}

void MemberInfoOrmData::set_locktimestampms(int64_t value)
{
    _ormRawPbData->set_locktimestampms(value);
    _MaskDirty(true);
}

bool MemberInfoOrmData::has_bindphone() const
{
    return _ormRawPbData->has_bindphone();
}

void MemberInfoOrmData::clear_bindphone()
{
    _ormRawPbData->clear_bindphone();
    _MaskDirty(true);
}

uint64_t MemberInfoOrmData::bindphone() const
{
    return _ormRawPbData->bindphone();
}

void MemberInfoOrmData::set_bindphone(uint64_t value)
{
    _ormRawPbData->set_bindphone(value);
    _MaskDirty(true);
}

bool MemberInfoOrmData::_OnEncode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) const
{
    return _ormRawPbData->Encode(stream);
}

bool MemberInfoOrmData::_OnEncode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) const
{
    return _ormRawPbData->Encode(stream);
}

bool MemberInfoOrmData::_OnDecode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream)
{
    const auto ret = _ormRawPbData->Decode(stream);
    if(ret)
    {
        {
            const auto count = _ormRawPbData->borrowlist_size();
    
            _borrowlist.resize(count);
    
            for(Int32 idx = 0; idx < count; ++idx)
            {
            _borrowlist[idx] = SERVICE_COMMON_NS::BorrowOrderInfoOrmData::NewThreadLocal_BorrowOrderInfoOrmData(_ormRawPbData->mutable_borrowlist(idx));
    
            _borrowlist[idx].SetClosureDelegate([](void *ptr){
                SERVICE_COMMON_NS::BorrowOrderInfoOrmData::DeleteThreadLocal_BorrowOrderInfoOrmData(KERNEL_NS::KernelCastTo<SERVICE_COMMON_NS::BorrowOrderInfoOrmData>(ptr));
            }) ;
    
            _borrowlist[idx]->SetMaskDirtyCallback([this](IOrmData *ptr){
                _MaskDirty(true);
            }) ;
    
            }
        }
    
    
    }

    return ret;
}

bool MemberInfoOrmData::_OnDecode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream)
{
    const auto ret = _ormRawPbData->Decode(stream);
    if(ret)
    {
        {
            const auto count = _ormRawPbData->borrowlist_size();
    
            _borrowlist.resize(count);
    
            for(Int32 idx = 0; idx < count; ++idx)
            {
            _borrowlist[idx] = SERVICE_COMMON_NS::BorrowOrderInfoOrmData::NewThreadLocal_BorrowOrderInfoOrmData(_ormRawPbData->mutable_borrowlist(idx));
    
            _borrowlist[idx].SetClosureDelegate([](void *ptr){
                SERVICE_COMMON_NS::BorrowOrderInfoOrmData::DeleteThreadLocal_BorrowOrderInfoOrmData(KERNEL_NS::KernelCastTo<SERVICE_COMMON_NS::BorrowOrderInfoOrmData>(ptr));
            }) ;
    
            _borrowlist[idx]->SetMaskDirtyCallback([this](IOrmData *ptr){
                _MaskDirty(true);
            }) ;
    
            }
        }
    
    
    }

    return ret;
}

POOL_CREATE_OBJ_DEFAULT_IMPL(MemberInfoOrmDataFactory);

IOrmData *MemberInfoOrmDataFactory::Create() const
{
    return MemberInfoOrmData::NewThreadLocal_MemberInfoOrmData();
}


SERVICE_COMMON_END
