/*!
*  MIT License
*  
*  Copyright (c) 2020 ericyonng<120453674@qq.com>
*  
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the "Software"), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*  
*  The above copyright notice and this permission notice shall be included in all
*  copies or substantial portions of the Software.
*  
*  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
*  SOFTWARE.
* 
* Author: Eric Yonng
* Description: Generated By protogentool, Dont Modify This File!!!
*/


#ifndef __PROTOCOLS_ORM_OUT_BOOKINFOORMDATA_H__
#define __PROTOCOLS_ORM_OUT_BOOKINFOORMDATA_H__

#pragma once
#include <kernel/kernel.h>
#include <service_common/protocol/ORM/IOrmData.h>

#include <string>
#include <vector>


namespace CRYSTAL_NET {
namespace service {

class BookInfo;
class BookVariantInfo;
class SnapshotClientInfo;

}
}

namespace google {
    namespace protobuf {
template <typename Element>
class RepeatedPtrField;


    }
}

SERVICE_COMMON_BEGIN

class BookVariantInfoOrmData;
class SnapshotClientInfoOrmData;

SERVICE_COMMON_END

SERVICE_COMMON_BEGIN

class BookInfoOrmData : public SERVICE_COMMON_NS::IOrmData
{
    POOL_CREATE_OBJ_DEFAULT_P1(IOrmData, BookInfoOrmData)

public:
    BookInfoOrmData();
    BookInfoOrmData(::CRYSTAL_NET::service::BookInfo *pb);
    BookInfoOrmData(const BookInfoOrmData &other);
    BookInfoOrmData(BookInfoOrmData &&other);
    BookInfoOrmData(const ::CRYSTAL_NET::service::BookInfo &pb);
    ~BookInfoOrmData();

    virtual void Release() override;

    BookInfoOrmData &operator =(const ::CRYSTAL_NET::service::BookInfo &pb);

    BookInfoOrmData &operator =(const BookInfoOrmData &other);

    BookInfoOrmData &operator =(BookInfoOrmData &&other);

    virtual KERNEL_NS::LibString ToJsonString() const override;

    virtual bool ToJsonString(std::string *data) const override;

    virtual bool FromJsonString(const Byte8 *data, size_t len) override;

    virtual Int64 GetOrmId() const override{ return 8; }

    void Clear();
    const ::CRYSTAL_NET::service::BookInfo *GetPbRawData() const;

    void clear_id();

    uint64_t id() const;

    void set_id(uint64_t value);

    void clear_booktype();

    int32_t booktype() const;

    void set_booktype(int32_t value);

    void clear_bookname();

    const std::string &bookname() const;

    void set_bookname(const std::string &value);

    std::string *mutable_bookname();

    void clear_isbncode();

    const std::string &isbncode() const;

    void set_isbncode(const std::string &value);

    std::string *mutable_isbncode();

    void clear_bookcoverimage();

    const std::string &bookcoverimage() const;

    void set_bookcoverimage(const std::string &value);

    std::string *mutable_bookcoverimage();

    void clear_isonshelves();

    int32_t isonshelves() const;

    void set_isonshelves(int32_t value);

    KERNEL_NS::SmartPtr<BookVariantInfoOrmData, KERNEL_NS::AutoDelMethods::CustomDelete> &mutable_variantinfo();

    const ::CRYSTAL_NET::service::BookVariantInfo &variantinfo() const;

    const KERNEL_NS::SmartPtr<BookVariantInfoOrmData, KERNEL_NS::AutoDelMethods::CustomDelete> &variantinfo_OrmData() const;

    bool has_variantinfo() const;

    void clear_variantinfo();

    void clear_borrowedcount();

    uint64_t borrowedcount() const;

    void set_borrowedcount(uint64_t value);

    Int32 keywords_size() const;

    void clear_keywords();

    const std::string &keywords(Int32 idx) const;

    std::string *mutable_keywords(Int32 idx);

    void set_keywords(Int32 idx, const std::string &value);

    void set_keywords(Int32 idx, std::string &&value);

    void set_keywords(Int32 idx, const Byte8 *value);

    void set_keywords(Int32 idx, const Byte8 *value, size_t sz);

    std::string *add_keywords();

    void add_keywords(const std::string &value);

    void add_keywords(std::string &&value);

    void add_keywords(const Byte8 *value);

    void add_keywords(const Byte8 *value, size_t sz);

    void DeleteArray_keywords(Int32 idx, Int32 count = 1);

    const ::google::protobuf::RepeatedPtrField<std::string> &keywords() const;

    void clear_content();

    const std::string &content() const;

    void set_content(const std::string &value);

    std::string *mutable_content();

    Int32 snapshot_size() const;

    void clear_snapshot();

    const std::string &snapshot(Int32 idx) const;

    std::string *mutable_snapshot(Int32 idx);

    void set_snapshot(Int32 idx, const std::string &value);

    void set_snapshot(Int32 idx, std::string &&value);

    void set_snapshot(Int32 idx, const Byte8 *value);

    void set_snapshot(Int32 idx, const Byte8 *value, size_t sz);

    std::string *add_snapshot();

    void add_snapshot(const std::string &value);

    void add_snapshot(std::string &&value);

    void add_snapshot(const Byte8 *value);

    void add_snapshot(const Byte8 *value, size_t sz);

    void DeleteArray_snapshot(Int32 idx, Int32 count = 1);

    const ::google::protobuf::RepeatedPtrField<std::string> &snapshot() const;

    void clear_coverimagepath();

    const std::string &coverimagepath() const;

    void set_coverimagepath(const std::string &value);

    std::string *mutable_coverimagepath();

    void clear_keywordsstring();

    const std::string &keywordsstring() const;

    void set_keywordsstring(const std::string &value);

    std::string *mutable_keywordsstring();

    Int32 snapshotpreivewinfolist_size() const;

    KERNEL_NS::SmartPtr<SnapshotClientInfoOrmData, KERNEL_NS::AutoDelMethods::CustomDelete> &mutable_snapshotpreivewinfolist(Int32 idx);

    void DeleteArray_snapshotpreivewinfolist(Int32 idx, Int32 count = 1);

    const std::vector<KERNEL_NS::SmartPtr<SnapshotClientInfoOrmData, KERNEL_NS::AutoDelMethods::CustomDelete>> &snapshotpreivewinfolist_OrmDataArray() const;

    const ::google::protobuf::RepeatedPtrField<::CRYSTAL_NET::service::SnapshotClientInfo> &snapshotpreivewinfolist() const;

    const KERNEL_NS::SmartPtr<SnapshotClientInfoOrmData, KERNEL_NS::AutoDelMethods::CustomDelete> &snapshotpreivewinfolist_OrmDataArray(Int32 idx) const;

    const ::CRYSTAL_NET::service::SnapshotClientInfo &snapshotpreivewinfolist(Int32 idx) const;

    KERNEL_NS::SmartPtr<SnapshotClientInfoOrmData, KERNEL_NS::AutoDelMethods::CustomDelete> &add_snapshotpreivewinfolist();

    void clear_snapshotpreivewinfolist();


protected:

    virtual bool _OnEncode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) const override;
    virtual bool _OnEncode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) const override;

    virtual bool _OnDecode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override;
    virtual bool _OnDecode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override;

    virtual void _AttachPb(void *pb) override;

private:

    ::CRYSTAL_NET::service::BookInfo *_ormRawPbData;

    KERNEL_NS::SmartPtr<BookVariantInfoOrmData, KERNEL_NS::AutoDelMethods::CustomDelete> _variantinfo;

    std::vector<KERNEL_NS::SmartPtr<SnapshotClientInfoOrmData, KERNEL_NS::AutoDelMethods::CustomDelete>> _snapshotpreivewinfolist;

};

class BookInfoOrmDataFactory : public IOrmDataFactory
{
    POOL_CREATE_OBJ_DEFAULT_P1(IOrmDataFactory, BookInfoOrmDataFactory);
public:
    BookInfoOrmDataFactory(){}
    ~BookInfoOrmDataFactory(){}

    virtual void Release() override { BookInfoOrmDataFactory::DeleteThreadLocal_BookInfoOrmDataFactory(this);}

    virtual IOrmData *Create() const override;
    virtual Int64 GetOrmId() const override { return 8; }
};

SERVICE_COMMON_END
#endif // __PROTOCOLS_ORM_OUT_BOOKINFOORMDATA_H__