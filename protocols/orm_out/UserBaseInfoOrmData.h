/*!
*  MIT License
*  
*  Copyright (c) 2020 ericyonng<120453674@qq.com>
*  
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the "Software"), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*  
*  The above copyright notice and this permission notice shall be included in all
*  copies or substantial portions of the Software.
*  
*  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
*  SOFTWARE.
* 
* Author: Eric Yonng
* Description: Generated By protogentool, Dont Modify This File!!!
*/


#ifndef __PROTOCOLS_ORM_OUT_USERBASEINFOORMDATA_H__
#define __PROTOCOLS_ORM_OUT_USERBASEINFOORMDATA_H__

#pragma once
#include <kernel/kernel.h>
#include <service_common/protocol/ORM/IOrmData.h>

#include <string>


namespace CRYSTAL_NET {
namespace service {

class UserBaseInfo;

}
}

namespace google {
    namespace protobuf {

    }
}

SERVICE_COMMON_BEGIN


SERVICE_COMMON_END

SERVICE_COMMON_BEGIN

class UserBaseInfoOrmData : public SERVICE_COMMON_NS::IOrmData
{
    POOL_CREATE_OBJ_DEFAULT_P1(IOrmData, UserBaseInfoOrmData)

public:
    UserBaseInfoOrmData();
    UserBaseInfoOrmData(::CRYSTAL_NET::service::UserBaseInfo *pb);
    UserBaseInfoOrmData(const UserBaseInfoOrmData &other);
    UserBaseInfoOrmData(UserBaseInfoOrmData &&other);
    UserBaseInfoOrmData(const ::CRYSTAL_NET::service::UserBaseInfo &pb);
    ~UserBaseInfoOrmData();

    virtual void Release() override;

    UserBaseInfoOrmData &operator =(const ::CRYSTAL_NET::service::UserBaseInfo &pb);

    UserBaseInfoOrmData &operator =(const UserBaseInfoOrmData &other);

    UserBaseInfoOrmData &operator =(UserBaseInfoOrmData &&other);

    virtual KERNEL_NS::LibString ToJsonString() const override;

    virtual bool ToJsonString(std::string *data) const override;

    virtual bool FromJsonString(const Byte8 *data, size_t len) override;

    virtual Int64 GetOrmId() const override{ return 2; }

    void Clear();
    const ::CRYSTAL_NET::service::UserBaseInfo *GetPbRawData() const;

    void clear_userid();

    uint64_t userid() const;

    void set_userid(uint64_t value);

    void clear_accountname();

    const std::string &accountname() const;

    void set_accountname(const std::string &value);

    std::string *mutable_accountname();

    void clear_name();

    const std::string &name() const;

    void set_name(const std::string &value);

    std::string *mutable_name();

    void clear_nickname();

    const std::string &nickname() const;

    void set_nickname(const std::string &value);

    std::string *mutable_nickname();

    void clear_pwd();

    const std::string &pwd() const;

    void set_pwd(const std::string &value);

    std::string *mutable_pwd();

    void clear_pwdsalt();

    const std::string &pwdsalt() const;

    void set_pwdsalt(const std::string &value);

    std::string *mutable_pwdsalt();

    void clear_bindphone();

    uint64_t bindphone() const;

    void set_bindphone(uint64_t value);

    void clear_lastlogintime();

    int64_t lastlogintime() const;

    void set_lastlogintime(int64_t value);

    void clear_lastloginip();

    const std::string &lastloginip() const;

    void set_lastloginip(const std::string &value);

    std::string *mutable_lastloginip();

    void clear_lastloginphoneimei();

    const std::string &lastloginphoneimei() const;

    void set_lastloginphoneimei(const std::string &value);

    std::string *mutable_lastloginphoneimei();

    void clear_createip();

    const std::string &createip() const;

    void set_createip(const std::string &value);

    std::string *mutable_createip();

    void clear_createtime();

    int64_t createtime() const;

    void set_createtime(int64_t value);

    void clear_createphoneimei();

    const std::string &createphoneimei() const;

    void set_createphoneimei(const std::string &value);

    std::string *mutable_createphoneimei();

    void clear_bindmailaddr();

    const std::string &bindmailaddr() const;

    void set_bindmailaddr(const std::string &value);

    std::string *mutable_bindmailaddr();

    void clear_lastpassdaytime();

    int64_t lastpassdaytime() const;

    void set_lastpassdaytime(int64_t value);


protected:

    virtual bool _OnEncode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) const override;
    virtual bool _OnEncode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) const override;

    virtual bool _OnDecode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override;
    virtual bool _OnDecode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override;

    virtual void _AttachPb(void *pb) override;

private:

    ::CRYSTAL_NET::service::UserBaseInfo *_ormRawPbData;

};

class UserBaseInfoOrmDataFactory : public IOrmDataFactory
{
    POOL_CREATE_OBJ_DEFAULT_P1(IOrmDataFactory, UserBaseInfoOrmDataFactory);
public:
    UserBaseInfoOrmDataFactory(){}
    ~UserBaseInfoOrmDataFactory(){}

    virtual void Release() override { UserBaseInfoOrmDataFactory::DeleteThreadLocal_UserBaseInfoOrmDataFactory(this);}

    virtual IOrmData *Create() const override;
    virtual Int64 GetOrmId() const override { return 2; }
};

SERVICE_COMMON_END
#endif // __PROTOCOLS_ORM_OUT_USERBASEINFOORMDATA_H__