/*!
*  MIT License
*  
*  Copyright (c) 2020 ericyonng<120453674@qq.com>
*  
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the "Software"), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*  
*  The above copyright notice and this permission notice shall be included in all
*  copies or substantial portions of the Software.
*  
*  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
*  SOFTWARE.
* 
* Author: Eric Yonng
* Description: Generated By protogentool, Dont Modify This File!!!
*/


#include "pch.h"
#include <protocols/cplusplus/library/com_library.pb.h>
#include <protocols/orm_out/LibararyManagerInfoOrmData.h>

SERVICE_COMMON_BEGIN

POOL_CREATE_OBJ_DEFAULT_IMPL(LibararyManagerInfoOrmData);

LibararyManagerInfoOrmData::LibararyManagerInfoOrmData()
:_ormRawPbData(new ::CRYSTAL_NET::service::LibararyManagerInfo)
{
}

LibararyManagerInfoOrmData::LibararyManagerInfoOrmData(::CRYSTAL_NET::service::LibararyManagerInfo *pb)
:_ormRawPbData(NULL)
{
    AttachPb(pb);
}

LibararyManagerInfoOrmData::LibararyManagerInfoOrmData(const LibararyManagerInfoOrmData &other)
:IOrmData(reinterpret_cast<const IOrmData &>(other))
,_ormRawPbData(other._ormRawPbData ? new ::CRYSTAL_NET::service::LibararyManagerInfo(*other._ormRawPbData) : NULL)
{
    SetAttachPbFlag(false);
}

LibararyManagerInfoOrmData::LibararyManagerInfoOrmData(LibararyManagerInfoOrmData &&other)
:IOrmData(std::forward<IOrmData>(other))
,_ormRawPbData(other._ormRawPbData)
{
    other._ormRawPbData = NULL;
}

LibararyManagerInfoOrmData::LibararyManagerInfoOrmData(const ::CRYSTAL_NET::service::LibararyManagerInfo &pb)
:_ormRawPbData(new ::CRYSTAL_NET::service::LibararyManagerInfo(pb))
{

}

LibararyManagerInfoOrmData::~LibararyManagerInfoOrmData()
{
    if(LIKELY(!IsAttachPb()))
        CRYSTAL_RELEASE_SAFE(_ormRawPbData);
}

void LibararyManagerInfoOrmData::Release()
{
    LibararyManagerInfoOrmData::DeleteThreadLocal_LibararyManagerInfoOrmData(this);
}

LibararyManagerInfoOrmData &LibararyManagerInfoOrmData::operator =(const ::CRYSTAL_NET::service::LibararyManagerInfo &pb)
{
    if(LIKELY(!IsAttachPb()))
        CRYSTAL_RELEASE_SAFE(_ormRawPbData);

    SetAttachPbFlag(false);
    _ormRawPbData = new ::CRYSTAL_NET::service::LibararyManagerInfo(pb);
    _MaskDirty(true);
    return *this;
}

LibararyManagerInfoOrmData &LibararyManagerInfoOrmData::operator =(const LibararyManagerInfoOrmData &other)
{
    if(this == &other)
        return *this;

    IOrmData::operator =(reinterpret_cast<const IOrmData &>(other));
    if(LIKELY(!IsAttachPb()))
        CRYSTAL_RELEASE_SAFE(_ormRawPbData);

    _ormRawPbData = NULL;
    SetAttachPbFlag(false);
    if(other._ormRawPbData)
        _ormRawPbData = new ::CRYSTAL_NET::service::LibararyManagerInfo(*other._ormRawPbData);
    _MaskDirty(true);

    return *this;
}

LibararyManagerInfoOrmData &LibararyManagerInfoOrmData::operator =(LibararyManagerInfoOrmData &&other)
{
    if(this == &other)
        return *this;

    IOrmData::operator =(std::forward<IOrmData>(other));
    _ormRawPbData = other._ormRawPbData;
    other._ormRawPbData = NULL;


    return *this;
}

void LibararyManagerInfoOrmData::Clear()
{

    if(_ormRawPbData)
        _ormRawPbData->Clear();

    _MaskDirty(true);
}

void LibararyManagerInfoOrmData::_AttachPb(void *pb)
{
    if(LIKELY(!IsAttachPb()))
        CRYSTAL_RELEASE_SAFE(_ormRawPbData);

    _ormRawPbData = reinterpret_cast<::CRYSTAL_NET::service::LibararyManagerInfo *>(pb);


}

KERNEL_NS::LibString LibararyManagerInfoOrmData::ToJsonString() const
{
    return _ormRawPbData->ToJsonString();
}

bool LibararyManagerInfoOrmData::ToJsonString(std::string *data) const
{
    return _ormRawPbData->ToJsonString(data);
}

bool LibararyManagerInfoOrmData::FromJsonString(const Byte8 *data, size_t len)
{
    return _ormRawPbData->FromJsonString(data, len);
}

const ::CRYSTAL_NET::service::LibararyManagerInfo *LibararyManagerInfoOrmData::GetPbRawData() const
{
    return _ormRawPbData;
}

void LibararyManagerInfoOrmData::clear_userid()
{
    _ormRawPbData->clear_userid();
    _MaskDirty(true);
}

uint64_t LibararyManagerInfoOrmData::userid() const
{
    return _ormRawPbData->userid();
}

void LibararyManagerInfoOrmData::set_userid(uint64_t value)
{
    _ormRawPbData->set_userid(value);
    _MaskDirty(true);
}

bool LibararyManagerInfoOrmData::_OnEncode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) const
{
    return _ormRawPbData->Encode(stream);
}

bool LibararyManagerInfoOrmData::_OnEncode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) const
{
    return _ormRawPbData->Encode(stream);
}

bool LibararyManagerInfoOrmData::_OnDecode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream)
{
    return _ormRawPbData->Decode(stream);
}

bool LibararyManagerInfoOrmData::_OnDecode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream)
{
    return _ormRawPbData->Decode(stream);
}

POOL_CREATE_OBJ_DEFAULT_IMPL(LibararyManagerInfoOrmDataFactory);

IOrmData *LibararyManagerInfoOrmDataFactory::Create() const
{
    return LibararyManagerInfoOrmData::NewThreadLocal_LibararyManagerInfoOrmData();
}


SERVICE_COMMON_END
