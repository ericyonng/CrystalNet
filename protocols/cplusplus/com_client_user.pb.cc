#include <pch.h>
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com_client_user.proto

#include <protocols/cplusplus/com_client_user.pb.h>
POOL_CREATE_OBJ_DEFAULT_IMPL(ClientUserStatusFactory);
POOL_CREATE_OBJ_DEFAULT_IMPL(ClientUserInfoFactory);

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace CRYSTAL_NET {
namespace service {
PROTOBUF_CONSTEXPR ClientUserStatus::ClientUserStatus(
    ::_pbi::ConstantInitialized) {}
struct ClientUserStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientUserStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientUserStatusDefaultTypeInternal() {}
  union {
    ClientUserStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientUserStatusDefaultTypeInternal _ClientUserStatus_default_instance_;
PROTOBUF_CONSTEXPR ClientUserInfo::ClientUserInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accountname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.phoneimei_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lasttoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.userid_)*/uint64_t{0u}
  , /*decltype(_impl_.tokenexpiretime_)*/int64_t{0}
  , /*decltype(_impl_.clientstatus_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClientUserInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientUserInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientUserInfoDefaultTypeInternal() {}
  union {
    ClientUserInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientUserInfoDefaultTypeInternal _ClientUserInfo_default_instance_;
}  // namespace service
}  // namespace CRYSTAL_NET
static ::_pb::Metadata file_level_metadata_com_5fclient_5fuser_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_com_5fclient_5fuser_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_com_5fclient_5fuser_2eproto = nullptr;

const uint32_t TableStruct_com_5fclient_5fuser_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::ClientUserStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::ClientUserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::ClientUserInfo, _impl_.userid_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::ClientUserInfo, _impl_.accountname_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::ClientUserInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::ClientUserInfo, _impl_.nickname_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::ClientUserInfo, _impl_.phoneimei_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::ClientUserInfo, _impl_.clientstatus_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::ClientUserInfo, _impl_.lasttoken_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::ClientUserInfo, _impl_.tokenexpiretime_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::CRYSTAL_NET::service::ClientUserStatus)},
  { 6, -1, -1, sizeof(::CRYSTAL_NET::service::ClientUserInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::CRYSTAL_NET::service::_ClientUserStatus_default_instance_._instance,
  &::CRYSTAL_NET::service::_ClientUserInfo_default_instance_._instance,
};

const char descriptor_table_protodef_com_5fclient_5fuser_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025com_client_user.proto\022\023CRYSTAL_NET.ser"
  "vice\"`\n\020ClientUserStatus\"L\n\005ENUMS\022\013\n\007UNL"
  "OGIN\020\000\022\014\n\010LOGINING\020\001\022\013\n\007LOGINED\020\002\022\r\n\tLOG"
  "OUTING\020\003\022\014\n\010LOGOUTED\020\004\"\252\001\n\016ClientUserInf"
  "o\022\016\n\006UserId\030\001 \001(\004\022\023\n\013AccountName\030\002 \001(\t\022\014"
  "\n\004Name\030\003 \001(\t\022\020\n\010Nickname\030\004 \001(\t\022\021\n\tPhoneI"
  "mei\030\005 \001(\t\022\024\n\014ClientStatus\030\006 \001(\021\022\021\n\tLastT"
  "oken\030\007 \001(\t\022\027\n\017TokenExpireTime\030\010 \001(\022b\006pro"
  "to3"
  ;
static ::_pbi::once_flag descriptor_table_com_5fclient_5fuser_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_com_5fclient_5fuser_2eproto = {
    false, false, 323, descriptor_table_protodef_com_5fclient_5fuser_2eproto,
    "com_client_user.proto",
    &descriptor_table_com_5fclient_5fuser_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_com_5fclient_5fuser_2eproto::offsets,
    file_level_metadata_com_5fclient_5fuser_2eproto, file_level_enum_descriptors_com_5fclient_5fuser_2eproto,
    file_level_service_descriptors_com_5fclient_5fuser_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_com_5fclient_5fuser_2eproto_getter() {
  return &descriptor_table_com_5fclient_5fuser_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_com_5fclient_5fuser_2eproto(&descriptor_table_com_5fclient_5fuser_2eproto);
namespace CRYSTAL_NET {
namespace service {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientUserStatus_ENUMS_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_com_5fclient_5fuser_2eproto);
  return file_level_enum_descriptors_com_5fclient_5fuser_2eproto[0];
}
bool ClientUserStatus_ENUMS_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ClientUserStatus_ENUMS ClientUserStatus::UNLOGIN;
constexpr ClientUserStatus_ENUMS ClientUserStatus::LOGINING;
constexpr ClientUserStatus_ENUMS ClientUserStatus::LOGINED;
constexpr ClientUserStatus_ENUMS ClientUserStatus::LOGOUTING;
constexpr ClientUserStatus_ENUMS ClientUserStatus::LOGOUTED;
constexpr ClientUserStatus_ENUMS ClientUserStatus::ENUMS_MIN;
constexpr ClientUserStatus_ENUMS ClientUserStatus::ENUMS_MAX;
constexpr int ClientUserStatus::ENUMS_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ClientUserStatus::_Internal {
 public:
};

ClientUserStatus::ClientUserStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CRYSTAL_NET.service.ClientUserStatus)
}
ClientUserStatus::ClientUserStatus(const ClientUserStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ClientUserStatus* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CRYSTAL_NET.service.ClientUserStatus)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientUserStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientUserStatus::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ClientUserStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_com_5fclient_5fuser_2eproto_getter, &descriptor_table_com_5fclient_5fuser_2eproto_once,
      file_level_metadata_com_5fclient_5fuser_2eproto[0]);
}

// ===================================================================

class ClientUserInfo::_Internal {
 public:
};

ClientUserInfo::ClientUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CRYSTAL_NET.service.ClientUserInfo)
}
ClientUserInfo::ClientUserInfo(const ClientUserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientUserInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accountname_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.phoneimei_){}
    , decltype(_impl_.lasttoken_){}
    , decltype(_impl_.userid_){}
    , decltype(_impl_.tokenexpiretime_){}
    , decltype(_impl_.clientstatus_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.accountname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accountname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_accountname().empty()) {
    _this->_impl_.accountname_.Set(from._internal_accountname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.phoneimei_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.phoneimei_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_phoneimei().empty()) {
    _this->_impl_.phoneimei_.Set(from._internal_phoneimei(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lasttoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lasttoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lasttoken().empty()) {
    _this->_impl_.lasttoken_.Set(from._internal_lasttoken(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.userid_, &from._impl_.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.clientstatus_) -
    reinterpret_cast<char*>(&_impl_.userid_)) + sizeof(_impl_.clientstatus_));
  // @@protoc_insertion_point(copy_constructor:CRYSTAL_NET.service.ClientUserInfo)
}

inline void ClientUserInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accountname_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.phoneimei_){}
    , decltype(_impl_.lasttoken_){}
    , decltype(_impl_.userid_){uint64_t{0u}}
    , decltype(_impl_.tokenexpiretime_){int64_t{0}}
    , decltype(_impl_.clientstatus_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.accountname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accountname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.phoneimei_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.phoneimei_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lasttoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lasttoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientUserInfo::~ClientUserInfo() {
  // @@protoc_insertion_point(destructor:CRYSTAL_NET.service.ClientUserInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientUserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accountname_.Destroy();
  _impl_.name_.Destroy();
  _impl_.nickname_.Destroy();
  _impl_.phoneimei_.Destroy();
  _impl_.lasttoken_.Destroy();
}

void ClientUserInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientUserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CRYSTAL_NET.service.ClientUserInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accountname_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.nickname_.ClearToEmpty();
  _impl_.phoneimei_.ClearToEmpty();
  _impl_.lasttoken_.ClearToEmpty();
  ::memset(&_impl_.userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.clientstatus_) -
      reinterpret_cast<char*>(&_impl_.userid_)) + sizeof(_impl_.clientstatus_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientUserInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 UserId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string AccountName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_accountname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CRYSTAL_NET.service.ClientUserInfo.AccountName"));
        } else
          goto handle_unusual;
        continue;
      // string Name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CRYSTAL_NET.service.ClientUserInfo.Name"));
        } else
          goto handle_unusual;
        continue;
      // string Nickname = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CRYSTAL_NET.service.ClientUserInfo.Nickname"));
        } else
          goto handle_unusual;
        continue;
      // string PhoneImei = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_phoneimei();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CRYSTAL_NET.service.ClientUserInfo.PhoneImei"));
        } else
          goto handle_unusual;
        continue;
      // sint32 ClientStatus = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.clientstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string LastToken = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_lasttoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CRYSTAL_NET.service.ClientUserInfo.LastToken"));
        } else
          goto handle_unusual;
        continue;
      // sint64 TokenExpireTime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.tokenexpiretime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientUserInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRYSTAL_NET.service.ClientUserInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 UserId = 1;
  if (this->_internal_userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_userid(), target);
  }

  // string AccountName = 2;
  if (!this->_internal_accountname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accountname().data(), static_cast<int>(this->_internal_accountname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CRYSTAL_NET.service.ClientUserInfo.AccountName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_accountname(), target);
  }

  // string Name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CRYSTAL_NET.service.ClientUserInfo.Name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string Nickname = 4;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CRYSTAL_NET.service.ClientUserInfo.Nickname");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_nickname(), target);
  }

  // string PhoneImei = 5;
  if (!this->_internal_phoneimei().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phoneimei().data(), static_cast<int>(this->_internal_phoneimei().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CRYSTAL_NET.service.ClientUserInfo.PhoneImei");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_phoneimei(), target);
  }

  // sint32 ClientStatus = 6;
  if (this->_internal_clientstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(6, this->_internal_clientstatus(), target);
  }

  // string LastToken = 7;
  if (!this->_internal_lasttoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lasttoken().data(), static_cast<int>(this->_internal_lasttoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CRYSTAL_NET.service.ClientUserInfo.LastToken");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_lasttoken(), target);
  }

  // sint64 TokenExpireTime = 8;
  if (this->_internal_tokenexpiretime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(8, this->_internal_tokenexpiretime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRYSTAL_NET.service.ClientUserInfo)
  return target;
}

size_t ClientUserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRYSTAL_NET.service.ClientUserInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string AccountName = 2;
  if (!this->_internal_accountname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accountname());
  }

  // string Name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string Nickname = 4;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string PhoneImei = 5;
  if (!this->_internal_phoneimei().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phoneimei());
  }

  // string LastToken = 7;
  if (!this->_internal_lasttoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lasttoken());
  }

  // uint64 UserId = 1;
  if (this->_internal_userid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_userid());
  }

  // sint64 TokenExpireTime = 8;
  if (this->_internal_tokenexpiretime() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_tokenexpiretime());
  }

  // sint32 ClientStatus = 6;
  if (this->_internal_clientstatus() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_clientstatus());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientUserInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientUserInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientUserInfo::GetClassData() const { return &_class_data_; }


void ClientUserInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientUserInfo*>(&to_msg);
  auto& from = static_cast<const ClientUserInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CRYSTAL_NET.service.ClientUserInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_accountname().empty()) {
    _this->_internal_set_accountname(from._internal_accountname());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  if (!from._internal_phoneimei().empty()) {
    _this->_internal_set_phoneimei(from._internal_phoneimei());
  }
  if (!from._internal_lasttoken().empty()) {
    _this->_internal_set_lasttoken(from._internal_lasttoken());
  }
  if (from._internal_userid() != 0) {
    _this->_internal_set_userid(from._internal_userid());
  }
  if (from._internal_tokenexpiretime() != 0) {
    _this->_internal_set_tokenexpiretime(from._internal_tokenexpiretime());
  }
  if (from._internal_clientstatus() != 0) {
    _this->_internal_set_clientstatus(from._internal_clientstatus());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientUserInfo::CopyFrom(const ClientUserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRYSTAL_NET.service.ClientUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientUserInfo::IsInitialized() const {
  return true;
}

void ClientUserInfo::InternalSwap(ClientUserInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accountname_, lhs_arena,
      &other->_impl_.accountname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.phoneimei_, lhs_arena,
      &other->_impl_.phoneimei_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lasttoken_, lhs_arena,
      &other->_impl_.lasttoken_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientUserInfo, _impl_.clientstatus_)
      + sizeof(ClientUserInfo::_impl_.clientstatus_)
      - PROTOBUF_FIELD_OFFSET(ClientUserInfo, _impl_.userid_)>(
          reinterpret_cast<char*>(&_impl_.userid_),
          reinterpret_cast<char*>(&other->_impl_.userid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientUserInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_com_5fclient_5fuser_2eproto_getter, &descriptor_table_com_5fclient_5fuser_2eproto_once,
      file_level_metadata_com_5fclient_5fuser_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace service
}  // namespace CRYSTAL_NET
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CRYSTAL_NET::service::ClientUserStatus*
Arena::CreateMaybeMessage< ::CRYSTAL_NET::service::ClientUserStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRYSTAL_NET::service::ClientUserStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::CRYSTAL_NET::service::ClientUserInfo*
Arena::CreateMaybeMessage< ::CRYSTAL_NET::service::ClientUserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRYSTAL_NET::service::ClientUserInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
