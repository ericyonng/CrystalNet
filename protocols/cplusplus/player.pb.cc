#include <pch.h>
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player.proto

#include <protocols/cplusplus/player.pb.h>
POOL_CREATE_OBJ_DEFAULT_IMPL(PlayerDataReqFactory);
POOL_CREATE_OBJ_DEFAULT_IMPL(PlayerDataResFactory);
POOL_CREATE_OBJ_DEFAULT_IMPL(ModifyPlayerNameReqFactory);
POOL_CREATE_OBJ_DEFAULT_IMPL(ModifyPlayerNameResFactory);
POOL_CREATE_OBJ_DEFAULT_IMPL(PlayerDataNtyFactory);

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace CRYSTAL_NET {
namespace service {
PROTOBUF_CONSTEXPR PlayerDataReq::PlayerDataReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pwd_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct PlayerDataReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerDataReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerDataReqDefaultTypeInternal() {}
  union {
    PlayerDataReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerDataReqDefaultTypeInternal _PlayerDataReq_default_instance_;
PROTOBUF_CONSTEXPR PlayerDataRes::PlayerDataRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.logintoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.playerdata_)*/nullptr
  , /*decltype(_impl_.errcode_)*/0} {}
struct PlayerDataResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerDataResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerDataResDefaultTypeInternal() {}
  union {
    PlayerDataRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerDataResDefaultTypeInternal _PlayerDataRes_default_instance_;
PROTOBUF_CONSTEXPR ModifyPlayerNameReq::ModifyPlayerNameReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.newname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ModifyPlayerNameReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModifyPlayerNameReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModifyPlayerNameReqDefaultTypeInternal() {}
  union {
    ModifyPlayerNameReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModifyPlayerNameReqDefaultTypeInternal _ModifyPlayerNameReq_default_instance_;
PROTOBUF_CONSTEXPR ModifyPlayerNameRes::ModifyPlayerNameRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.errcode_)*/0} {}
struct ModifyPlayerNameResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModifyPlayerNameResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModifyPlayerNameResDefaultTypeInternal() {}
  union {
    ModifyPlayerNameRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModifyPlayerNameResDefaultTypeInternal _ModifyPlayerNameRes_default_instance_;
PROTOBUF_CONSTEXPR PlayerDataNty::PlayerDataNty(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.playerdata_)*/nullptr} {}
struct PlayerDataNtyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerDataNtyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerDataNtyDefaultTypeInternal() {}
  union {
    PlayerDataNty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerDataNtyDefaultTypeInternal _PlayerDataNty_default_instance_;
}  // namespace service
}  // namespace CRYSTAL_NET
static ::_pb::Metadata file_level_metadata_player_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_player_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_player_2eproto = nullptr;

const uint32_t TableStruct_player_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::PlayerDataReq, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::PlayerDataReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::PlayerDataReq, _impl_.account_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::PlayerDataReq, _impl_.pwd_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::PlayerDataRes, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::PlayerDataRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::PlayerDataRes, _impl_.errcode_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::PlayerDataRes, _impl_.playerdata_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::PlayerDataRes, _impl_.logintoken_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::ModifyPlayerNameReq, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::ModifyPlayerNameReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::ModifyPlayerNameReq, _impl_.newname_),
  0,
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::ModifyPlayerNameRes, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::ModifyPlayerNameRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::ModifyPlayerNameRes, _impl_.errcode_),
  0,
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::PlayerDataNty, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::PlayerDataNty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::PlayerDataNty, _impl_.playerdata_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::CRYSTAL_NET::service::PlayerDataReq)},
  { 10, 19, -1, sizeof(::CRYSTAL_NET::service::PlayerDataRes)},
  { 22, 29, -1, sizeof(::CRYSTAL_NET::service::ModifyPlayerNameReq)},
  { 30, 37, -1, sizeof(::CRYSTAL_NET::service::ModifyPlayerNameRes)},
  { 38, 45, -1, sizeof(::CRYSTAL_NET::service::PlayerDataNty)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::CRYSTAL_NET::service::_PlayerDataReq_default_instance_._instance,
  &::CRYSTAL_NET::service::_PlayerDataRes_default_instance_._instance,
  &::CRYSTAL_NET::service::_ModifyPlayerNameReq_default_instance_._instance,
  &::CRYSTAL_NET::service::_ModifyPlayerNameRes_default_instance_._instance,
  &::CRYSTAL_NET::service::_PlayerDataNty_default_instance_._instance,
};

const char descriptor_table_protodef_player_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014player.proto\022\023CRYSTAL_NET.service\032\020com"
  "_player.proto\"K\n\rPlayerDataReq\022\024\n\007accoun"
  "t\030\001 \001(\tH\000\210\001\001\022\020\n\003pwd\030\002 \001(\tH\001\210\001\001B\n\n\010_accou"
  "ntB\006\n\004_pwd\"\242\001\n\rPlayerDataRes\022\024\n\007errCode\030"
  "\001 \001(\021H\000\210\001\001\0228\n\nplayerData\030\002 \001(\0132\037.CRYSTAL"
  "_NET.service.PlayerDataH\001\210\001\001\022\027\n\nloginTok"
  "en\030\003 \001(\tH\002\210\001\001B\n\n\010_errCodeB\r\n\013_playerData"
  "B\r\n\013_loginToken\"7\n\023ModifyPlayerNameReq\022\024"
  "\n\007newName\030\001 \001(\tH\000\210\001\001B\n\n\010_newName\"7\n\023Modi"
  "fyPlayerNameRes\022\024\n\007errCode\030\001 \001(\021H\000\210\001\001B\n\n"
  "\010_errCode\"X\n\rPlayerDataNty\0228\n\nplayerData"
  "\030\001 \001(\0132\037.CRYSTAL_NET.service.PlayerDataH"
  "\000\210\001\001B\r\n\013_playerDatab\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_player_2eproto_deps[1] = {
  &::descriptor_table_com_5fplayer_2eproto,
};
static ::_pbi::once_flag descriptor_table_player_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_player_2eproto = {
    false, false, 507, descriptor_table_protodef_player_2eproto,
    "player.proto",
    &descriptor_table_player_2eproto_once, descriptor_table_player_2eproto_deps, 1, 5,
    schemas, file_default_instances, TableStruct_player_2eproto::offsets,
    file_level_metadata_player_2eproto, file_level_enum_descriptors_player_2eproto,
    file_level_service_descriptors_player_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_player_2eproto_getter() {
  return &descriptor_table_player_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_player_2eproto(&descriptor_table_player_2eproto);
namespace CRYSTAL_NET {
namespace service {

// ===================================================================

class PlayerDataReq::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerDataReq>()._impl_._has_bits_);
  static void set_has_account(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pwd(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PlayerDataReq::PlayerDataReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CRYSTAL_NET.service.PlayerDataReq)
}
PlayerDataReq::PlayerDataReq(const PlayerDataReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerDataReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_){}
    , decltype(_impl_.pwd_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_account()) {
    _this->_impl_.account_.Set(from._internal_account(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pwd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pwd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pwd()) {
    _this->_impl_.pwd_.Set(from._internal_pwd(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CRYSTAL_NET.service.PlayerDataReq)
}

inline void PlayerDataReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_){}
    , decltype(_impl_.pwd_){}
  };
  _impl_.account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pwd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pwd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerDataReq::~PlayerDataReq() {
  // @@protoc_insertion_point(destructor:CRYSTAL_NET.service.PlayerDataReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerDataReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_.Destroy();
  _impl_.pwd_.Destroy();
}

void PlayerDataReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerDataReq::Clear() {
// @@protoc_insertion_point(message_clear_start:CRYSTAL_NET.service.PlayerDataReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.account_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.pwd_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerDataReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CRYSTAL_NET.service.PlayerDataReq.account"));
        } else
          goto handle_unusual;
        continue;
      // optional string pwd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_pwd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CRYSTAL_NET.service.PlayerDataReq.pwd"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerDataReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRYSTAL_NET.service.PlayerDataReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string account = 1;
  if (_internal_has_account()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CRYSTAL_NET.service.PlayerDataReq.account");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account(), target);
  }

  // optional string pwd = 2;
  if (_internal_has_pwd()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pwd().data(), static_cast<int>(this->_internal_pwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CRYSTAL_NET.service.PlayerDataReq.pwd");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pwd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRYSTAL_NET.service.PlayerDataReq)
  return target;
}

size_t PlayerDataReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRYSTAL_NET.service.PlayerDataReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string account = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_account());
    }

    // optional string pwd = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pwd());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerDataReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerDataReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerDataReq::GetClassData() const { return &_class_data_; }


void PlayerDataReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerDataReq*>(&to_msg);
  auto& from = static_cast<const PlayerDataReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CRYSTAL_NET.service.PlayerDataReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_account(from._internal_account());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_pwd(from._internal_pwd());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerDataReq::CopyFrom(const PlayerDataReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRYSTAL_NET.service.PlayerDataReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDataReq::IsInitialized() const {
  return true;
}

void PlayerDataReq::InternalSwap(PlayerDataReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_, lhs_arena,
      &other->_impl_.account_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pwd_, lhs_arena,
      &other->_impl_.pwd_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerDataReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_2eproto_getter, &descriptor_table_player_2eproto_once,
      file_level_metadata_player_2eproto[0]);
}

// ===================================================================

class PlayerDataRes::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerDataRes>()._impl_._has_bits_);
  static void set_has_errcode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CRYSTAL_NET::service::PlayerData& playerdata(const PlayerDataRes* msg);
  static void set_has_playerdata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_logintoken(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CRYSTAL_NET::service::PlayerData&
PlayerDataRes::_Internal::playerdata(const PlayerDataRes* msg) {
  return *msg->_impl_.playerdata_;
}
void PlayerDataRes::clear_playerdata() {
  if (_impl_.playerdata_ != nullptr) _impl_.playerdata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
PlayerDataRes::PlayerDataRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CRYSTAL_NET.service.PlayerDataRes)
}
PlayerDataRes::PlayerDataRes(const PlayerDataRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerDataRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.logintoken_){}
    , decltype(_impl_.playerdata_){nullptr}
    , decltype(_impl_.errcode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.logintoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.logintoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_logintoken()) {
    _this->_impl_.logintoken_.Set(from._internal_logintoken(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_playerdata()) {
    _this->_impl_.playerdata_ = new ::CRYSTAL_NET::service::PlayerData(*from._impl_.playerdata_);
  }
  _this->_impl_.errcode_ = from._impl_.errcode_;
  // @@protoc_insertion_point(copy_constructor:CRYSTAL_NET.service.PlayerDataRes)
}

inline void PlayerDataRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.logintoken_){}
    , decltype(_impl_.playerdata_){nullptr}
    , decltype(_impl_.errcode_){0}
  };
  _impl_.logintoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.logintoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerDataRes::~PlayerDataRes() {
  // @@protoc_insertion_point(destructor:CRYSTAL_NET.service.PlayerDataRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerDataRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.logintoken_.Destroy();
  if (this != internal_default_instance()) delete _impl_.playerdata_;
}

void PlayerDataRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerDataRes::Clear() {
// @@protoc_insertion_point(message_clear_start:CRYSTAL_NET.service.PlayerDataRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.logintoken_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.playerdata_ != nullptr);
      _impl_.playerdata_->Clear();
    }
  }
  _impl_.errcode_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerDataRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional sint32 errCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_errcode(&has_bits);
          _impl_.errcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CRYSTAL_NET.service.PlayerData playerData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string loginToken = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_logintoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CRYSTAL_NET.service.PlayerDataRes.loginToken"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerDataRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRYSTAL_NET.service.PlayerDataRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional sint32 errCode = 1;
  if (_internal_has_errcode()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_errcode(), target);
  }

  // optional .CRYSTAL_NET.service.PlayerData playerData = 2;
  if (_internal_has_playerdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::playerdata(this),
        _Internal::playerdata(this).GetCachedSize(), target, stream);
  }

  // optional string loginToken = 3;
  if (_internal_has_logintoken()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logintoken().data(), static_cast<int>(this->_internal_logintoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CRYSTAL_NET.service.PlayerDataRes.loginToken");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_logintoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRYSTAL_NET.service.PlayerDataRes)
  return target;
}

size_t PlayerDataRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRYSTAL_NET.service.PlayerDataRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string loginToken = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_logintoken());
    }

    // optional .CRYSTAL_NET.service.PlayerData playerData = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.playerdata_);
    }

    // optional sint32 errCode = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_errcode());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerDataRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerDataRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerDataRes::GetClassData() const { return &_class_data_; }


void PlayerDataRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerDataRes*>(&to_msg);
  auto& from = static_cast<const PlayerDataRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CRYSTAL_NET.service.PlayerDataRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_logintoken(from._internal_logintoken());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_playerdata()->::CRYSTAL_NET::service::PlayerData::MergeFrom(
          from._internal_playerdata());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.errcode_ = from._impl_.errcode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerDataRes::CopyFrom(const PlayerDataRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRYSTAL_NET.service.PlayerDataRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDataRes::IsInitialized() const {
  return true;
}

void PlayerDataRes::InternalSwap(PlayerDataRes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.logintoken_, lhs_arena,
      &other->_impl_.logintoken_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerDataRes, _impl_.errcode_)
      + sizeof(PlayerDataRes::_impl_.errcode_)
      - PROTOBUF_FIELD_OFFSET(PlayerDataRes, _impl_.playerdata_)>(
          reinterpret_cast<char*>(&_impl_.playerdata_),
          reinterpret_cast<char*>(&other->_impl_.playerdata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerDataRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_2eproto_getter, &descriptor_table_player_2eproto_once,
      file_level_metadata_player_2eproto[1]);
}

// ===================================================================

class ModifyPlayerNameReq::_Internal {
 public:
  using HasBits = decltype(std::declval<ModifyPlayerNameReq>()._impl_._has_bits_);
  static void set_has_newname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ModifyPlayerNameReq::ModifyPlayerNameReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CRYSTAL_NET.service.ModifyPlayerNameReq)
}
ModifyPlayerNameReq::ModifyPlayerNameReq(const ModifyPlayerNameReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModifyPlayerNameReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.newname_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.newname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_newname()) {
    _this->_impl_.newname_.Set(from._internal_newname(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CRYSTAL_NET.service.ModifyPlayerNameReq)
}

inline void ModifyPlayerNameReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.newname_){}
  };
  _impl_.newname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModifyPlayerNameReq::~ModifyPlayerNameReq() {
  // @@protoc_insertion_point(destructor:CRYSTAL_NET.service.ModifyPlayerNameReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModifyPlayerNameReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.newname_.Destroy();
}

void ModifyPlayerNameReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModifyPlayerNameReq::Clear() {
// @@protoc_insertion_point(message_clear_start:CRYSTAL_NET.service.ModifyPlayerNameReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.newname_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModifyPlayerNameReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string newName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_newname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CRYSTAL_NET.service.ModifyPlayerNameReq.newName"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModifyPlayerNameReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRYSTAL_NET.service.ModifyPlayerNameReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string newName = 1;
  if (_internal_has_newname()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_newname().data(), static_cast<int>(this->_internal_newname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CRYSTAL_NET.service.ModifyPlayerNameReq.newName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_newname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRYSTAL_NET.service.ModifyPlayerNameReq)
  return target;
}

size_t ModifyPlayerNameReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRYSTAL_NET.service.ModifyPlayerNameReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string newName = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModifyPlayerNameReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModifyPlayerNameReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModifyPlayerNameReq::GetClassData() const { return &_class_data_; }


void ModifyPlayerNameReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModifyPlayerNameReq*>(&to_msg);
  auto& from = static_cast<const ModifyPlayerNameReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CRYSTAL_NET.service.ModifyPlayerNameReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_newname()) {
    _this->_internal_set_newname(from._internal_newname());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModifyPlayerNameReq::CopyFrom(const ModifyPlayerNameReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRYSTAL_NET.service.ModifyPlayerNameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyPlayerNameReq::IsInitialized() const {
  return true;
}

void ModifyPlayerNameReq::InternalSwap(ModifyPlayerNameReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.newname_, lhs_arena,
      &other->_impl_.newname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ModifyPlayerNameReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_2eproto_getter, &descriptor_table_player_2eproto_once,
      file_level_metadata_player_2eproto[2]);
}

// ===================================================================

class ModifyPlayerNameRes::_Internal {
 public:
  using HasBits = decltype(std::declval<ModifyPlayerNameRes>()._impl_._has_bits_);
  static void set_has_errcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ModifyPlayerNameRes::ModifyPlayerNameRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CRYSTAL_NET.service.ModifyPlayerNameRes)
}
ModifyPlayerNameRes::ModifyPlayerNameRes(const ModifyPlayerNameRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModifyPlayerNameRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.errcode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.errcode_ = from._impl_.errcode_;
  // @@protoc_insertion_point(copy_constructor:CRYSTAL_NET.service.ModifyPlayerNameRes)
}

inline void ModifyPlayerNameRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.errcode_){0}
  };
}

ModifyPlayerNameRes::~ModifyPlayerNameRes() {
  // @@protoc_insertion_point(destructor:CRYSTAL_NET.service.ModifyPlayerNameRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModifyPlayerNameRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ModifyPlayerNameRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModifyPlayerNameRes::Clear() {
// @@protoc_insertion_point(message_clear_start:CRYSTAL_NET.service.ModifyPlayerNameRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.errcode_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModifyPlayerNameRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional sint32 errCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_errcode(&has_bits);
          _impl_.errcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModifyPlayerNameRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRYSTAL_NET.service.ModifyPlayerNameRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional sint32 errCode = 1;
  if (_internal_has_errcode()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_errcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRYSTAL_NET.service.ModifyPlayerNameRes)
  return target;
}

size_t ModifyPlayerNameRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRYSTAL_NET.service.ModifyPlayerNameRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional sint32 errCode = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_errcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModifyPlayerNameRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModifyPlayerNameRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModifyPlayerNameRes::GetClassData() const { return &_class_data_; }


void ModifyPlayerNameRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModifyPlayerNameRes*>(&to_msg);
  auto& from = static_cast<const ModifyPlayerNameRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CRYSTAL_NET.service.ModifyPlayerNameRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_errcode()) {
    _this->_internal_set_errcode(from._internal_errcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModifyPlayerNameRes::CopyFrom(const ModifyPlayerNameRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRYSTAL_NET.service.ModifyPlayerNameRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyPlayerNameRes::IsInitialized() const {
  return true;
}

void ModifyPlayerNameRes::InternalSwap(ModifyPlayerNameRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.errcode_, other->_impl_.errcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModifyPlayerNameRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_2eproto_getter, &descriptor_table_player_2eproto_once,
      file_level_metadata_player_2eproto[3]);
}

// ===================================================================

class PlayerDataNty::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerDataNty>()._impl_._has_bits_);
  static const ::CRYSTAL_NET::service::PlayerData& playerdata(const PlayerDataNty* msg);
  static void set_has_playerdata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CRYSTAL_NET::service::PlayerData&
PlayerDataNty::_Internal::playerdata(const PlayerDataNty* msg) {
  return *msg->_impl_.playerdata_;
}
void PlayerDataNty::clear_playerdata() {
  if (_impl_.playerdata_ != nullptr) _impl_.playerdata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PlayerDataNty::PlayerDataNty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CRYSTAL_NET.service.PlayerDataNty)
}
PlayerDataNty::PlayerDataNty(const PlayerDataNty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerDataNty* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.playerdata_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_playerdata()) {
    _this->_impl_.playerdata_ = new ::CRYSTAL_NET::service::PlayerData(*from._impl_.playerdata_);
  }
  // @@protoc_insertion_point(copy_constructor:CRYSTAL_NET.service.PlayerDataNty)
}

inline void PlayerDataNty::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.playerdata_){nullptr}
  };
}

PlayerDataNty::~PlayerDataNty() {
  // @@protoc_insertion_point(destructor:CRYSTAL_NET.service.PlayerDataNty)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerDataNty::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.playerdata_;
}

void PlayerDataNty::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerDataNty::Clear() {
// @@protoc_insertion_point(message_clear_start:CRYSTAL_NET.service.PlayerDataNty)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.playerdata_ != nullptr);
    _impl_.playerdata_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerDataNty::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CRYSTAL_NET.service.PlayerData playerData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerDataNty::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRYSTAL_NET.service.PlayerDataNty)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .CRYSTAL_NET.service.PlayerData playerData = 1;
  if (_internal_has_playerdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::playerdata(this),
        _Internal::playerdata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRYSTAL_NET.service.PlayerDataNty)
  return target;
}

size_t PlayerDataNty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRYSTAL_NET.service.PlayerDataNty)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CRYSTAL_NET.service.PlayerData playerData = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.playerdata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerDataNty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerDataNty::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerDataNty::GetClassData() const { return &_class_data_; }


void PlayerDataNty::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerDataNty*>(&to_msg);
  auto& from = static_cast<const PlayerDataNty&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CRYSTAL_NET.service.PlayerDataNty)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_playerdata()) {
    _this->_internal_mutable_playerdata()->::CRYSTAL_NET::service::PlayerData::MergeFrom(
        from._internal_playerdata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerDataNty::CopyFrom(const PlayerDataNty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRYSTAL_NET.service.PlayerDataNty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDataNty::IsInitialized() const {
  return true;
}

void PlayerDataNty::InternalSwap(PlayerDataNty* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.playerdata_, other->_impl_.playerdata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerDataNty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_player_2eproto_getter, &descriptor_table_player_2eproto_once,
      file_level_metadata_player_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace service
}  // namespace CRYSTAL_NET
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CRYSTAL_NET::service::PlayerDataReq*
Arena::CreateMaybeMessage< ::CRYSTAL_NET::service::PlayerDataReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRYSTAL_NET::service::PlayerDataReq >(arena);
}
template<> PROTOBUF_NOINLINE ::CRYSTAL_NET::service::PlayerDataRes*
Arena::CreateMaybeMessage< ::CRYSTAL_NET::service::PlayerDataRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRYSTAL_NET::service::PlayerDataRes >(arena);
}
template<> PROTOBUF_NOINLINE ::CRYSTAL_NET::service::ModifyPlayerNameReq*
Arena::CreateMaybeMessage< ::CRYSTAL_NET::service::ModifyPlayerNameReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRYSTAL_NET::service::ModifyPlayerNameReq >(arena);
}
template<> PROTOBUF_NOINLINE ::CRYSTAL_NET::service::ModifyPlayerNameRes*
Arena::CreateMaybeMessage< ::CRYSTAL_NET::service::ModifyPlayerNameRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRYSTAL_NET::service::ModifyPlayerNameRes >(arena);
}
template<> PROTOBUF_NOINLINE ::CRYSTAL_NET::service::PlayerDataNty*
Arena::CreateMaybeMessage< ::CRYSTAL_NET::service::PlayerDataNty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRYSTAL_NET::service::PlayerDataNty >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
