#include <pch.h>
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.proto

#include <protocols/cplusplus/user.pb.h>
POOL_CREATE_OBJ_DEFAULT_IMPL(UserClientInfoNtyFactory);
POOL_CREATE_OBJ_DEFAULT_IMPL(ModifyPwdInfoFactory);
POOL_CREATE_OBJ_DEFAULT_IMPL(ModifyUserInfoReqFactory);
POOL_CREATE_OBJ_DEFAULT_IMPL(ModifyUserInfoResFactory);

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace CRYSTAL_NET {
namespace service {
PROTOBUF_CONSTEXPR UserClientInfoNty::UserClientInfoNty(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clientinfo_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserClientInfoNtyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserClientInfoNtyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserClientInfoNtyDefaultTypeInternal() {}
  union {
    UserClientInfoNty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserClientInfoNtyDefaultTypeInternal _UserClientInfoNty_default_instance_;
PROTOBUF_CONSTEXPR ModifyPwdInfo::ModifyPwdInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.oldpwd_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.newpwd_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModifyPwdInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModifyPwdInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModifyPwdInfoDefaultTypeInternal() {}
  union {
    ModifyPwdInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModifyPwdInfoDefaultTypeInternal _ModifyPwdInfo_default_instance_;
PROTOBUF_CONSTEXPR ModifyUserInfoReq::ModifyUserInfoReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ModifyInfo_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ModifyUserInfoReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModifyUserInfoReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModifyUserInfoReqDefaultTypeInternal() {}
  union {
    ModifyUserInfoReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModifyUserInfoReqDefaultTypeInternal _ModifyUserInfoReq_default_instance_;
PROTOBUF_CONSTEXPR ModifyUserInfoRes::ModifyUserInfoRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.errcode_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModifyUserInfoResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModifyUserInfoResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModifyUserInfoResDefaultTypeInternal() {}
  union {
    ModifyUserInfoRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModifyUserInfoResDefaultTypeInternal _ModifyUserInfoRes_default_instance_;
}  // namespace service
}  // namespace CRYSTAL_NET
static ::_pb::Metadata file_level_metadata_user_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_user_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_user_2eproto = nullptr;

const uint32_t TableStruct_user_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::UserClientInfoNty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::UserClientInfoNty, _impl_.clientinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::ModifyPwdInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::ModifyPwdInfo, _impl_.oldpwd_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::ModifyPwdInfo, _impl_.newpwd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::ModifyUserInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::ModifyUserInfoReq, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::ModifyUserInfoReq, _impl_.ModifyInfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::ModifyUserInfoRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::ModifyUserInfoRes, _impl_.errcode_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::CRYSTAL_NET::service::UserClientInfoNty)},
  { 7, -1, -1, sizeof(::CRYSTAL_NET::service::ModifyPwdInfo)},
  { 15, -1, -1, sizeof(::CRYSTAL_NET::service::ModifyUserInfoReq)},
  { 24, -1, -1, sizeof(::CRYSTAL_NET::service::ModifyUserInfoRes)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::CRYSTAL_NET::service::_UserClientInfoNty_default_instance_._instance,
  &::CRYSTAL_NET::service::_ModifyPwdInfo_default_instance_._instance,
  &::CRYSTAL_NET::service::_ModifyUserInfoReq_default_instance_._instance,
  &::CRYSTAL_NET::service::_ModifyUserInfoRes_default_instance_._instance,
};

const char descriptor_table_protodef_user_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nuser.proto\022\023CRYSTAL_NET.service\032\016com_u"
  "ser.proto\032\025com_client_user.proto\"L\n\021User"
  "ClientInfoNty\0227\n\nClientInfo\030\001 \001(\0132#.CRYS"
  "TAL_NET.service.ClientUserInfo\"/\n\rModify"
  "PwdInfo\022\016\n\006OldPwd\030\001 \001(\t\022\016\n\006NewPwd\030\002 \001(\t\""
  "l\n\021ModifyUserInfoReq\0225\n\007PwdInfo\030\001 \001(\0132\"."
  "CRYSTAL_NET.service.ModifyPwdInfoH\000\022\022\n\010N"
  "ickname\030\002 \001(\014H\000B\014\n\nModifyInfo\"$\n\021ModifyU"
  "serInfoRes\022\017\n\007ErrCode\030\001 \001(\021b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_user_2eproto_deps[2] = {
  &::descriptor_table_com_5fclient_5fuser_2eproto,
  &::descriptor_table_com_5fuser_2eproto,
};
static ::_pbi::once_flag descriptor_table_user_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_user_2eproto = {
    false, false, 355, descriptor_table_protodef_user_2eproto,
    "user.proto",
    &descriptor_table_user_2eproto_once, descriptor_table_user_2eproto_deps, 2, 4,
    schemas, file_default_instances, TableStruct_user_2eproto::offsets,
    file_level_metadata_user_2eproto, file_level_enum_descriptors_user_2eproto,
    file_level_service_descriptors_user_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_user_2eproto_getter() {
  return &descriptor_table_user_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_user_2eproto(&descriptor_table_user_2eproto);
namespace CRYSTAL_NET {
namespace service {

// ===================================================================

class UserClientInfoNty::_Internal {
 public:
  static const ::CRYSTAL_NET::service::ClientUserInfo& clientinfo(const UserClientInfoNty* msg);
};

const ::CRYSTAL_NET::service::ClientUserInfo&
UserClientInfoNty::_Internal::clientinfo(const UserClientInfoNty* msg) {
  return *msg->_impl_.clientinfo_;
}
void UserClientInfoNty::clear_clientinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.clientinfo_ != nullptr) {
    delete _impl_.clientinfo_;
  }
  _impl_.clientinfo_ = nullptr;
}
UserClientInfoNty::UserClientInfoNty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CRYSTAL_NET.service.UserClientInfoNty)
}
UserClientInfoNty::UserClientInfoNty(const UserClientInfoNty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserClientInfoNty* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clientinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_clientinfo()) {
    _this->_impl_.clientinfo_ = new ::CRYSTAL_NET::service::ClientUserInfo(*from._impl_.clientinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:CRYSTAL_NET.service.UserClientInfoNty)
}

inline void UserClientInfoNty::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clientinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UserClientInfoNty::~UserClientInfoNty() {
  // @@protoc_insertion_point(destructor:CRYSTAL_NET.service.UserClientInfoNty)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserClientInfoNty::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.clientinfo_;
}

void UserClientInfoNty::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserClientInfoNty::Clear() {
// @@protoc_insertion_point(message_clear_start:CRYSTAL_NET.service.UserClientInfoNty)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.clientinfo_ != nullptr) {
    delete _impl_.clientinfo_;
  }
  _impl_.clientinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserClientInfoNty::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .CRYSTAL_NET.service.ClientUserInfo ClientInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_clientinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserClientInfoNty::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRYSTAL_NET.service.UserClientInfoNty)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .CRYSTAL_NET.service.ClientUserInfo ClientInfo = 1;
  if (this->_internal_has_clientinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::clientinfo(this),
        _Internal::clientinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRYSTAL_NET.service.UserClientInfoNty)
  return target;
}

size_t UserClientInfoNty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRYSTAL_NET.service.UserClientInfoNty)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .CRYSTAL_NET.service.ClientUserInfo ClientInfo = 1;
  if (this->_internal_has_clientinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.clientinfo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserClientInfoNty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserClientInfoNty::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserClientInfoNty::GetClassData() const { return &_class_data_; }


void UserClientInfoNty::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserClientInfoNty*>(&to_msg);
  auto& from = static_cast<const UserClientInfoNty&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CRYSTAL_NET.service.UserClientInfoNty)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_clientinfo()) {
    _this->_internal_mutable_clientinfo()->::CRYSTAL_NET::service::ClientUserInfo::MergeFrom(
        from._internal_clientinfo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserClientInfoNty::CopyFrom(const UserClientInfoNty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRYSTAL_NET.service.UserClientInfoNty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserClientInfoNty::IsInitialized() const {
  return true;
}

void UserClientInfoNty::InternalSwap(UserClientInfoNty* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.clientinfo_, other->_impl_.clientinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserClientInfoNty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[0]);
}

// ===================================================================

class ModifyPwdInfo::_Internal {
 public:
};

ModifyPwdInfo::ModifyPwdInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CRYSTAL_NET.service.ModifyPwdInfo)
}
ModifyPwdInfo::ModifyPwdInfo(const ModifyPwdInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModifyPwdInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.oldpwd_){}
    , decltype(_impl_.newpwd_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.oldpwd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.oldpwd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_oldpwd().empty()) {
    _this->_impl_.oldpwd_.Set(from._internal_oldpwd(), 
      _this->GetArenaForAllocation());
  }
  _impl_.newpwd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newpwd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_newpwd().empty()) {
    _this->_impl_.newpwd_.Set(from._internal_newpwd(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CRYSTAL_NET.service.ModifyPwdInfo)
}

inline void ModifyPwdInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.oldpwd_){}
    , decltype(_impl_.newpwd_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.oldpwd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.oldpwd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.newpwd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newpwd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModifyPwdInfo::~ModifyPwdInfo() {
  // @@protoc_insertion_point(destructor:CRYSTAL_NET.service.ModifyPwdInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModifyPwdInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.oldpwd_.Destroy();
  _impl_.newpwd_.Destroy();
}

void ModifyPwdInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModifyPwdInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CRYSTAL_NET.service.ModifyPwdInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.oldpwd_.ClearToEmpty();
  _impl_.newpwd_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModifyPwdInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string OldPwd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_oldpwd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CRYSTAL_NET.service.ModifyPwdInfo.OldPwd"));
        } else
          goto handle_unusual;
        continue;
      // string NewPwd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_newpwd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CRYSTAL_NET.service.ModifyPwdInfo.NewPwd"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModifyPwdInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRYSTAL_NET.service.ModifyPwdInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string OldPwd = 1;
  if (!this->_internal_oldpwd().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_oldpwd().data(), static_cast<int>(this->_internal_oldpwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CRYSTAL_NET.service.ModifyPwdInfo.OldPwd");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_oldpwd(), target);
  }

  // string NewPwd = 2;
  if (!this->_internal_newpwd().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_newpwd().data(), static_cast<int>(this->_internal_newpwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CRYSTAL_NET.service.ModifyPwdInfo.NewPwd");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_newpwd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRYSTAL_NET.service.ModifyPwdInfo)
  return target;
}

size_t ModifyPwdInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRYSTAL_NET.service.ModifyPwdInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string OldPwd = 1;
  if (!this->_internal_oldpwd().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_oldpwd());
  }

  // string NewPwd = 2;
  if (!this->_internal_newpwd().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newpwd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModifyPwdInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModifyPwdInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModifyPwdInfo::GetClassData() const { return &_class_data_; }


void ModifyPwdInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModifyPwdInfo*>(&to_msg);
  auto& from = static_cast<const ModifyPwdInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CRYSTAL_NET.service.ModifyPwdInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_oldpwd().empty()) {
    _this->_internal_set_oldpwd(from._internal_oldpwd());
  }
  if (!from._internal_newpwd().empty()) {
    _this->_internal_set_newpwd(from._internal_newpwd());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModifyPwdInfo::CopyFrom(const ModifyPwdInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRYSTAL_NET.service.ModifyPwdInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyPwdInfo::IsInitialized() const {
  return true;
}

void ModifyPwdInfo::InternalSwap(ModifyPwdInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.oldpwd_, lhs_arena,
      &other->_impl_.oldpwd_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.newpwd_, lhs_arena,
      &other->_impl_.newpwd_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ModifyPwdInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[1]);
}

// ===================================================================

class ModifyUserInfoReq::_Internal {
 public:
  static const ::CRYSTAL_NET::service::ModifyPwdInfo& pwdinfo(const ModifyUserInfoReq* msg);
};

const ::CRYSTAL_NET::service::ModifyPwdInfo&
ModifyUserInfoReq::_Internal::pwdinfo(const ModifyUserInfoReq* msg) {
  return *msg->_impl_.ModifyInfo_.pwdinfo_;
}
void ModifyUserInfoReq::set_allocated_pwdinfo(::CRYSTAL_NET::service::ModifyPwdInfo* pwdinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ModifyInfo();
  if (pwdinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pwdinfo);
    if (message_arena != submessage_arena) {
      pwdinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pwdinfo, submessage_arena);
    }
    set_has_pwdinfo();
    _impl_.ModifyInfo_.pwdinfo_ = pwdinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:CRYSTAL_NET.service.ModifyUserInfoReq.PwdInfo)
}
ModifyUserInfoReq::ModifyUserInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CRYSTAL_NET.service.ModifyUserInfoReq)
}
ModifyUserInfoReq::ModifyUserInfoReq(const ModifyUserInfoReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModifyUserInfoReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ModifyInfo_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_ModifyInfo();
  switch (from.ModifyInfo_case()) {
    case kPwdInfo: {
      _this->_internal_mutable_pwdinfo()->::CRYSTAL_NET::service::ModifyPwdInfo::MergeFrom(
          from._internal_pwdinfo());
      break;
    }
    case kNickname: {
      _this->_internal_set_nickname(from._internal_nickname());
      break;
    }
    case MODIFYINFO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CRYSTAL_NET.service.ModifyUserInfoReq)
}

inline void ModifyUserInfoReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ModifyInfo_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_ModifyInfo();
}

ModifyUserInfoReq::~ModifyUserInfoReq() {
  // @@protoc_insertion_point(destructor:CRYSTAL_NET.service.ModifyUserInfoReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModifyUserInfoReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_ModifyInfo()) {
    clear_ModifyInfo();
  }
}

void ModifyUserInfoReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModifyUserInfoReq::clear_ModifyInfo() {
// @@protoc_insertion_point(one_of_clear_start:CRYSTAL_NET.service.ModifyUserInfoReq)
  switch (ModifyInfo_case()) {
    case kPwdInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.ModifyInfo_.pwdinfo_;
      }
      break;
    }
    case kNickname: {
      _impl_.ModifyInfo_.nickname_.Destroy();
      break;
    }
    case MODIFYINFO_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MODIFYINFO_NOT_SET;
}


void ModifyUserInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:CRYSTAL_NET.service.ModifyUserInfoReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_ModifyInfo();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModifyUserInfoReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .CRYSTAL_NET.service.ModifyPwdInfo PwdInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pwdinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModifyUserInfoReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRYSTAL_NET.service.ModifyUserInfoReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .CRYSTAL_NET.service.ModifyPwdInfo PwdInfo = 1;
  if (_internal_has_pwdinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pwdinfo(this),
        _Internal::pwdinfo(this).GetCachedSize(), target, stream);
  }

  // bytes Nickname = 2;
  if (_internal_has_nickname()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRYSTAL_NET.service.ModifyUserInfoReq)
  return target;
}

size_t ModifyUserInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRYSTAL_NET.service.ModifyUserInfoReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (ModifyInfo_case()) {
    // .CRYSTAL_NET.service.ModifyPwdInfo PwdInfo = 1;
    case kPwdInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ModifyInfo_.pwdinfo_);
      break;
    }
    // bytes Nickname = 2;
    case kNickname: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_nickname());
      break;
    }
    case MODIFYINFO_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModifyUserInfoReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModifyUserInfoReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModifyUserInfoReq::GetClassData() const { return &_class_data_; }


void ModifyUserInfoReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModifyUserInfoReq*>(&to_msg);
  auto& from = static_cast<const ModifyUserInfoReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CRYSTAL_NET.service.ModifyUserInfoReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.ModifyInfo_case()) {
    case kPwdInfo: {
      _this->_internal_mutable_pwdinfo()->::CRYSTAL_NET::service::ModifyPwdInfo::MergeFrom(
          from._internal_pwdinfo());
      break;
    }
    case kNickname: {
      _this->_internal_set_nickname(from._internal_nickname());
      break;
    }
    case MODIFYINFO_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModifyUserInfoReq::CopyFrom(const ModifyUserInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRYSTAL_NET.service.ModifyUserInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyUserInfoReq::IsInitialized() const {
  return true;
}

void ModifyUserInfoReq::InternalSwap(ModifyUserInfoReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.ModifyInfo_, other->_impl_.ModifyInfo_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModifyUserInfoReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[2]);
}

// ===================================================================

class ModifyUserInfoRes::_Internal {
 public:
};

ModifyUserInfoRes::ModifyUserInfoRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CRYSTAL_NET.service.ModifyUserInfoRes)
}
ModifyUserInfoRes::ModifyUserInfoRes(const ModifyUserInfoRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModifyUserInfoRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.errcode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.errcode_ = from._impl_.errcode_;
  // @@protoc_insertion_point(copy_constructor:CRYSTAL_NET.service.ModifyUserInfoRes)
}

inline void ModifyUserInfoRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.errcode_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ModifyUserInfoRes::~ModifyUserInfoRes() {
  // @@protoc_insertion_point(destructor:CRYSTAL_NET.service.ModifyUserInfoRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModifyUserInfoRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ModifyUserInfoRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModifyUserInfoRes::Clear() {
// @@protoc_insertion_point(message_clear_start:CRYSTAL_NET.service.ModifyUserInfoRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.errcode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModifyUserInfoRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 ErrCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.errcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModifyUserInfoRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRYSTAL_NET.service.ModifyUserInfoRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 ErrCode = 1;
  if (this->_internal_errcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_errcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRYSTAL_NET.service.ModifyUserInfoRes)
  return target;
}

size_t ModifyUserInfoRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRYSTAL_NET.service.ModifyUserInfoRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 ErrCode = 1;
  if (this->_internal_errcode() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_errcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModifyUserInfoRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModifyUserInfoRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModifyUserInfoRes::GetClassData() const { return &_class_data_; }


void ModifyUserInfoRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModifyUserInfoRes*>(&to_msg);
  auto& from = static_cast<const ModifyUserInfoRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CRYSTAL_NET.service.ModifyUserInfoRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_errcode() != 0) {
    _this->_internal_set_errcode(from._internal_errcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModifyUserInfoRes::CopyFrom(const ModifyUserInfoRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRYSTAL_NET.service.ModifyUserInfoRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyUserInfoRes::IsInitialized() const {
  return true;
}

void ModifyUserInfoRes::InternalSwap(ModifyUserInfoRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.errcode_, other->_impl_.errcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModifyUserInfoRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_user_2eproto_getter, &descriptor_table_user_2eproto_once,
      file_level_metadata_user_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace service
}  // namespace CRYSTAL_NET
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CRYSTAL_NET::service::UserClientInfoNty*
Arena::CreateMaybeMessage< ::CRYSTAL_NET::service::UserClientInfoNty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRYSTAL_NET::service::UserClientInfoNty >(arena);
}
template<> PROTOBUF_NOINLINE ::CRYSTAL_NET::service::ModifyPwdInfo*
Arena::CreateMaybeMessage< ::CRYSTAL_NET::service::ModifyPwdInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRYSTAL_NET::service::ModifyPwdInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CRYSTAL_NET::service::ModifyUserInfoReq*
Arena::CreateMaybeMessage< ::CRYSTAL_NET::service::ModifyUserInfoReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRYSTAL_NET::service::ModifyUserInfoReq >(arena);
}
template<> PROTOBUF_NOINLINE ::CRYSTAL_NET::service::ModifyUserInfoRes*
Arena::CreateMaybeMessage< ::CRYSTAL_NET::service::ModifyUserInfoRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRYSTAL_NET::service::ModifyUserInfoRes >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
