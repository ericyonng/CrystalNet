#include <pch.h>
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com_user.proto

#include <protocols/cplusplus/com_user.pb.h>
POOL_CREATE_OBJ_DEFAULT_IMPL(UserBaseInfoFactory);
POOL_CREATE_OBJ_DEFAULT_IMPL(LoginModeFactory);
POOL_CREATE_OBJ_DEFAULT_IMPL(RegisterUserInfoFactory);
POOL_CREATE_OBJ_DEFAULT_IMPL(LoginInfoFactory);
POOL_CREATE_OBJ_DEFAULT_IMPL(LogoutReasonFactory);
POOL_CREATE_OBJ_DEFAULT_IMPL(SimpleUserInfoFactory);

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace CRYSTAL_NET {
namespace service {
PROTOBUF_CONSTEXPR UserBaseInfo::UserBaseInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accountname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pwd_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pwdsalt_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lastloginip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lastloginphoneimei_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.createip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.createphoneimei_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bindmailaddr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.userid_)*/UInt64{0u}
  , /*decltype(_impl_.bindphone_)*/UInt64{0u}
  , /*decltype(_impl_.lastlogintime_)*/Int64{0}
  , /*decltype(_impl_.createtime_)*/Int64{0}
  , /*decltype(_impl_.lastpassdaytime_)*/Int64{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserBaseInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserBaseInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserBaseInfoDefaultTypeInternal() {}
  union {
    UserBaseInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserBaseInfoDefaultTypeInternal _UserBaseInfo_default_instance_;
PROTOBUF_CONSTEXPR LoginMode::LoginMode(
    ::_pbi::ConstantInitialized) {}
struct LoginModeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginModeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginModeDefaultTypeInternal() {}
  union {
    LoginMode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginModeDefaultTypeInternal _LoginMode_default_instance_;
PROTOBUF_CONSTEXPR RegisterUserInfo::RegisterUserInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accountname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pwd_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.createphoneimei_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterUserInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterUserInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterUserInfoDefaultTypeInternal() {}
  union {
    RegisterUserInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterUserInfoDefaultTypeInternal _RegisterUserInfo_default_instance_;
PROTOBUF_CONSTEXPR LoginInfo::LoginInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accountname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pwd_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.logintoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.loginphoneimei_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.targetip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.appid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cyphertext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.origintext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.loginmode_)*/0
  , /*decltype(_impl_.port_)*/0u
  , /*decltype(_impl_.versionid_)*/UInt64{0u}
  , /*decltype(_impl_.RegisterInfo_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct LoginInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginInfoDefaultTypeInternal() {}
  union {
    LoginInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginInfoDefaultTypeInternal _LoginInfo_default_instance_;
PROTOBUF_CONSTEXPR LogoutReason::LogoutReason(
    ::_pbi::ConstantInitialized) {}
struct LogoutReasonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogoutReasonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogoutReasonDefaultTypeInternal() {}
  union {
    LogoutReason _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogoutReasonDefaultTypeInternal _LogoutReason_default_instance_;
PROTOBUF_CONSTEXPR SimpleUserInfo::SimpleUserInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.userid_)*/UInt64{0u}
  , /*decltype(_impl_.bindphone_)*/UInt64{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SimpleUserInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimpleUserInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimpleUserInfoDefaultTypeInternal() {}
  union {
    SimpleUserInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimpleUserInfoDefaultTypeInternal _SimpleUserInfo_default_instance_;
}  // namespace service
}  // namespace CRYSTAL_NET
static ::_pb::Metadata file_level_metadata_com_5fuser_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_com_5fuser_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_com_5fuser_2eproto = nullptr;

const uint32_t TableStruct_com_5fuser_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::UserBaseInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::UserBaseInfo, _impl_.userid_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::UserBaseInfo, _impl_.accountname_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::UserBaseInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::UserBaseInfo, _impl_.nickname_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::UserBaseInfo, _impl_.pwd_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::UserBaseInfo, _impl_.pwdsalt_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::UserBaseInfo, _impl_.bindphone_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::UserBaseInfo, _impl_.lastlogintime_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::UserBaseInfo, _impl_.lastloginip_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::UserBaseInfo, _impl_.lastloginphoneimei_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::UserBaseInfo, _impl_.createip_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::UserBaseInfo, _impl_.createtime_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::UserBaseInfo, _impl_.createphoneimei_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::UserBaseInfo, _impl_.bindmailaddr_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::UserBaseInfo, _impl_.lastpassdaytime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::LoginMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::RegisterUserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::RegisterUserInfo, _impl_.accountname_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::RegisterUserInfo, _impl_.nickname_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::RegisterUserInfo, _impl_.pwd_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::RegisterUserInfo, _impl_.createphoneimei_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::LoginInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::LoginInfo, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::LoginInfo, _impl_.loginmode_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::LoginInfo, _impl_.accountname_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::LoginInfo, _impl_.pwd_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::LoginInfo, _impl_.logintoken_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::LoginInfo, _impl_.loginphoneimei_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::LoginInfo, _impl_.targetip_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::LoginInfo, _impl_.port_),
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::LoginInfo, _impl_.appid_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::LoginInfo, _impl_.cyphertext_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::LoginInfo, _impl_.origintext_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::LoginInfo, _impl_.versionid_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::LoginInfo, _impl_.RegisterInfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::LogoutReason, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::SimpleUserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::SimpleUserInfo, _impl_.userid_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::SimpleUserInfo, _impl_.nickname_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::SimpleUserInfo, _impl_.bindphone_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::CRYSTAL_NET::service::UserBaseInfo)},
  { 21, -1, -1, sizeof(::CRYSTAL_NET::service::LoginMode)},
  { 27, -1, -1, sizeof(::CRYSTAL_NET::service::RegisterUserInfo)},
  { 37, -1, -1, sizeof(::CRYSTAL_NET::service::LoginInfo)},
  { 56, -1, -1, sizeof(::CRYSTAL_NET::service::LogoutReason)},
  { 62, -1, -1, sizeof(::CRYSTAL_NET::service::SimpleUserInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::CRYSTAL_NET::service::_UserBaseInfo_default_instance_._instance,
  &::CRYSTAL_NET::service::_LoginMode_default_instance_._instance,
  &::CRYSTAL_NET::service::_RegisterUserInfo_default_instance_._instance,
  &::CRYSTAL_NET::service::_LoginInfo_default_instance_._instance,
  &::CRYSTAL_NET::service::_LogoutReason_default_instance_._instance,
  &::CRYSTAL_NET::service::_SimpleUserInfo_default_instance_._instance,
};

const char descriptor_table_protodef_com_5fuser_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016com_user.proto\022\023CRYSTAL_NET.service\"\272\002"
  "\n\014UserBaseInfo\022\016\n\006UserId\030\001 \001(\004\022\023\n\013Accoun"
  "tName\030\002 \001(\t\022\014\n\004Name\030\003 \001(\014\022\020\n\010Nickname\030\004 "
  "\001(\014\022\013\n\003Pwd\030\005 \001(\t\022\017\n\007PwdSalt\030\006 \001(\t\022\021\n\tBin"
  "dPhone\030\007 \001(\004\022\025\n\rLastLoginTime\030\010 \001(\022\022\023\n\013L"
  "astLoginIp\030\t \001(\t\022\032\n\022LastLoginPhoneImei\030\n"
  " \001(\t\022\020\n\010CreateIp\030\013 \001(\t\022\022\n\nCreateTime\030\014 \001"
  "(\022\022\027\n\017CreatePhoneImei\030\r \001(\t\022\024\n\014BindMailA"
  "ddr\030\016 \001(\t\022\027\n\017LastPassDayTime\030\017 \001(\022\"E\n\tLo"
  "ginMode\"8\n\005ENUMS\022\014\n\010PASSWORD\020\000\022\023\n\017USE_LO"
  "GIN_TOKEN\020\001\022\014\n\010REGISTER\020\002\"_\n\020RegisterUse"
  "rInfo\022\023\n\013AccountName\030\001 \001(\014\022\020\n\010Nickname\030\002"
  " \001(\014\022\013\n\003Pwd\030\003 \001(\t\022\027\n\017CreatePhoneImei\030\004 \001"
  "(\t\"\251\002\n\tLoginInfo\022\021\n\tLoginMode\030\001 \001(\021\022\023\n\013A"
  "ccountName\030\002 \001(\014\022\013\n\003Pwd\030\003 \001(\t\022\022\n\nLoginTo"
  "ken\030\004 \001(\t\022\026\n\016LoginPhoneImei\030\005 \001(\t\022\020\n\010Tar"
  "getIp\030\006 \001(\014\022\014\n\004Port\030\007 \001(\r\022A\n\020UserRegiste"
  "rInfo\030\010 \001(\0132%.CRYSTAL_NET.service.Regist"
  "erUserInfoH\000\022\r\n\005AppId\030\t \001(\t\022\022\n\ncypherTex"
  "t\030\n \001(\t\022\022\n\noriginText\030\013 \001(\t\022\021\n\tversionId"
  "\030\014 \001(\004B\016\n\014RegisterInfo\"\232\001\n\014LogoutReason\""
  "\211\001\n\005ENUMS\022\025\n\021LOGIN_OTHER_PLACE\020\000\022\020\n\014OTHE"
  "R_REASON\020\001\022\017\n\013USER_LOGOUT\020\002\022\r\n\tUSER_IDLE"
  "\020\003\022\013\n\007TIMEOUT\020\004\022\020\n\014CLOSE_SERVER\020\005\022\030\n\024LOG"
  "_IN_OTHER_ACCOUNT\020\006\"E\n\016SimpleUserInfo\022\016\n"
  "\006UserId\030\001 \001(\004\022\020\n\010Nickname\030\002 \001(\014\022\021\n\tBindP"
  "hone\030\003 \001(\004b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_com_5fuser_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_com_5fuser_2eproto = {
    false, false, 1058, descriptor_table_protodef_com_5fuser_2eproto,
    "com_user.proto",
    &descriptor_table_com_5fuser_2eproto_once, nullptr, 0, 6,
    schemas, file_default_instances, TableStruct_com_5fuser_2eproto::offsets,
    file_level_metadata_com_5fuser_2eproto, file_level_enum_descriptors_com_5fuser_2eproto,
    file_level_service_descriptors_com_5fuser_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_com_5fuser_2eproto_getter() {
  return &descriptor_table_com_5fuser_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_com_5fuser_2eproto(&descriptor_table_com_5fuser_2eproto);
namespace CRYSTAL_NET {
namespace service {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoginMode_ENUMS_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_com_5fuser_2eproto);
  return file_level_enum_descriptors_com_5fuser_2eproto[0];
}
bool LoginMode_ENUMS_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LoginMode_ENUMS LoginMode::PASSWORD;
constexpr LoginMode_ENUMS LoginMode::USE_LOGIN_TOKEN;
constexpr LoginMode_ENUMS LoginMode::REGISTER;
constexpr LoginMode_ENUMS LoginMode::ENUMS_MIN;
constexpr LoginMode_ENUMS LoginMode::ENUMS_MAX;
constexpr int LoginMode::ENUMS_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogoutReason_ENUMS_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_com_5fuser_2eproto);
  return file_level_enum_descriptors_com_5fuser_2eproto[1];
}
bool LogoutReason_ENUMS_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LogoutReason_ENUMS LogoutReason::LOGIN_OTHER_PLACE;
constexpr LogoutReason_ENUMS LogoutReason::OTHER_REASON;
constexpr LogoutReason_ENUMS LogoutReason::USER_LOGOUT;
constexpr LogoutReason_ENUMS LogoutReason::USER_IDLE;
constexpr LogoutReason_ENUMS LogoutReason::TIMEOUT;
constexpr LogoutReason_ENUMS LogoutReason::CLOSE_SERVER;
constexpr LogoutReason_ENUMS LogoutReason::LOG_IN_OTHER_ACCOUNT;
constexpr LogoutReason_ENUMS LogoutReason::ENUMS_MIN;
constexpr LogoutReason_ENUMS LogoutReason::ENUMS_MAX;
constexpr int LogoutReason::ENUMS_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class UserBaseInfo::_Internal {
 public:
};

UserBaseInfo::UserBaseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CRYSTAL_NET.service.UserBaseInfo)
}
UserBaseInfo::UserBaseInfo(const UserBaseInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserBaseInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accountname_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.pwd_){}
    , decltype(_impl_.pwdsalt_){}
    , decltype(_impl_.lastloginip_){}
    , decltype(_impl_.lastloginphoneimei_){}
    , decltype(_impl_.createip_){}
    , decltype(_impl_.createphoneimei_){}
    , decltype(_impl_.bindmailaddr_){}
    , decltype(_impl_.userid_){}
    , decltype(_impl_.bindphone_){}
    , decltype(_impl_.lastlogintime_){}
    , decltype(_impl_.createtime_){}
    , decltype(_impl_.lastpassdaytime_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.accountname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accountname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_accountname().empty()) {
    _this->_impl_.accountname_.Set(from._internal_accountname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pwd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pwd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pwd().empty()) {
    _this->_impl_.pwd_.Set(from._internal_pwd(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pwdsalt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pwdsalt_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pwdsalt().empty()) {
    _this->_impl_.pwdsalt_.Set(from._internal_pwdsalt(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lastloginip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lastloginip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lastloginip().empty()) {
    _this->_impl_.lastloginip_.Set(from._internal_lastloginip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lastloginphoneimei_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lastloginphoneimei_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lastloginphoneimei().empty()) {
    _this->_impl_.lastloginphoneimei_.Set(from._internal_lastloginphoneimei(), 
      _this->GetArenaForAllocation());
  }
  _impl_.createip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.createip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_createip().empty()) {
    _this->_impl_.createip_.Set(from._internal_createip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.createphoneimei_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.createphoneimei_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_createphoneimei().empty()) {
    _this->_impl_.createphoneimei_.Set(from._internal_createphoneimei(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bindmailaddr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bindmailaddr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bindmailaddr().empty()) {
    _this->_impl_.bindmailaddr_.Set(from._internal_bindmailaddr(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.userid_, &from._impl_.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lastpassdaytime_) -
    reinterpret_cast<char*>(&_impl_.userid_)) + sizeof(_impl_.lastpassdaytime_));
  // @@protoc_insertion_point(copy_constructor:CRYSTAL_NET.service.UserBaseInfo)
}

inline void UserBaseInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accountname_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.pwd_){}
    , decltype(_impl_.pwdsalt_){}
    , decltype(_impl_.lastloginip_){}
    , decltype(_impl_.lastloginphoneimei_){}
    , decltype(_impl_.createip_){}
    , decltype(_impl_.createphoneimei_){}
    , decltype(_impl_.bindmailaddr_){}
    , decltype(_impl_.userid_){UInt64{0u}}
    , decltype(_impl_.bindphone_){UInt64{0u}}
    , decltype(_impl_.lastlogintime_){Int64{0}}
    , decltype(_impl_.createtime_){Int64{0}}
    , decltype(_impl_.lastpassdaytime_){Int64{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.accountname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accountname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pwd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pwd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pwdsalt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pwdsalt_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lastloginip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lastloginip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lastloginphoneimei_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lastloginphoneimei_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.createip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.createip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.createphoneimei_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.createphoneimei_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bindmailaddr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bindmailaddr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserBaseInfo::~UserBaseInfo() {
  // @@protoc_insertion_point(destructor:CRYSTAL_NET.service.UserBaseInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserBaseInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accountname_.Destroy();
  _impl_.name_.Destroy();
  _impl_.nickname_.Destroy();
  _impl_.pwd_.Destroy();
  _impl_.pwdsalt_.Destroy();
  _impl_.lastloginip_.Destroy();
  _impl_.lastloginphoneimei_.Destroy();
  _impl_.createip_.Destroy();
  _impl_.createphoneimei_.Destroy();
  _impl_.bindmailaddr_.Destroy();
}

void UserBaseInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserBaseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CRYSTAL_NET.service.UserBaseInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accountname_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.nickname_.ClearToEmpty();
  _impl_.pwd_.ClearToEmpty();
  _impl_.pwdsalt_.ClearToEmpty();
  _impl_.lastloginip_.ClearToEmpty();
  _impl_.lastloginphoneimei_.ClearToEmpty();
  _impl_.createip_.ClearToEmpty();
  _impl_.createphoneimei_.ClearToEmpty();
  _impl_.bindmailaddr_.ClearToEmpty();
  ::memset(&_impl_.userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.lastpassdaytime_) -
      reinterpret_cast<char*>(&_impl_.userid_)) + sizeof(_impl_.lastpassdaytime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserBaseInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 UserId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string AccountName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_accountname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CRYSTAL_NET.service.UserBaseInfo.AccountName"));
        } else
          goto handle_unusual;
        continue;
      // bytes Name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Nickname = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Pwd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_pwd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CRYSTAL_NET.service.UserBaseInfo.Pwd"));
        } else
          goto handle_unusual;
        continue;
      // string PwdSalt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_pwdsalt();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CRYSTAL_NET.service.UserBaseInfo.PwdSalt"));
        } else
          goto handle_unusual;
        continue;
      // uint64 BindPhone = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.bindphone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 LastLoginTime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.lastlogintime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string LastLoginIp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_lastloginip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CRYSTAL_NET.service.UserBaseInfo.LastLoginIp"));
        } else
          goto handle_unusual;
        continue;
      // string LastLoginPhoneImei = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_lastloginphoneimei();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CRYSTAL_NET.service.UserBaseInfo.LastLoginPhoneImei"));
        } else
          goto handle_unusual;
        continue;
      // string CreateIp = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_createip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CRYSTAL_NET.service.UserBaseInfo.CreateIp"));
        } else
          goto handle_unusual;
        continue;
      // sint64 CreateTime = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.createtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string CreatePhoneImei = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_createphoneimei();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CRYSTAL_NET.service.UserBaseInfo.CreatePhoneImei"));
        } else
          goto handle_unusual;
        continue;
      // string BindMailAddr = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_bindmailaddr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CRYSTAL_NET.service.UserBaseInfo.BindMailAddr"));
        } else
          goto handle_unusual;
        continue;
      // sint64 LastPassDayTime = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.lastpassdaytime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserBaseInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRYSTAL_NET.service.UserBaseInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 UserId = 1;
  if (this->_internal_userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_userid(), target);
  }

  // string AccountName = 2;
  if (!this->_internal_accountname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accountname().data(), static_cast<int>(this->_internal_accountname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CRYSTAL_NET.service.UserBaseInfo.AccountName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_accountname(), target);
  }

  // bytes Name = 3;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_name(), target);
  }

  // bytes Nickname = 4;
  if (!this->_internal_nickname().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_nickname(), target);
  }

  // string Pwd = 5;
  if (!this->_internal_pwd().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pwd().data(), static_cast<int>(this->_internal_pwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CRYSTAL_NET.service.UserBaseInfo.Pwd");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_pwd(), target);
  }

  // string PwdSalt = 6;
  if (!this->_internal_pwdsalt().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pwdsalt().data(), static_cast<int>(this->_internal_pwdsalt().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CRYSTAL_NET.service.UserBaseInfo.PwdSalt");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_pwdsalt(), target);
  }

  // uint64 BindPhone = 7;
  if (this->_internal_bindphone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_bindphone(), target);
  }

  // sint64 LastLoginTime = 8;
  if (this->_internal_lastlogintime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(8, this->_internal_lastlogintime(), target);
  }

  // string LastLoginIp = 9;
  if (!this->_internal_lastloginip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lastloginip().data(), static_cast<int>(this->_internal_lastloginip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CRYSTAL_NET.service.UserBaseInfo.LastLoginIp");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_lastloginip(), target);
  }

  // string LastLoginPhoneImei = 10;
  if (!this->_internal_lastloginphoneimei().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lastloginphoneimei().data(), static_cast<int>(this->_internal_lastloginphoneimei().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CRYSTAL_NET.service.UserBaseInfo.LastLoginPhoneImei");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_lastloginphoneimei(), target);
  }

  // string CreateIp = 11;
  if (!this->_internal_createip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_createip().data(), static_cast<int>(this->_internal_createip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CRYSTAL_NET.service.UserBaseInfo.CreateIp");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_createip(), target);
  }

  // sint64 CreateTime = 12;
  if (this->_internal_createtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(12, this->_internal_createtime(), target);
  }

  // string CreatePhoneImei = 13;
  if (!this->_internal_createphoneimei().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_createphoneimei().data(), static_cast<int>(this->_internal_createphoneimei().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CRYSTAL_NET.service.UserBaseInfo.CreatePhoneImei");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_createphoneimei(), target);
  }

  // string BindMailAddr = 14;
  if (!this->_internal_bindmailaddr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bindmailaddr().data(), static_cast<int>(this->_internal_bindmailaddr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CRYSTAL_NET.service.UserBaseInfo.BindMailAddr");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_bindmailaddr(), target);
  }

  // sint64 LastPassDayTime = 15;
  if (this->_internal_lastpassdaytime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(15, this->_internal_lastpassdaytime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRYSTAL_NET.service.UserBaseInfo)
  return target;
}

size_t UserBaseInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRYSTAL_NET.service.UserBaseInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string AccountName = 2;
  if (!this->_internal_accountname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accountname());
  }

  // bytes Name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // bytes Nickname = 4;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nickname());
  }

  // string Pwd = 5;
  if (!this->_internal_pwd().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pwd());
  }

  // string PwdSalt = 6;
  if (!this->_internal_pwdsalt().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pwdsalt());
  }

  // string LastLoginIp = 9;
  if (!this->_internal_lastloginip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lastloginip());
  }

  // string LastLoginPhoneImei = 10;
  if (!this->_internal_lastloginphoneimei().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lastloginphoneimei());
  }

  // string CreateIp = 11;
  if (!this->_internal_createip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_createip());
  }

  // string CreatePhoneImei = 13;
  if (!this->_internal_createphoneimei().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_createphoneimei());
  }

  // string BindMailAddr = 14;
  if (!this->_internal_bindmailaddr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bindmailaddr());
  }

  // uint64 UserId = 1;
  if (this->_internal_userid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_userid());
  }

  // uint64 BindPhone = 7;
  if (this->_internal_bindphone() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bindphone());
  }

  // sint64 LastLoginTime = 8;
  if (this->_internal_lastlogintime() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_lastlogintime());
  }

  // sint64 CreateTime = 12;
  if (this->_internal_createtime() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_createtime());
  }

  // sint64 LastPassDayTime = 15;
  if (this->_internal_lastpassdaytime() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_lastpassdaytime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserBaseInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserBaseInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserBaseInfo::GetClassData() const { return &_class_data_; }


void UserBaseInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserBaseInfo*>(&to_msg);
  auto& from = static_cast<const UserBaseInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CRYSTAL_NET.service.UserBaseInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_accountname().empty()) {
    _this->_internal_set_accountname(from._internal_accountname());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  if (!from._internal_pwd().empty()) {
    _this->_internal_set_pwd(from._internal_pwd());
  }
  if (!from._internal_pwdsalt().empty()) {
    _this->_internal_set_pwdsalt(from._internal_pwdsalt());
  }
  if (!from._internal_lastloginip().empty()) {
    _this->_internal_set_lastloginip(from._internal_lastloginip());
  }
  if (!from._internal_lastloginphoneimei().empty()) {
    _this->_internal_set_lastloginphoneimei(from._internal_lastloginphoneimei());
  }
  if (!from._internal_createip().empty()) {
    _this->_internal_set_createip(from._internal_createip());
  }
  if (!from._internal_createphoneimei().empty()) {
    _this->_internal_set_createphoneimei(from._internal_createphoneimei());
  }
  if (!from._internal_bindmailaddr().empty()) {
    _this->_internal_set_bindmailaddr(from._internal_bindmailaddr());
  }
  if (from._internal_userid() != 0) {
    _this->_internal_set_userid(from._internal_userid());
  }
  if (from._internal_bindphone() != 0) {
    _this->_internal_set_bindphone(from._internal_bindphone());
  }
  if (from._internal_lastlogintime() != 0) {
    _this->_internal_set_lastlogintime(from._internal_lastlogintime());
  }
  if (from._internal_createtime() != 0) {
    _this->_internal_set_createtime(from._internal_createtime());
  }
  if (from._internal_lastpassdaytime() != 0) {
    _this->_internal_set_lastpassdaytime(from._internal_lastpassdaytime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserBaseInfo::CopyFrom(const UserBaseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRYSTAL_NET.service.UserBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserBaseInfo::IsInitialized() const {
  return true;
}

void UserBaseInfo::InternalSwap(UserBaseInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accountname_, lhs_arena,
      &other->_impl_.accountname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pwd_, lhs_arena,
      &other->_impl_.pwd_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pwdsalt_, lhs_arena,
      &other->_impl_.pwdsalt_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lastloginip_, lhs_arena,
      &other->_impl_.lastloginip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lastloginphoneimei_, lhs_arena,
      &other->_impl_.lastloginphoneimei_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.createip_, lhs_arena,
      &other->_impl_.createip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.createphoneimei_, lhs_arena,
      &other->_impl_.createphoneimei_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bindmailaddr_, lhs_arena,
      &other->_impl_.bindmailaddr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserBaseInfo, _impl_.lastpassdaytime_)
      + sizeof(UserBaseInfo::_impl_.lastpassdaytime_)
      - PROTOBUF_FIELD_OFFSET(UserBaseInfo, _impl_.userid_)>(
          reinterpret_cast<char*>(&_impl_.userid_),
          reinterpret_cast<char*>(&other->_impl_.userid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserBaseInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_com_5fuser_2eproto_getter, &descriptor_table_com_5fuser_2eproto_once,
      file_level_metadata_com_5fuser_2eproto[0]);
}

// ===================================================================

class LoginMode::_Internal {
 public:
};

LoginMode::LoginMode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CRYSTAL_NET.service.LoginMode)
}
LoginMode::LoginMode(const LoginMode& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  LoginMode* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CRYSTAL_NET.service.LoginMode)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginMode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginMode::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata LoginMode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_com_5fuser_2eproto_getter, &descriptor_table_com_5fuser_2eproto_once,
      file_level_metadata_com_5fuser_2eproto[1]);
}

// ===================================================================

class RegisterUserInfo::_Internal {
 public:
};

RegisterUserInfo::RegisterUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CRYSTAL_NET.service.RegisterUserInfo)
}
RegisterUserInfo::RegisterUserInfo(const RegisterUserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterUserInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accountname_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.pwd_){}
    , decltype(_impl_.createphoneimei_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.accountname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accountname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_accountname().empty()) {
    _this->_impl_.accountname_.Set(from._internal_accountname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pwd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pwd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pwd().empty()) {
    _this->_impl_.pwd_.Set(from._internal_pwd(), 
      _this->GetArenaForAllocation());
  }
  _impl_.createphoneimei_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.createphoneimei_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_createphoneimei().empty()) {
    _this->_impl_.createphoneimei_.Set(from._internal_createphoneimei(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CRYSTAL_NET.service.RegisterUserInfo)
}

inline void RegisterUserInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accountname_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.pwd_){}
    , decltype(_impl_.createphoneimei_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.accountname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accountname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pwd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pwd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.createphoneimei_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.createphoneimei_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegisterUserInfo::~RegisterUserInfo() {
  // @@protoc_insertion_point(destructor:CRYSTAL_NET.service.RegisterUserInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterUserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accountname_.Destroy();
  _impl_.nickname_.Destroy();
  _impl_.pwd_.Destroy();
  _impl_.createphoneimei_.Destroy();
}

void RegisterUserInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterUserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CRYSTAL_NET.service.RegisterUserInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accountname_.ClearToEmpty();
  _impl_.nickname_.ClearToEmpty();
  _impl_.pwd_.ClearToEmpty();
  _impl_.createphoneimei_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterUserInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes AccountName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_accountname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Pwd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_pwd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CRYSTAL_NET.service.RegisterUserInfo.Pwd"));
        } else
          goto handle_unusual;
        continue;
      // string CreatePhoneImei = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_createphoneimei();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CRYSTAL_NET.service.RegisterUserInfo.CreatePhoneImei"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterUserInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRYSTAL_NET.service.RegisterUserInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes AccountName = 1;
  if (!this->_internal_accountname().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_accountname(), target);
  }

  // bytes Nickname = 2;
  if (!this->_internal_nickname().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  // string Pwd = 3;
  if (!this->_internal_pwd().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pwd().data(), static_cast<int>(this->_internal_pwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CRYSTAL_NET.service.RegisterUserInfo.Pwd");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_pwd(), target);
  }

  // string CreatePhoneImei = 4;
  if (!this->_internal_createphoneimei().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_createphoneimei().data(), static_cast<int>(this->_internal_createphoneimei().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CRYSTAL_NET.service.RegisterUserInfo.CreatePhoneImei");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_createphoneimei(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRYSTAL_NET.service.RegisterUserInfo)
  return target;
}

size_t RegisterUserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRYSTAL_NET.service.RegisterUserInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes AccountName = 1;
  if (!this->_internal_accountname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_accountname());
  }

  // bytes Nickname = 2;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nickname());
  }

  // string Pwd = 3;
  if (!this->_internal_pwd().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pwd());
  }

  // string CreatePhoneImei = 4;
  if (!this->_internal_createphoneimei().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_createphoneimei());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterUserInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterUserInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterUserInfo::GetClassData() const { return &_class_data_; }


void RegisterUserInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterUserInfo*>(&to_msg);
  auto& from = static_cast<const RegisterUserInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CRYSTAL_NET.service.RegisterUserInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_accountname().empty()) {
    _this->_internal_set_accountname(from._internal_accountname());
  }
  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  if (!from._internal_pwd().empty()) {
    _this->_internal_set_pwd(from._internal_pwd());
  }
  if (!from._internal_createphoneimei().empty()) {
    _this->_internal_set_createphoneimei(from._internal_createphoneimei());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterUserInfo::CopyFrom(const RegisterUserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRYSTAL_NET.service.RegisterUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterUserInfo::IsInitialized() const {
  return true;
}

void RegisterUserInfo::InternalSwap(RegisterUserInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accountname_, lhs_arena,
      &other->_impl_.accountname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pwd_, lhs_arena,
      &other->_impl_.pwd_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.createphoneimei_, lhs_arena,
      &other->_impl_.createphoneimei_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterUserInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_com_5fuser_2eproto_getter, &descriptor_table_com_5fuser_2eproto_once,
      file_level_metadata_com_5fuser_2eproto[2]);
}

// ===================================================================

class LoginInfo::_Internal {
 public:
  static const ::CRYSTAL_NET::service::RegisterUserInfo& userregisterinfo(const LoginInfo* msg);
};

const ::CRYSTAL_NET::service::RegisterUserInfo&
LoginInfo::_Internal::userregisterinfo(const LoginInfo* msg) {
  return *msg->_impl_.RegisterInfo_.userregisterinfo_;
}
void LoginInfo::set_allocated_userregisterinfo(::CRYSTAL_NET::service::RegisterUserInfo* userregisterinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_RegisterInfo();
  if (userregisterinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(userregisterinfo);
    if (message_arena != submessage_arena) {
      userregisterinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userregisterinfo, submessage_arena);
    }
    set_has_userregisterinfo();
    _impl_.RegisterInfo_.userregisterinfo_ = userregisterinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:CRYSTAL_NET.service.LoginInfo.UserRegisterInfo)
}
LoginInfo::LoginInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CRYSTAL_NET.service.LoginInfo)
}
LoginInfo::LoginInfo(const LoginInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoginInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accountname_){}
    , decltype(_impl_.pwd_){}
    , decltype(_impl_.logintoken_){}
    , decltype(_impl_.loginphoneimei_){}
    , decltype(_impl_.targetip_){}
    , decltype(_impl_.appid_){}
    , decltype(_impl_.cyphertext_){}
    , decltype(_impl_.origintext_){}
    , decltype(_impl_.loginmode_){}
    , decltype(_impl_.port_){}
    , decltype(_impl_.versionid_){}
    , decltype(_impl_.RegisterInfo_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.accountname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accountname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_accountname().empty()) {
    _this->_impl_.accountname_.Set(from._internal_accountname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pwd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pwd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pwd().empty()) {
    _this->_impl_.pwd_.Set(from._internal_pwd(), 
      _this->GetArenaForAllocation());
  }
  _impl_.logintoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.logintoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_logintoken().empty()) {
    _this->_impl_.logintoken_.Set(from._internal_logintoken(), 
      _this->GetArenaForAllocation());
  }
  _impl_.loginphoneimei_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.loginphoneimei_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_loginphoneimei().empty()) {
    _this->_impl_.loginphoneimei_.Set(from._internal_loginphoneimei(), 
      _this->GetArenaForAllocation());
  }
  _impl_.targetip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.targetip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_targetip().empty()) {
    _this->_impl_.targetip_.Set(from._internal_targetip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.appid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_appid().empty()) {
    _this->_impl_.appid_.Set(from._internal_appid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cyphertext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cyphertext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cyphertext().empty()) {
    _this->_impl_.cyphertext_.Set(from._internal_cyphertext(), 
      _this->GetArenaForAllocation());
  }
  _impl_.origintext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.origintext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_origintext().empty()) {
    _this->_impl_.origintext_.Set(from._internal_origintext(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.loginmode_, &from._impl_.loginmode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.versionid_) -
    reinterpret_cast<char*>(&_impl_.loginmode_)) + sizeof(_impl_.versionid_));
  clear_has_RegisterInfo();
  switch (from.RegisterInfo_case()) {
    case kUserRegisterInfo: {
      _this->_internal_mutable_userregisterinfo()->::CRYSTAL_NET::service::RegisterUserInfo::MergeFrom(
          from._internal_userregisterinfo());
      break;
    }
    case REGISTERINFO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CRYSTAL_NET.service.LoginInfo)
}

inline void LoginInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accountname_){}
    , decltype(_impl_.pwd_){}
    , decltype(_impl_.logintoken_){}
    , decltype(_impl_.loginphoneimei_){}
    , decltype(_impl_.targetip_){}
    , decltype(_impl_.appid_){}
    , decltype(_impl_.cyphertext_){}
    , decltype(_impl_.origintext_){}
    , decltype(_impl_.loginmode_){0}
    , decltype(_impl_.port_){0u}
    , decltype(_impl_.versionid_){UInt64{0u}}
    , decltype(_impl_.RegisterInfo_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.accountname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accountname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pwd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pwd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.logintoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.logintoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.loginphoneimei_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.loginphoneimei_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.targetip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.targetip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.appid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.appid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cyphertext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cyphertext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.origintext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.origintext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_RegisterInfo();
}

LoginInfo::~LoginInfo() {
  // @@protoc_insertion_point(destructor:CRYSTAL_NET.service.LoginInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accountname_.Destroy();
  _impl_.pwd_.Destroy();
  _impl_.logintoken_.Destroy();
  _impl_.loginphoneimei_.Destroy();
  _impl_.targetip_.Destroy();
  _impl_.appid_.Destroy();
  _impl_.cyphertext_.Destroy();
  _impl_.origintext_.Destroy();
  if (has_RegisterInfo()) {
    clear_RegisterInfo();
  }
}

void LoginInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoginInfo::clear_RegisterInfo() {
// @@protoc_insertion_point(one_of_clear_start:CRYSTAL_NET.service.LoginInfo)
  switch (RegisterInfo_case()) {
    case kUserRegisterInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.RegisterInfo_.userregisterinfo_;
      }
      break;
    }
    case REGISTERINFO_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = REGISTERINFO_NOT_SET;
}


void LoginInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CRYSTAL_NET.service.LoginInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accountname_.ClearToEmpty();
  _impl_.pwd_.ClearToEmpty();
  _impl_.logintoken_.ClearToEmpty();
  _impl_.loginphoneimei_.ClearToEmpty();
  _impl_.targetip_.ClearToEmpty();
  _impl_.appid_.ClearToEmpty();
  _impl_.cyphertext_.ClearToEmpty();
  _impl_.origintext_.ClearToEmpty();
  ::memset(&_impl_.loginmode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.versionid_) -
      reinterpret_cast<char*>(&_impl_.loginmode_)) + sizeof(_impl_.versionid_));
  clear_RegisterInfo();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 LoginMode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.loginmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes AccountName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_accountname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Pwd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_pwd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CRYSTAL_NET.service.LoginInfo.Pwd"));
        } else
          goto handle_unusual;
        continue;
      // string LoginToken = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_logintoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CRYSTAL_NET.service.LoginInfo.LoginToken"));
        } else
          goto handle_unusual;
        continue;
      // string LoginPhoneImei = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_loginphoneimei();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CRYSTAL_NET.service.LoginInfo.LoginPhoneImei"));
        } else
          goto handle_unusual;
        continue;
      // bytes TargetIp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_targetip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Port = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CRYSTAL_NET.service.RegisterUserInfo UserRegisterInfo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_userregisterinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string AppId = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_appid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CRYSTAL_NET.service.LoginInfo.AppId"));
        } else
          goto handle_unusual;
        continue;
      // string cypherText = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_cyphertext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CRYSTAL_NET.service.LoginInfo.cypherText"));
        } else
          goto handle_unusual;
        continue;
      // string originText = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_origintext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CRYSTAL_NET.service.LoginInfo.originText"));
        } else
          goto handle_unusual;
        continue;
      // uint64 versionId = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.versionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRYSTAL_NET.service.LoginInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 LoginMode = 1;
  if (this->_internal_loginmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_loginmode(), target);
  }

  // bytes AccountName = 2;
  if (!this->_internal_accountname().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_accountname(), target);
  }

  // string Pwd = 3;
  if (!this->_internal_pwd().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pwd().data(), static_cast<int>(this->_internal_pwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CRYSTAL_NET.service.LoginInfo.Pwd");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_pwd(), target);
  }

  // string LoginToken = 4;
  if (!this->_internal_logintoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logintoken().data(), static_cast<int>(this->_internal_logintoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CRYSTAL_NET.service.LoginInfo.LoginToken");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_logintoken(), target);
  }

  // string LoginPhoneImei = 5;
  if (!this->_internal_loginphoneimei().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_loginphoneimei().data(), static_cast<int>(this->_internal_loginphoneimei().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CRYSTAL_NET.service.LoginInfo.LoginPhoneImei");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_loginphoneimei(), target);
  }

  // bytes TargetIp = 6;
  if (!this->_internal_targetip().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_targetip(), target);
  }

  // uint32 Port = 7;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_port(), target);
  }

  // .CRYSTAL_NET.service.RegisterUserInfo UserRegisterInfo = 8;
  if (_internal_has_userregisterinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::userregisterinfo(this),
        _Internal::userregisterinfo(this).GetCachedSize(), target, stream);
  }

  // string AppId = 9;
  if (!this->_internal_appid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_appid().data(), static_cast<int>(this->_internal_appid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CRYSTAL_NET.service.LoginInfo.AppId");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_appid(), target);
  }

  // string cypherText = 10;
  if (!this->_internal_cyphertext().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cyphertext().data(), static_cast<int>(this->_internal_cyphertext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CRYSTAL_NET.service.LoginInfo.cypherText");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_cyphertext(), target);
  }

  // string originText = 11;
  if (!this->_internal_origintext().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_origintext().data(), static_cast<int>(this->_internal_origintext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CRYSTAL_NET.service.LoginInfo.originText");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_origintext(), target);
  }

  // uint64 versionId = 12;
  if (this->_internal_versionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(12, this->_internal_versionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRYSTAL_NET.service.LoginInfo)
  return target;
}

size_t LoginInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRYSTAL_NET.service.LoginInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes AccountName = 2;
  if (!this->_internal_accountname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_accountname());
  }

  // string Pwd = 3;
  if (!this->_internal_pwd().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pwd());
  }

  // string LoginToken = 4;
  if (!this->_internal_logintoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_logintoken());
  }

  // string LoginPhoneImei = 5;
  if (!this->_internal_loginphoneimei().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_loginphoneimei());
  }

  // bytes TargetIp = 6;
  if (!this->_internal_targetip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_targetip());
  }

  // string AppId = 9;
  if (!this->_internal_appid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_appid());
  }

  // string cypherText = 10;
  if (!this->_internal_cyphertext().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cyphertext());
  }

  // string originText = 11;
  if (!this->_internal_origintext().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_origintext());
  }

  // sint32 LoginMode = 1;
  if (this->_internal_loginmode() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_loginmode());
  }

  // uint32 Port = 7;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  // uint64 versionId = 12;
  if (this->_internal_versionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_versionid());
  }

  switch (RegisterInfo_case()) {
    // .CRYSTAL_NET.service.RegisterUserInfo UserRegisterInfo = 8;
    case kUserRegisterInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.RegisterInfo_.userregisterinfo_);
      break;
    }
    case REGISTERINFO_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoginInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginInfo::GetClassData() const { return &_class_data_; }


void LoginInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoginInfo*>(&to_msg);
  auto& from = static_cast<const LoginInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CRYSTAL_NET.service.LoginInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_accountname().empty()) {
    _this->_internal_set_accountname(from._internal_accountname());
  }
  if (!from._internal_pwd().empty()) {
    _this->_internal_set_pwd(from._internal_pwd());
  }
  if (!from._internal_logintoken().empty()) {
    _this->_internal_set_logintoken(from._internal_logintoken());
  }
  if (!from._internal_loginphoneimei().empty()) {
    _this->_internal_set_loginphoneimei(from._internal_loginphoneimei());
  }
  if (!from._internal_targetip().empty()) {
    _this->_internal_set_targetip(from._internal_targetip());
  }
  if (!from._internal_appid().empty()) {
    _this->_internal_set_appid(from._internal_appid());
  }
  if (!from._internal_cyphertext().empty()) {
    _this->_internal_set_cyphertext(from._internal_cyphertext());
  }
  if (!from._internal_origintext().empty()) {
    _this->_internal_set_origintext(from._internal_origintext());
  }
  if (from._internal_loginmode() != 0) {
    _this->_internal_set_loginmode(from._internal_loginmode());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  if (from._internal_versionid() != 0) {
    _this->_internal_set_versionid(from._internal_versionid());
  }
  switch (from.RegisterInfo_case()) {
    case kUserRegisterInfo: {
      _this->_internal_mutable_userregisterinfo()->::CRYSTAL_NET::service::RegisterUserInfo::MergeFrom(
          from._internal_userregisterinfo());
      break;
    }
    case REGISTERINFO_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginInfo::CopyFrom(const LoginInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRYSTAL_NET.service.LoginInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginInfo::IsInitialized() const {
  return true;
}

void LoginInfo::InternalSwap(LoginInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accountname_, lhs_arena,
      &other->_impl_.accountname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pwd_, lhs_arena,
      &other->_impl_.pwd_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.logintoken_, lhs_arena,
      &other->_impl_.logintoken_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.loginphoneimei_, lhs_arena,
      &other->_impl_.loginphoneimei_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.targetip_, lhs_arena,
      &other->_impl_.targetip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.appid_, lhs_arena,
      &other->_impl_.appid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cyphertext_, lhs_arena,
      &other->_impl_.cyphertext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.origintext_, lhs_arena,
      &other->_impl_.origintext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoginInfo, _impl_.versionid_)
      + sizeof(LoginInfo::_impl_.versionid_)
      - PROTOBUF_FIELD_OFFSET(LoginInfo, _impl_.loginmode_)>(
          reinterpret_cast<char*>(&_impl_.loginmode_),
          reinterpret_cast<char*>(&other->_impl_.loginmode_));
  swap(_impl_.RegisterInfo_, other->_impl_.RegisterInfo_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_com_5fuser_2eproto_getter, &descriptor_table_com_5fuser_2eproto_once,
      file_level_metadata_com_5fuser_2eproto[3]);
}

// ===================================================================

class LogoutReason::_Internal {
 public:
};

LogoutReason::LogoutReason(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CRYSTAL_NET.service.LogoutReason)
}
LogoutReason::LogoutReason(const LogoutReason& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  LogoutReason* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CRYSTAL_NET.service.LogoutReason)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogoutReason::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogoutReason::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata LogoutReason::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_com_5fuser_2eproto_getter, &descriptor_table_com_5fuser_2eproto_once,
      file_level_metadata_com_5fuser_2eproto[4]);
}

// ===================================================================

class SimpleUserInfo::_Internal {
 public:
};

SimpleUserInfo::SimpleUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CRYSTAL_NET.service.SimpleUserInfo)
}
SimpleUserInfo::SimpleUserInfo(const SimpleUserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SimpleUserInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nickname_){}
    , decltype(_impl_.userid_){}
    , decltype(_impl_.bindphone_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.userid_, &from._impl_.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bindphone_) -
    reinterpret_cast<char*>(&_impl_.userid_)) + sizeof(_impl_.bindphone_));
  // @@protoc_insertion_point(copy_constructor:CRYSTAL_NET.service.SimpleUserInfo)
}

inline void SimpleUserInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nickname_){}
    , decltype(_impl_.userid_){UInt64{0u}}
    , decltype(_impl_.bindphone_){UInt64{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SimpleUserInfo::~SimpleUserInfo() {
  // @@protoc_insertion_point(destructor:CRYSTAL_NET.service.SimpleUserInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SimpleUserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nickname_.Destroy();
}

void SimpleUserInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SimpleUserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CRYSTAL_NET.service.SimpleUserInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nickname_.ClearToEmpty();
  ::memset(&_impl_.userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bindphone_) -
      reinterpret_cast<char*>(&_impl_.userid_)) + sizeof(_impl_.bindphone_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleUserInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 UserId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 BindPhone = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.bindphone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimpleUserInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRYSTAL_NET.service.SimpleUserInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 UserId = 1;
  if (this->_internal_userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_userid(), target);
  }

  // bytes Nickname = 2;
  if (!this->_internal_nickname().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  // uint64 BindPhone = 3;
  if (this->_internal_bindphone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_bindphone(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRYSTAL_NET.service.SimpleUserInfo)
  return target;
}

size_t SimpleUserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRYSTAL_NET.service.SimpleUserInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Nickname = 2;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nickname());
  }

  // uint64 UserId = 1;
  if (this->_internal_userid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_userid());
  }

  // uint64 BindPhone = 3;
  if (this->_internal_bindphone() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bindphone());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimpleUserInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SimpleUserInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimpleUserInfo::GetClassData() const { return &_class_data_; }


void SimpleUserInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SimpleUserInfo*>(&to_msg);
  auto& from = static_cast<const SimpleUserInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CRYSTAL_NET.service.SimpleUserInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  if (from._internal_userid() != 0) {
    _this->_internal_set_userid(from._internal_userid());
  }
  if (from._internal_bindphone() != 0) {
    _this->_internal_set_bindphone(from._internal_bindphone());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimpleUserInfo::CopyFrom(const SimpleUserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRYSTAL_NET.service.SimpleUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleUserInfo::IsInitialized() const {
  return true;
}

void SimpleUserInfo::InternalSwap(SimpleUserInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimpleUserInfo, _impl_.bindphone_)
      + sizeof(SimpleUserInfo::_impl_.bindphone_)
      - PROTOBUF_FIELD_OFFSET(SimpleUserInfo, _impl_.userid_)>(
          reinterpret_cast<char*>(&_impl_.userid_),
          reinterpret_cast<char*>(&other->_impl_.userid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleUserInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_com_5fuser_2eproto_getter, &descriptor_table_com_5fuser_2eproto_once,
      file_level_metadata_com_5fuser_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace service
}  // namespace CRYSTAL_NET
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CRYSTAL_NET::service::UserBaseInfo*
Arena::CreateMaybeMessage< ::CRYSTAL_NET::service::UserBaseInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRYSTAL_NET::service::UserBaseInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CRYSTAL_NET::service::LoginMode*
Arena::CreateMaybeMessage< ::CRYSTAL_NET::service::LoginMode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRYSTAL_NET::service::LoginMode >(arena);
}
template<> PROTOBUF_NOINLINE ::CRYSTAL_NET::service::RegisterUserInfo*
Arena::CreateMaybeMessage< ::CRYSTAL_NET::service::RegisterUserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRYSTAL_NET::service::RegisterUserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CRYSTAL_NET::service::LoginInfo*
Arena::CreateMaybeMessage< ::CRYSTAL_NET::service::LoginInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRYSTAL_NET::service::LoginInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CRYSTAL_NET::service::LogoutReason*
Arena::CreateMaybeMessage< ::CRYSTAL_NET::service::LogoutReason >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRYSTAL_NET::service::LogoutReason >(arena);
}
template<> PROTOBUF_NOINLINE ::CRYSTAL_NET::service::SimpleUserInfo*
Arena::CreateMaybeMessage< ::CRYSTAL_NET::service::SimpleUserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRYSTAL_NET::service::SimpleUserInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
