// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com_client_user.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_com_5fclient_5fuser_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_com_5fclient_5fuser_2eproto

// KERNEL_INCLUDED
#include <kernel/kernel.h>
#include <google/protobuf/util/json_util.h>
#include <google/protobuf/text_format.h>

#ifdef GetMessage
 #undef GetMessage
#endif


#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_com_5fclient_5fuser_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_com_5fclient_5fuser_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_com_5fclient_5fuser_2eproto;
namespace CRYSTAL_NET {
namespace service {
class ClientUserInfo;
struct ClientUserInfoDefaultTypeInternal;
extern ClientUserInfoDefaultTypeInternal _ClientUserInfo_default_instance_;
class ClientUserStatus;
struct ClientUserStatusDefaultTypeInternal;
extern ClientUserStatusDefaultTypeInternal _ClientUserStatus_default_instance_;
}  // namespace service
}  // namespace CRYSTAL_NET
PROTOBUF_NAMESPACE_OPEN
template<> ::CRYSTAL_NET::service::ClientUserInfo* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::ClientUserInfo>(Arena*);
template<> ::CRYSTAL_NET::service::ClientUserStatus* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::ClientUserStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CRYSTAL_NET {
namespace service {

enum ClientUserStatus_ENUMS : int {
  ClientUserStatus_ENUMS_UNLOGIN = 0,
  ClientUserStatus_ENUMS_LOGINING = 1,
  ClientUserStatus_ENUMS_LOGINED = 2,
  ClientUserStatus_ENUMS_CLIENT_LOGIN_ENDING = 3,
  ClientUserStatus_ENUMS_CLIENT_LOGIN_ENDING_FINISH = 4,
  ClientUserStatus_ENUMS_LOGOUTING = 5,
  ClientUserStatus_ENUMS_LOGOUTED = 6,
  ClientUserStatus_ENUMS_ClientUserStatus_ENUMS_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ClientUserStatus_ENUMS_ClientUserStatus_ENUMS_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ClientUserStatus_ENUMS_IsValid(int value);
constexpr ClientUserStatus_ENUMS ClientUserStatus_ENUMS_ENUMS_MIN = ClientUserStatus_ENUMS_UNLOGIN;
constexpr ClientUserStatus_ENUMS ClientUserStatus_ENUMS_ENUMS_MAX = ClientUserStatus_ENUMS_LOGOUTED;
constexpr int ClientUserStatus_ENUMS_ENUMS_ARRAYSIZE = ClientUserStatus_ENUMS_ENUMS_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientUserStatus_ENUMS_descriptor();
template<typename T>
inline const std::string& ClientUserStatus_ENUMS_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientUserStatus_ENUMS>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientUserStatus_ENUMS_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientUserStatus_ENUMS_descriptor(), enum_t_value);
}
inline bool ClientUserStatus_ENUMS_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientUserStatus_ENUMS* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientUserStatus_ENUMS>(
    ClientUserStatus_ENUMS_descriptor(), name, value);
}
// ===================================================================

// AnnotaionInfo[opcode(0), nolog(false), XorEncrypt(false), KeyBase64(false), EnableStorage:(false)]
class ClientUserStatus final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.ClientUserStatus) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) const override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message ClientUserStatus failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message ClientUserStatus failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) const override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message ClientUserStatus failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message ClientUserStatus failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message ClientUserStatus failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message ClientUserStatus failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline ClientUserStatus() : ClientUserStatus(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ClientUserStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientUserStatus(const ClientUserStatus& from);
  ClientUserStatus(ClientUserStatus&& from) noexcept
    : ClientUserStatus() {
    *this = ::std::move(from);
  }

  inline ClientUserStatus& operator=(const ClientUserStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientUserStatus& operator=(ClientUserStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientUserStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientUserStatus* internal_default_instance() {
    return reinterpret_cast<const ClientUserStatus*>(
               &_ClientUserStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClientUserStatus& a, ClientUserStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientUserStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientUserStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientUserStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientUserStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ClientUserStatus& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ClientUserStatus& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.ClientUserStatus";
  }
  protected:
  explicit ClientUserStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ClientUserStatus_ENUMS ENUMS;
  static constexpr ENUMS UNLOGIN =
    ClientUserStatus_ENUMS_UNLOGIN;
  static constexpr ENUMS LOGINING =
    ClientUserStatus_ENUMS_LOGINING;
  static constexpr ENUMS LOGINED =
    ClientUserStatus_ENUMS_LOGINED;
  static constexpr ENUMS CLIENT_LOGIN_ENDING =
    ClientUserStatus_ENUMS_CLIENT_LOGIN_ENDING;
  static constexpr ENUMS CLIENT_LOGIN_ENDING_FINISH =
    ClientUserStatus_ENUMS_CLIENT_LOGIN_ENDING_FINISH;
  static constexpr ENUMS LOGOUTING =
    ClientUserStatus_ENUMS_LOGOUTING;
  static constexpr ENUMS LOGOUTED =
    ClientUserStatus_ENUMS_LOGOUTED;
  static inline bool ENUMS_IsValid(int value) {
    return ClientUserStatus_ENUMS_IsValid(value);
  }
  static constexpr ENUMS ENUMS_MIN =
    ClientUserStatus_ENUMS_ENUMS_MIN;
  static constexpr ENUMS ENUMS_MAX =
    ClientUserStatus_ENUMS_ENUMS_MAX;
  static constexpr int ENUMS_ARRAYSIZE =
    ClientUserStatus_ENUMS_ENUMS_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ENUMS_descriptor() {
    return ClientUserStatus_ENUMS_descriptor();
  }
  template<typename T>
  static inline const std::string& ENUMS_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ENUMS>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ENUMS_Name.");
    return ClientUserStatus_ENUMS_Name(enum_t_value);
  }
  static inline bool ENUMS_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ENUMS* value) {
    return ClientUserStatus_ENUMS_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.ClientUserStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_com_5fclient_5fuser_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(0), nolog(false), XorEncrypt(false), KeyBase64(false), EnableStorage:(false)]
class ClientUserInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.ClientUserInfo) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) const override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message ClientUserInfo failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message ClientUserInfo failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) const override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message ClientUserInfo failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message ClientUserInfo failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message ClientUserInfo failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message ClientUserInfo failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline ClientUserInfo() : ClientUserInfo(nullptr) {}
  ~ClientUserInfo() override;
  explicit PROTOBUF_CONSTEXPR ClientUserInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientUserInfo(const ClientUserInfo& from);
  ClientUserInfo(ClientUserInfo&& from) noexcept
    : ClientUserInfo() {
    *this = ::std::move(from);
  }

  inline ClientUserInfo& operator=(const ClientUserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientUserInfo& operator=(ClientUserInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientUserInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientUserInfo* internal_default_instance() {
    return reinterpret_cast<const ClientUserInfo*>(
               &_ClientUserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ClientUserInfo& a, ClientUserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientUserInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientUserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientUserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientUserInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientUserInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientUserInfo& from) {
    ClientUserInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientUserInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.ClientUserInfo";
  }
  protected:
  explicit ClientUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountNameFieldNumber = 2,
    kNameFieldNumber = 3,
    kNicknameFieldNumber = 4,
    kPhoneImeiFieldNumber = 5,
    kLastTokenFieldNumber = 7,
    kUserIdFieldNumber = 1,
    kTokenExpireTimeFieldNumber = 8,
    kBindPhoneFieldNumber = 9,
    kClientStatusFieldNumber = 6,
  };
  // string AccountName = 2;
  void clear_accountname();
  const std::string& accountname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accountname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accountname();
  PROTOBUF_NODISCARD std::string* release_accountname();
  void set_allocated_accountname(std::string* accountname);
  private:
  const std::string& _internal_accountname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accountname(const std::string& value);
  std::string* _internal_mutable_accountname();
  public:

  // bytes Name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes Nickname = 4;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string PhoneImei = 5;
  void clear_phoneimei();
  const std::string& phoneimei() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_phoneimei(ArgT0&& arg0, ArgT... args);
  std::string* mutable_phoneimei();
  PROTOBUF_NODISCARD std::string* release_phoneimei();
  void set_allocated_phoneimei(std::string* phoneimei);
  private:
  const std::string& _internal_phoneimei() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phoneimei(const std::string& value);
  std::string* _internal_mutable_phoneimei();
  public:

  // string LastToken = 7;
  void clear_lasttoken();
  const std::string& lasttoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lasttoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lasttoken();
  PROTOBUF_NODISCARD std::string* release_lasttoken();
  void set_allocated_lasttoken(std::string* lasttoken);
  private:
  const std::string& _internal_lasttoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lasttoken(const std::string& value);
  std::string* _internal_mutable_lasttoken();
  public:

  // uint64 UserId = 1;
  void clear_userid();
  uint64_t userid() const;
  void set_userid(uint64_t value);
  private:
  uint64_t _internal_userid() const;
  void _internal_set_userid(uint64_t value);
  public:

  // sint64 TokenExpireTime = 8;
  void clear_tokenexpiretime();
  int64_t tokenexpiretime() const;
  void set_tokenexpiretime(int64_t value);
  private:
  int64_t _internal_tokenexpiretime() const;
  void _internal_set_tokenexpiretime(int64_t value);
  public:

  // uint64 BindPhone = 9;
  void clear_bindphone();
  uint64_t bindphone() const;
  void set_bindphone(uint64_t value);
  private:
  uint64_t _internal_bindphone() const;
  void _internal_set_bindphone(uint64_t value);
  public:

  // sint32 ClientStatus = 6;
  void clear_clientstatus();
  int32_t clientstatus() const;
  void set_clientstatus(int32_t value);
  private:
  int32_t _internal_clientstatus() const;
  void _internal_set_clientstatus(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.ClientUserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accountname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phoneimei_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lasttoken_;
    uint64_t userid_;
    int64_t tokenexpiretime_;
    uint64_t bindphone_;
    int32_t clientstatus_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_com_5fclient_5fuser_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientUserStatus

// -------------------------------------------------------------------

// ClientUserInfo

// uint64 UserId = 1;
inline void ClientUserInfo::clear_userid() {
  _impl_.userid_ = uint64_t{0u};
}
inline uint64_t ClientUserInfo::_internal_userid() const {
  return _impl_.userid_;
}
inline uint64_t ClientUserInfo::userid() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.ClientUserInfo.UserId)
  return _internal_userid();
}
inline void ClientUserInfo::_internal_set_userid(uint64_t value) {
  
  _impl_.userid_ = value;
}
inline void ClientUserInfo::set_userid(uint64_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.ClientUserInfo.UserId)
}

// string AccountName = 2;
inline void ClientUserInfo::clear_accountname() {
  _impl_.accountname_.ClearToEmpty();
}
inline const std::string& ClientUserInfo::accountname() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.ClientUserInfo.AccountName)
  return _internal_accountname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientUserInfo::set_accountname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.accountname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.ClientUserInfo.AccountName)
}
inline std::string* ClientUserInfo::mutable_accountname() {
  std::string* _s = _internal_mutable_accountname();
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.ClientUserInfo.AccountName)
  return _s;
}
inline const std::string& ClientUserInfo::_internal_accountname() const {
  return _impl_.accountname_.Get();
}
inline void ClientUserInfo::_internal_set_accountname(const std::string& value) {
  
  _impl_.accountname_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientUserInfo::_internal_mutable_accountname() {
  
  return _impl_.accountname_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientUserInfo::release_accountname() {
  // @@protoc_insertion_point(field_release:CRYSTAL_NET.service.ClientUserInfo.AccountName)
  return _impl_.accountname_.Release();
}
inline void ClientUserInfo::set_allocated_accountname(std::string* accountname) {
  if (accountname != nullptr) {
    
  } else {
    
  }
  _impl_.accountname_.SetAllocated(accountname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accountname_.IsDefault()) {
    _impl_.accountname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRYSTAL_NET.service.ClientUserInfo.AccountName)
}

// bytes Name = 3;
inline void ClientUserInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ClientUserInfo::name() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.ClientUserInfo.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientUserInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.ClientUserInfo.Name)
}
inline std::string* ClientUserInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.ClientUserInfo.Name)
  return _s;
}
inline const std::string& ClientUserInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ClientUserInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientUserInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientUserInfo::release_name() {
  // @@protoc_insertion_point(field_release:CRYSTAL_NET.service.ClientUserInfo.Name)
  return _impl_.name_.Release();
}
inline void ClientUserInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRYSTAL_NET.service.ClientUserInfo.Name)
}

// bytes Nickname = 4;
inline void ClientUserInfo::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& ClientUserInfo::nickname() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.ClientUserInfo.Nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientUserInfo::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nickname_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.ClientUserInfo.Nickname)
}
inline std::string* ClientUserInfo::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.ClientUserInfo.Nickname)
  return _s;
}
inline const std::string& ClientUserInfo::_internal_nickname() const {
  return _impl_.nickname_.Get();
}
inline void ClientUserInfo::_internal_set_nickname(const std::string& value) {
  
  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientUserInfo::_internal_mutable_nickname() {
  
  return _impl_.nickname_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientUserInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:CRYSTAL_NET.service.ClientUserInfo.Nickname)
  return _impl_.nickname_.Release();
}
inline void ClientUserInfo::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  _impl_.nickname_.SetAllocated(nickname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nickname_.IsDefault()) {
    _impl_.nickname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRYSTAL_NET.service.ClientUserInfo.Nickname)
}

// string PhoneImei = 5;
inline void ClientUserInfo::clear_phoneimei() {
  _impl_.phoneimei_.ClearToEmpty();
}
inline const std::string& ClientUserInfo::phoneimei() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.ClientUserInfo.PhoneImei)
  return _internal_phoneimei();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientUserInfo::set_phoneimei(ArgT0&& arg0, ArgT... args) {
 
 _impl_.phoneimei_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.ClientUserInfo.PhoneImei)
}
inline std::string* ClientUserInfo::mutable_phoneimei() {
  std::string* _s = _internal_mutable_phoneimei();
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.ClientUserInfo.PhoneImei)
  return _s;
}
inline const std::string& ClientUserInfo::_internal_phoneimei() const {
  return _impl_.phoneimei_.Get();
}
inline void ClientUserInfo::_internal_set_phoneimei(const std::string& value) {
  
  _impl_.phoneimei_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientUserInfo::_internal_mutable_phoneimei() {
  
  return _impl_.phoneimei_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientUserInfo::release_phoneimei() {
  // @@protoc_insertion_point(field_release:CRYSTAL_NET.service.ClientUserInfo.PhoneImei)
  return _impl_.phoneimei_.Release();
}
inline void ClientUserInfo::set_allocated_phoneimei(std::string* phoneimei) {
  if (phoneimei != nullptr) {
    
  } else {
    
  }
  _impl_.phoneimei_.SetAllocated(phoneimei, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.phoneimei_.IsDefault()) {
    _impl_.phoneimei_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRYSTAL_NET.service.ClientUserInfo.PhoneImei)
}

// sint32 ClientStatus = 6;
inline void ClientUserInfo::clear_clientstatus() {
  _impl_.clientstatus_ = 0;
}
inline int32_t ClientUserInfo::_internal_clientstatus() const {
  return _impl_.clientstatus_;
}
inline int32_t ClientUserInfo::clientstatus() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.ClientUserInfo.ClientStatus)
  return _internal_clientstatus();
}
inline void ClientUserInfo::_internal_set_clientstatus(int32_t value) {
  
  _impl_.clientstatus_ = value;
}
inline void ClientUserInfo::set_clientstatus(int32_t value) {
  _internal_set_clientstatus(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.ClientUserInfo.ClientStatus)
}

// string LastToken = 7;
inline void ClientUserInfo::clear_lasttoken() {
  _impl_.lasttoken_.ClearToEmpty();
}
inline const std::string& ClientUserInfo::lasttoken() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.ClientUserInfo.LastToken)
  return _internal_lasttoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientUserInfo::set_lasttoken(ArgT0&& arg0, ArgT... args) {
 
 _impl_.lasttoken_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.ClientUserInfo.LastToken)
}
inline std::string* ClientUserInfo::mutable_lasttoken() {
  std::string* _s = _internal_mutable_lasttoken();
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.ClientUserInfo.LastToken)
  return _s;
}
inline const std::string& ClientUserInfo::_internal_lasttoken() const {
  return _impl_.lasttoken_.Get();
}
inline void ClientUserInfo::_internal_set_lasttoken(const std::string& value) {
  
  _impl_.lasttoken_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientUserInfo::_internal_mutable_lasttoken() {
  
  return _impl_.lasttoken_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientUserInfo::release_lasttoken() {
  // @@protoc_insertion_point(field_release:CRYSTAL_NET.service.ClientUserInfo.LastToken)
  return _impl_.lasttoken_.Release();
}
inline void ClientUserInfo::set_allocated_lasttoken(std::string* lasttoken) {
  if (lasttoken != nullptr) {
    
  } else {
    
  }
  _impl_.lasttoken_.SetAllocated(lasttoken, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lasttoken_.IsDefault()) {
    _impl_.lasttoken_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRYSTAL_NET.service.ClientUserInfo.LastToken)
}

// sint64 TokenExpireTime = 8;
inline void ClientUserInfo::clear_tokenexpiretime() {
  _impl_.tokenexpiretime_ = int64_t{0};
}
inline int64_t ClientUserInfo::_internal_tokenexpiretime() const {
  return _impl_.tokenexpiretime_;
}
inline int64_t ClientUserInfo::tokenexpiretime() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.ClientUserInfo.TokenExpireTime)
  return _internal_tokenexpiretime();
}
inline void ClientUserInfo::_internal_set_tokenexpiretime(int64_t value) {
  
  _impl_.tokenexpiretime_ = value;
}
inline void ClientUserInfo::set_tokenexpiretime(int64_t value) {
  _internal_set_tokenexpiretime(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.ClientUserInfo.TokenExpireTime)
}

// uint64 BindPhone = 9;
inline void ClientUserInfo::clear_bindphone() {
  _impl_.bindphone_ = uint64_t{0u};
}
inline uint64_t ClientUserInfo::_internal_bindphone() const {
  return _impl_.bindphone_;
}
inline uint64_t ClientUserInfo::bindphone() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.ClientUserInfo.BindPhone)
  return _internal_bindphone();
}
inline void ClientUserInfo::_internal_set_bindphone(uint64_t value) {
  
  _impl_.bindphone_ = value;
}
inline void ClientUserInfo::set_bindphone(uint64_t value) {
  _internal_set_bindphone(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.ClientUserInfo.BindPhone)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service
}  // namespace CRYSTAL_NET

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CRYSTAL_NET::service::ClientUserStatus_ENUMS> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CRYSTAL_NET::service::ClientUserStatus_ENUMS>() {
  return ::CRYSTAL_NET::service::ClientUserStatus_ENUMS_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>

class ClientUserStatusFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, ClientUserStatusFactory);
public:

    virtual void Release() override {
        ClientUserStatusFactory::Delete_ClientUserStatusFactory(this);
    }

    static ClientUserStatusFactory *CreateFactory() {
        return ClientUserStatusFactory::New_ClientUserStatusFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::ClientUserStatus();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::ClientUserStatus(*dynamic_cast<const ::CRYSTAL_NET::service::ClientUserStatus *>(coder));
    }

};


class ClientUserInfoFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, ClientUserInfoFactory);
public:

    virtual void Release() override {
        ClientUserInfoFactory::Delete_ClientUserInfoFactory(this);
    }

    static ClientUserInfoFactory *CreateFactory() {
        return ClientUserInfoFactory::New_ClientUserInfoFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::ClientUserInfo();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::ClientUserInfo(*dynamic_cast<const ::CRYSTAL_NET::service::ClientUserInfo *>(coder));
    }

};

#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_com_5fclient_5fuser_2eproto
