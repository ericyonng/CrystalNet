#include <pch.h>
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_opcode.proto

#include <protocols/cplusplus/test_opcode.pb.h>
POOL_CREATE_OBJ_DEFAULT_IMPL(TestOpcodeReqFactory);
POOL_CREATE_OBJ_DEFAULT_IMPL(TestOpcodeResFactory);
POOL_CREATE_OBJ_DEFAULT_IMPL(TestOpcode2ReqFactory);
POOL_CREATE_OBJ_DEFAULT_IMPL(TestOpcodeInfoFactory);
POOL_CREATE_OBJ_DEFAULT_IMPL(TestOpcode2ResFactory);

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR TestOpcodeReq::TestOpcodeReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct TestOpcodeReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestOpcodeReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestOpcodeReqDefaultTypeInternal() {}
  union {
    TestOpcodeReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestOpcodeReqDefaultTypeInternal _TestOpcodeReq_default_instance_;
PROTOBUF_CONSTEXPR TestOpcodeRes::TestOpcodeRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct TestOpcodeResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestOpcodeResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestOpcodeResDefaultTypeInternal() {}
  union {
    TestOpcodeRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestOpcodeResDefaultTypeInternal _TestOpcodeRes_default_instance_;
PROTOBUF_CONSTEXPR TestOpcode2Req::TestOpcode2Req(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0} {}
struct TestOpcode2ReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestOpcode2ReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestOpcode2ReqDefaultTypeInternal() {}
  union {
    TestOpcode2Req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestOpcode2ReqDefaultTypeInternal _TestOpcode2Req_default_instance_;
PROTOBUF_CONSTEXPR TestOpcodeInfo::TestOpcodeInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.errmsg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.errcode_)*/0} {}
struct TestOpcodeInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestOpcodeInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestOpcodeInfoDefaultTypeInternal() {}
  union {
    TestOpcodeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestOpcodeInfoDefaultTypeInternal _TestOpcodeInfo_default_instance_;
PROTOBUF_CONSTEXPR TestOpcode2Res::TestOpcode2Res(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.testinfo_)*/nullptr
  , /*decltype(_impl_.id_info_)*/0} {}
struct TestOpcode2ResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestOpcode2ResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestOpcode2ResDefaultTypeInternal() {}
  union {
    TestOpcode2Res _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestOpcode2ResDefaultTypeInternal _TestOpcode2Res_default_instance_;
static ::_pb::Metadata file_level_metadata_test_5fopcode_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_test_5fopcode_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_test_5fopcode_2eproto = nullptr;

const uint32_t TableStruct_test_5fopcode_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TestOpcodeReq, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TestOpcodeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TestOpcodeReq, _impl_.content_),
  0,
  PROTOBUF_FIELD_OFFSET(::TestOpcodeRes, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TestOpcodeRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TestOpcodeRes, _impl_.content_),
  0,
  PROTOBUF_FIELD_OFFSET(::TestOpcode2Req, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TestOpcode2Req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TestOpcode2Req, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::TestOpcode2Req, _impl_.content_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TestOpcodeInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TestOpcodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TestOpcodeInfo, _impl_.errcode_),
  PROTOBUF_FIELD_OFFSET(::TestOpcodeInfo, _impl_.errmsg_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TestOpcode2Res, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TestOpcode2Res, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TestOpcode2Res, _impl_.id_info_),
  PROTOBUF_FIELD_OFFSET(::TestOpcode2Res, _impl_.testinfo_),
  1,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::TestOpcodeReq)},
  { 8, 15, -1, sizeof(::TestOpcodeRes)},
  { 16, 24, -1, sizeof(::TestOpcode2Req)},
  { 26, 34, -1, sizeof(::TestOpcodeInfo)},
  { 36, 44, -1, sizeof(::TestOpcode2Res)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_TestOpcodeReq_default_instance_._instance,
  &::_TestOpcodeRes_default_instance_._instance,
  &::_TestOpcode2Req_default_instance_._instance,
  &::_TestOpcodeInfo_default_instance_._instance,
  &::_TestOpcode2Res_default_instance_._instance,
};

const char descriptor_table_protodef_test_5fopcode_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021test_opcode.proto\"1\n\rTestOpcodeReq\022\024\n\007"
  "content\030\001 \001(\014H\000\210\001\001B\n\n\010_content\"1\n\rTestOp"
  "codeRes\022\024\n\007content\030\001 \001(\014H\000\210\001\001B\n\n\010_conten"
  "t\"J\n\016TestOpcode2Req\022\017\n\002id\030\001 \001(\021H\000\210\001\001\022\024\n\007"
  "content\030\002 \001(\tH\001\210\001\001B\005\n\003_idB\n\n\010_content\"R\n"
  "\016TestOpcodeInfo\022\024\n\007errCode\030\001 \001(\021H\000\210\001\001\022\023\n"
  "\006errMsg\030\002 \001(\tH\001\210\001\001B\n\n\010_errCodeB\t\n\007_errMs"
  "g\"g\n\016TestOpcode2Res\022\024\n\007id_info\030\001 \001(\005H\000\210\001"
  "\001\022&\n\010testInfo\030\002 \001(\0132\017.TestOpcodeInfoH\001\210\001"
  "\001B\n\n\010_id_infoB\013\n\t_testInfob\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_test_5fopcode_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_test_5fopcode_2eproto = {
    false, false, 394, descriptor_table_protodef_test_5fopcode_2eproto,
    "test_opcode.proto",
    &descriptor_table_test_5fopcode_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_test_5fopcode_2eproto::offsets,
    file_level_metadata_test_5fopcode_2eproto, file_level_enum_descriptors_test_5fopcode_2eproto,
    file_level_service_descriptors_test_5fopcode_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_test_5fopcode_2eproto_getter() {
  return &descriptor_table_test_5fopcode_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_test_5fopcode_2eproto(&descriptor_table_test_5fopcode_2eproto);

// ===================================================================

class TestOpcodeReq::_Internal {
 public:
  using HasBits = decltype(std::declval<TestOpcodeReq>()._impl_._has_bits_);
  static void set_has_content(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestOpcodeReq::TestOpcodeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TestOpcodeReq)
}
TestOpcodeReq::TestOpcodeReq(const TestOpcodeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestOpcodeReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.content_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_content()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TestOpcodeReq)
}

inline void TestOpcodeReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.content_){}
  };
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestOpcodeReq::~TestOpcodeReq() {
  // @@protoc_insertion_point(destructor:TestOpcodeReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestOpcodeReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.Destroy();
}

void TestOpcodeReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestOpcodeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:TestOpcodeReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.content_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestOpcodeReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestOpcodeReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TestOpcodeReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional bytes content = 1;
  if (_internal_has_content()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TestOpcodeReq)
  return target;
}

size_t TestOpcodeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TestOpcodeReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes content = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestOpcodeReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestOpcodeReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestOpcodeReq::GetClassData() const { return &_class_data_; }


void TestOpcodeReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestOpcodeReq*>(&to_msg);
  auto& from = static_cast<const TestOpcodeReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TestOpcodeReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_content()) {
    _this->_internal_set_content(from._internal_content());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestOpcodeReq::CopyFrom(const TestOpcodeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TestOpcodeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestOpcodeReq::IsInitialized() const {
  return true;
}

void TestOpcodeReq::InternalSwap(TestOpcodeReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TestOpcodeReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_5fopcode_2eproto_getter, &descriptor_table_test_5fopcode_2eproto_once,
      file_level_metadata_test_5fopcode_2eproto[0]);
}

// ===================================================================

class TestOpcodeRes::_Internal {
 public:
  using HasBits = decltype(std::declval<TestOpcodeRes>()._impl_._has_bits_);
  static void set_has_content(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestOpcodeRes::TestOpcodeRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TestOpcodeRes)
}
TestOpcodeRes::TestOpcodeRes(const TestOpcodeRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestOpcodeRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.content_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_content()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TestOpcodeRes)
}

inline void TestOpcodeRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.content_){}
  };
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestOpcodeRes::~TestOpcodeRes() {
  // @@protoc_insertion_point(destructor:TestOpcodeRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestOpcodeRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.Destroy();
}

void TestOpcodeRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestOpcodeRes::Clear() {
// @@protoc_insertion_point(message_clear_start:TestOpcodeRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.content_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestOpcodeRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestOpcodeRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TestOpcodeRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional bytes content = 1;
  if (_internal_has_content()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TestOpcodeRes)
  return target;
}

size_t TestOpcodeRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TestOpcodeRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes content = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestOpcodeRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestOpcodeRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestOpcodeRes::GetClassData() const { return &_class_data_; }


void TestOpcodeRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestOpcodeRes*>(&to_msg);
  auto& from = static_cast<const TestOpcodeRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TestOpcodeRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_content()) {
    _this->_internal_set_content(from._internal_content());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestOpcodeRes::CopyFrom(const TestOpcodeRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TestOpcodeRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestOpcodeRes::IsInitialized() const {
  return true;
}

void TestOpcodeRes::InternalSwap(TestOpcodeRes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TestOpcodeRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_5fopcode_2eproto_getter, &descriptor_table_test_5fopcode_2eproto_once,
      file_level_metadata_test_5fopcode_2eproto[1]);
}

// ===================================================================

class TestOpcode2Req::_Internal {
 public:
  using HasBits = decltype(std::declval<TestOpcode2Req>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_content(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestOpcode2Req::TestOpcode2Req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TestOpcode2Req)
}
TestOpcode2Req::TestOpcode2Req(const TestOpcode2Req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestOpcode2Req* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.content_){}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_content()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:TestOpcode2Req)
}

inline void TestOpcode2Req::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.content_){}
    , decltype(_impl_.id_){0}
  };
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestOpcode2Req::~TestOpcode2Req() {
  // @@protoc_insertion_point(destructor:TestOpcode2Req)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestOpcode2Req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.Destroy();
}

void TestOpcode2Req::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestOpcode2Req::Clear() {
// @@protoc_insertion_point(message_clear_start:TestOpcode2Req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.content_.ClearNonDefaultToEmpty();
  }
  _impl_.id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestOpcode2Req::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional sint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "TestOpcode2Req.content"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestOpcode2Req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TestOpcode2Req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional sint32 id = 1;
  if (_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_id(), target);
  }

  // optional string content = 2;
  if (_internal_has_content()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TestOpcode2Req.content");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TestOpcode2Req)
  return target;
}

size_t TestOpcode2Req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TestOpcode2Req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string content = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_content());
    }

    // optional sint32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestOpcode2Req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestOpcode2Req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestOpcode2Req::GetClassData() const { return &_class_data_; }


void TestOpcode2Req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestOpcode2Req*>(&to_msg);
  auto& from = static_cast<const TestOpcode2Req&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TestOpcode2Req)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_content(from._internal_content());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestOpcode2Req::CopyFrom(const TestOpcode2Req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TestOpcode2Req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestOpcode2Req::IsInitialized() const {
  return true;
}

void TestOpcode2Req::InternalSwap(TestOpcode2Req* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestOpcode2Req::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_5fopcode_2eproto_getter, &descriptor_table_test_5fopcode_2eproto_once,
      file_level_metadata_test_5fopcode_2eproto[2]);
}

// ===================================================================

class TestOpcodeInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<TestOpcodeInfo>()._impl_._has_bits_);
  static void set_has_errcode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_errmsg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestOpcodeInfo::TestOpcodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TestOpcodeInfo)
}
TestOpcodeInfo::TestOpcodeInfo(const TestOpcodeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestOpcodeInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.errmsg_){}
    , decltype(_impl_.errcode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_errmsg()) {
    _this->_impl_.errmsg_.Set(from._internal_errmsg(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.errcode_ = from._impl_.errcode_;
  // @@protoc_insertion_point(copy_constructor:TestOpcodeInfo)
}

inline void TestOpcodeInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.errmsg_){}
    , decltype(_impl_.errcode_){0}
  };
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestOpcodeInfo::~TestOpcodeInfo() {
  // @@protoc_insertion_point(destructor:TestOpcodeInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestOpcodeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.errmsg_.Destroy();
}

void TestOpcodeInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestOpcodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TestOpcodeInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.errmsg_.ClearNonDefaultToEmpty();
  }
  _impl_.errcode_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestOpcodeInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional sint32 errCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_errcode(&has_bits);
          _impl_.errcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string errMsg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "TestOpcodeInfo.errMsg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestOpcodeInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TestOpcodeInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional sint32 errCode = 1;
  if (_internal_has_errcode()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_errcode(), target);
  }

  // optional string errMsg = 2;
  if (_internal_has_errmsg()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TestOpcodeInfo.errMsg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_errmsg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TestOpcodeInfo)
  return target;
}

size_t TestOpcodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TestOpcodeInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string errMsg = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_errmsg());
    }

    // optional sint32 errCode = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_errcode());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestOpcodeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestOpcodeInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestOpcodeInfo::GetClassData() const { return &_class_data_; }


void TestOpcodeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestOpcodeInfo*>(&to_msg);
  auto& from = static_cast<const TestOpcodeInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TestOpcodeInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_errmsg(from._internal_errmsg());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.errcode_ = from._impl_.errcode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestOpcodeInfo::CopyFrom(const TestOpcodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TestOpcodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestOpcodeInfo::IsInitialized() const {
  return true;
}

void TestOpcodeInfo::InternalSwap(TestOpcodeInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.errmsg_, lhs_arena,
      &other->_impl_.errmsg_, rhs_arena
  );
  swap(_impl_.errcode_, other->_impl_.errcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestOpcodeInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_5fopcode_2eproto_getter, &descriptor_table_test_5fopcode_2eproto_once,
      file_level_metadata_test_5fopcode_2eproto[3]);
}

// ===================================================================

class TestOpcode2Res::_Internal {
 public:
  using HasBits = decltype(std::declval<TestOpcode2Res>()._impl_._has_bits_);
  static void set_has_id_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TestOpcodeInfo& testinfo(const TestOpcode2Res* msg);
  static void set_has_testinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TestOpcodeInfo&
TestOpcode2Res::_Internal::testinfo(const TestOpcode2Res* msg) {
  return *msg->_impl_.testinfo_;
}
TestOpcode2Res::TestOpcode2Res(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TestOpcode2Res)
}
TestOpcode2Res::TestOpcode2Res(const TestOpcode2Res& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestOpcode2Res* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.testinfo_){nullptr}
    , decltype(_impl_.id_info_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_testinfo()) {
    _this->_impl_.testinfo_ = new ::TestOpcodeInfo(*from._impl_.testinfo_);
  }
  _this->_impl_.id_info_ = from._impl_.id_info_;
  // @@protoc_insertion_point(copy_constructor:TestOpcode2Res)
}

inline void TestOpcode2Res::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.testinfo_){nullptr}
    , decltype(_impl_.id_info_){0}
  };
}

TestOpcode2Res::~TestOpcode2Res() {
  // @@protoc_insertion_point(destructor:TestOpcode2Res)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestOpcode2Res::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.testinfo_;
}

void TestOpcode2Res::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestOpcode2Res::Clear() {
// @@protoc_insertion_point(message_clear_start:TestOpcode2Res)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.testinfo_ != nullptr);
    _impl_.testinfo_->Clear();
  }
  _impl_.id_info_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestOpcode2Res::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 id_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id_info(&has_bits);
          _impl_.id_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TestOpcodeInfo testInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_testinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestOpcode2Res::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TestOpcode2Res)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 id_info = 1;
  if (_internal_has_id_info()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id_info(), target);
  }

  // optional .TestOpcodeInfo testInfo = 2;
  if (_internal_has_testinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::testinfo(this),
        _Internal::testinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TestOpcode2Res)
  return target;
}

size_t TestOpcode2Res::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TestOpcode2Res)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TestOpcodeInfo testInfo = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.testinfo_);
    }

    // optional int32 id_info = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id_info());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestOpcode2Res::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestOpcode2Res::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestOpcode2Res::GetClassData() const { return &_class_data_; }


void TestOpcode2Res::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestOpcode2Res*>(&to_msg);
  auto& from = static_cast<const TestOpcode2Res&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TestOpcode2Res)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_testinfo()->::TestOpcodeInfo::MergeFrom(
          from._internal_testinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.id_info_ = from._impl_.id_info_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestOpcode2Res::CopyFrom(const TestOpcode2Res& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TestOpcode2Res)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestOpcode2Res::IsInitialized() const {
  return true;
}

void TestOpcode2Res::InternalSwap(TestOpcode2Res* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestOpcode2Res, _impl_.id_info_)
      + sizeof(TestOpcode2Res::_impl_.id_info_)
      - PROTOBUF_FIELD_OFFSET(TestOpcode2Res, _impl_.testinfo_)>(
          reinterpret_cast<char*>(&_impl_.testinfo_),
          reinterpret_cast<char*>(&other->_impl_.testinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestOpcode2Res::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_5fopcode_2eproto_getter, &descriptor_table_test_5fopcode_2eproto_once,
      file_level_metadata_test_5fopcode_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TestOpcodeReq*
Arena::CreateMaybeMessage< ::TestOpcodeReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TestOpcodeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::TestOpcodeRes*
Arena::CreateMaybeMessage< ::TestOpcodeRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TestOpcodeRes >(arena);
}
template<> PROTOBUF_NOINLINE ::TestOpcode2Req*
Arena::CreateMaybeMessage< ::TestOpcode2Req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TestOpcode2Req >(arena);
}
template<> PROTOBUF_NOINLINE ::TestOpcodeInfo*
Arena::CreateMaybeMessage< ::TestOpcodeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TestOpcodeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::TestOpcode2Res*
Arena::CreateMaybeMessage< ::TestOpcode2Res >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TestOpcode2Res >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
