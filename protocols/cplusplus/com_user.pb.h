// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com_user.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_com_5fuser_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_com_5fuser_2eproto

// KERNEL_INCLUDED
#include <kernel/kernel.h>
#include <service_common/ServiceCommon.h>
#ifdef GetMessage
 #undef GetMessage
#endif


#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_com_5fuser_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_com_5fuser_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_com_5fuser_2eproto;
class LoginInfo;
struct LoginInfoDefaultTypeInternal;
extern LoginInfoDefaultTypeInternal _LoginInfo_default_instance_;
class LoginMode;
struct LoginModeDefaultTypeInternal;
extern LoginModeDefaultTypeInternal _LoginMode_default_instance_;
class RegisterUserInfo;
struct RegisterUserInfoDefaultTypeInternal;
extern RegisterUserInfoDefaultTypeInternal _RegisterUserInfo_default_instance_;
class UserBaseInfo;
struct UserBaseInfoDefaultTypeInternal;
extern UserBaseInfoDefaultTypeInternal _UserBaseInfo_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::LoginInfo* Arena::CreateMaybeMessage<::LoginInfo>(Arena*);
template<> ::LoginMode* Arena::CreateMaybeMessage<::LoginMode>(Arena*);
template<> ::RegisterUserInfo* Arena::CreateMaybeMessage<::RegisterUserInfo>(Arena*);
template<> ::UserBaseInfo* Arena::CreateMaybeMessage<::UserBaseInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum LoginMode_ENUMS : int {
  LoginMode_ENUMS_PASSWORD = 0,
  LoginMode_ENUMS_USE_LOGIN_TOKEN = 1,
  LoginMode_ENUMS_REGISTER = 2,
  LoginMode_ENUMS_LoginMode_ENUMS_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LoginMode_ENUMS_LoginMode_ENUMS_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LoginMode_ENUMS_IsValid(int value);
constexpr LoginMode_ENUMS LoginMode_ENUMS_ENUMS_MIN = LoginMode_ENUMS_PASSWORD;
constexpr LoginMode_ENUMS LoginMode_ENUMS_ENUMS_MAX = LoginMode_ENUMS_REGISTER;
constexpr int LoginMode_ENUMS_ENUMS_ARRAYSIZE = LoginMode_ENUMS_ENUMS_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoginMode_ENUMS_descriptor();
template<typename T>
inline const std::string& LoginMode_ENUMS_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoginMode_ENUMS>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoginMode_ENUMS_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LoginMode_ENUMS_descriptor(), enum_t_value);
}
inline bool LoginMode_ENUMS_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LoginMode_ENUMS* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LoginMode_ENUMS>(
    LoginMode_ENUMS_descriptor(), name, value);
}
// ===================================================================

// AnnotaionInfo[opcode(0)]
class UserBaseInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserBaseInfo) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message UserBaseInfo failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message UserBaseInfo failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message UserBaseInfo failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message UserBaseInfo failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message UserBaseInfo failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message UserBaseInfo failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}


 public:
  inline UserBaseInfo() : UserBaseInfo(nullptr) {}
  ~UserBaseInfo() override;
  explicit PROTOBUF_CONSTEXPR UserBaseInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserBaseInfo(const UserBaseInfo& from);
  UserBaseInfo(UserBaseInfo&& from) noexcept
    : UserBaseInfo() {
    *this = ::std::move(from);
  }

  inline UserBaseInfo& operator=(const UserBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserBaseInfo& operator=(UserBaseInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserBaseInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserBaseInfo* internal_default_instance() {
    return reinterpret_cast<const UserBaseInfo*>(
               &_UserBaseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserBaseInfo& a, UserBaseInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserBaseInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserBaseInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserBaseInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserBaseInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserBaseInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserBaseInfo& from) {
    UserBaseInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserBaseInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserBaseInfo";
  }
  protected:
  explicit UserBaseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountNameFieldNumber = 2,
    kNameFieldNumber = 3,
    kNicknameFieldNumber = 4,
    kPwdFieldNumber = 5,
    kLastLoginIpFieldNumber = 8,
    kLastLoginPhoneImeiFieldNumber = 9,
    kCreateIpFieldNumber = 10,
    kCreatePhoneImeiFieldNumber = 12,
    kBindMailAddrFieldNumber = 13,
    kUserIdFieldNumber = 1,
    kBindPhoneFieldNumber = 6,
    kLastLoginTimeFieldNumber = 7,
    kCreateTimeFieldNumber = 11,
  };
  // string AccountName = 2;
  void clear_accountname();
  const std::string& accountname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accountname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accountname();
  PROTOBUF_NODISCARD std::string* release_accountname();
  void set_allocated_accountname(std::string* accountname);
  private:
  const std::string& _internal_accountname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accountname(const std::string& value);
  std::string* _internal_mutable_accountname();
  public:

  // string Name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string Nickname = 4;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string Pwd = 5;
  void clear_pwd();
  const std::string& pwd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pwd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pwd();
  PROTOBUF_NODISCARD std::string* release_pwd();
  void set_allocated_pwd(std::string* pwd);
  private:
  const std::string& _internal_pwd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pwd(const std::string& value);
  std::string* _internal_mutable_pwd();
  public:

  // string LastLoginIp = 8;
  void clear_lastloginip();
  const std::string& lastloginip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lastloginip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lastloginip();
  PROTOBUF_NODISCARD std::string* release_lastloginip();
  void set_allocated_lastloginip(std::string* lastloginip);
  private:
  const std::string& _internal_lastloginip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lastloginip(const std::string& value);
  std::string* _internal_mutable_lastloginip();
  public:

  // string LastLoginPhoneImei = 9;
  void clear_lastloginphoneimei();
  const std::string& lastloginphoneimei() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lastloginphoneimei(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lastloginphoneimei();
  PROTOBUF_NODISCARD std::string* release_lastloginphoneimei();
  void set_allocated_lastloginphoneimei(std::string* lastloginphoneimei);
  private:
  const std::string& _internal_lastloginphoneimei() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lastloginphoneimei(const std::string& value);
  std::string* _internal_mutable_lastloginphoneimei();
  public:

  // string CreateIp = 10;
  void clear_createip();
  const std::string& createip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_createip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_createip();
  PROTOBUF_NODISCARD std::string* release_createip();
  void set_allocated_createip(std::string* createip);
  private:
  const std::string& _internal_createip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_createip(const std::string& value);
  std::string* _internal_mutable_createip();
  public:

  // string CreatePhoneImei = 12;
  void clear_createphoneimei();
  const std::string& createphoneimei() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_createphoneimei(ArgT0&& arg0, ArgT... args);
  std::string* mutable_createphoneimei();
  PROTOBUF_NODISCARD std::string* release_createphoneimei();
  void set_allocated_createphoneimei(std::string* createphoneimei);
  private:
  const std::string& _internal_createphoneimei() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_createphoneimei(const std::string& value);
  std::string* _internal_mutable_createphoneimei();
  public:

  // string BindMailAddr = 13;
  void clear_bindmailaddr();
  const std::string& bindmailaddr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bindmailaddr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bindmailaddr();
  PROTOBUF_NODISCARD std::string* release_bindmailaddr();
  void set_allocated_bindmailaddr(std::string* bindmailaddr);
  private:
  const std::string& _internal_bindmailaddr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bindmailaddr(const std::string& value);
  std::string* _internal_mutable_bindmailaddr();
  public:

  // uint64 UserId = 1;
  void clear_userid();
  uint64_t userid() const;
  void set_userid(uint64_t value);
  private:
  uint64_t _internal_userid() const;
  void _internal_set_userid(uint64_t value);
  public:

  // uint64 BindPhone = 6;
  void clear_bindphone();
  uint64_t bindphone() const;
  void set_bindphone(uint64_t value);
  private:
  uint64_t _internal_bindphone() const;
  void _internal_set_bindphone(uint64_t value);
  public:

  // sint64 LastLoginTime = 7;
  void clear_lastlogintime();
  int64_t lastlogintime() const;
  void set_lastlogintime(int64_t value);
  private:
  int64_t _internal_lastlogintime() const;
  void _internal_set_lastlogintime(int64_t value);
  public:

  // sint64 CreateTime = 11;
  void clear_createtime();
  int64_t createtime() const;
  void set_createtime(int64_t value);
  private:
  int64_t _internal_createtime() const;
  void _internal_set_createtime(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:UserBaseInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accountname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pwd_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lastloginip_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lastloginphoneimei_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createip_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createphoneimei_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bindmailaddr_;
    uint64_t userid_;
    uint64_t bindphone_;
    int64_t lastlogintime_;
    int64_t createtime_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_com_5fuser_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(0)]
class LoginMode final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:LoginMode) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message LoginMode failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message LoginMode failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message LoginMode failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message LoginMode failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message LoginMode failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message LoginMode failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}


 public:
  inline LoginMode() : LoginMode(nullptr) {}
  explicit PROTOBUF_CONSTEXPR LoginMode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginMode(const LoginMode& from);
  LoginMode(LoginMode&& from) noexcept
    : LoginMode() {
    *this = ::std::move(from);
  }

  inline LoginMode& operator=(const LoginMode& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginMode& operator=(LoginMode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginMode& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginMode* internal_default_instance() {
    return reinterpret_cast<const LoginMode*>(
               &_LoginMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoginMode& a, LoginMode& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginMode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginMode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginMode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginMode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const LoginMode& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const LoginMode& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoginMode";
  }
  protected:
  explicit LoginMode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LoginMode_ENUMS ENUMS;
  static constexpr ENUMS PASSWORD =
    LoginMode_ENUMS_PASSWORD;
  static constexpr ENUMS USE_LOGIN_TOKEN =
    LoginMode_ENUMS_USE_LOGIN_TOKEN;
  static constexpr ENUMS REGISTER =
    LoginMode_ENUMS_REGISTER;
  static inline bool ENUMS_IsValid(int value) {
    return LoginMode_ENUMS_IsValid(value);
  }
  static constexpr ENUMS ENUMS_MIN =
    LoginMode_ENUMS_ENUMS_MIN;
  static constexpr ENUMS ENUMS_MAX =
    LoginMode_ENUMS_ENUMS_MAX;
  static constexpr int ENUMS_ARRAYSIZE =
    LoginMode_ENUMS_ENUMS_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ENUMS_descriptor() {
    return LoginMode_ENUMS_descriptor();
  }
  template<typename T>
  static inline const std::string& ENUMS_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ENUMS>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ENUMS_Name.");
    return LoginMode_ENUMS_Name(enum_t_value);
  }
  static inline bool ENUMS_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ENUMS* value) {
    return LoginMode_ENUMS_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LoginMode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_com_5fuser_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(0)]
class RegisterUserInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RegisterUserInfo) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message RegisterUserInfo failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message RegisterUserInfo failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message RegisterUserInfo failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message RegisterUserInfo failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message RegisterUserInfo failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message RegisterUserInfo failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}


 public:
  inline RegisterUserInfo() : RegisterUserInfo(nullptr) {}
  ~RegisterUserInfo() override;
  explicit PROTOBUF_CONSTEXPR RegisterUserInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterUserInfo(const RegisterUserInfo& from);
  RegisterUserInfo(RegisterUserInfo&& from) noexcept
    : RegisterUserInfo() {
    *this = ::std::move(from);
  }

  inline RegisterUserInfo& operator=(const RegisterUserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterUserInfo& operator=(RegisterUserInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterUserInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterUserInfo* internal_default_instance() {
    return reinterpret_cast<const RegisterUserInfo*>(
               &_RegisterUserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RegisterUserInfo& a, RegisterUserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterUserInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterUserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterUserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterUserInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterUserInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RegisterUserInfo& from) {
    RegisterUserInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterUserInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RegisterUserInfo";
  }
  protected:
  explicit RegisterUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountNameFieldNumber = 1,
    kNicknameFieldNumber = 2,
    kPwdFieldNumber = 3,
    kCreatePhoneImeiFieldNumber = 4,
  };
  // string AccountName = 1;
  void clear_accountname();
  const std::string& accountname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accountname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accountname();
  PROTOBUF_NODISCARD std::string* release_accountname();
  void set_allocated_accountname(std::string* accountname);
  private:
  const std::string& _internal_accountname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accountname(const std::string& value);
  std::string* _internal_mutable_accountname();
  public:

  // string Nickname = 2;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string Pwd = 3;
  void clear_pwd();
  const std::string& pwd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pwd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pwd();
  PROTOBUF_NODISCARD std::string* release_pwd();
  void set_allocated_pwd(std::string* pwd);
  private:
  const std::string& _internal_pwd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pwd(const std::string& value);
  std::string* _internal_mutable_pwd();
  public:

  // string CreatePhoneImei = 4;
  void clear_createphoneimei();
  const std::string& createphoneimei() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_createphoneimei(ArgT0&& arg0, ArgT... args);
  std::string* mutable_createphoneimei();
  PROTOBUF_NODISCARD std::string* release_createphoneimei();
  void set_allocated_createphoneimei(std::string* createphoneimei);
  private:
  const std::string& _internal_createphoneimei() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_createphoneimei(const std::string& value);
  std::string* _internal_mutable_createphoneimei();
  public:

  // @@protoc_insertion_point(class_scope:RegisterUserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accountname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pwd_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createphoneimei_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_com_5fuser_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(0)]
class LoginInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoginInfo) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message LoginInfo failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message LoginInfo failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message LoginInfo failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message LoginInfo failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message LoginInfo failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message LoginInfo failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}


 public:
  inline LoginInfo() : LoginInfo(nullptr) {}
  ~LoginInfo() override;
  explicit PROTOBUF_CONSTEXPR LoginInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginInfo(const LoginInfo& from);
  LoginInfo(LoginInfo&& from) noexcept
    : LoginInfo() {
    *this = ::std::move(from);
  }

  inline LoginInfo& operator=(const LoginInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginInfo& operator=(LoginInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginInfo& default_instance() {
    return *internal_default_instance();
  }
  enum RegisterInfoCase {
    kUserRegisterInfo = 6,
    REGISTERINFO_NOT_SET = 0,
  };

  static inline const LoginInfo* internal_default_instance() {
    return reinterpret_cast<const LoginInfo*>(
               &_LoginInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LoginInfo& a, LoginInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoginInfo& from) {
    LoginInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoginInfo";
  }
  protected:
  explicit LoginInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountNameFieldNumber = 2,
    kPwdFieldNumber = 3,
    kLoginTokenFieldNumber = 4,
    kLoginPhoneImeiFieldNumber = 5,
    kAppIdFieldNumber = 7,
    kCypherTextFieldNumber = 8,
    kOriginTextFieldNumber = 9,
    kVersionIdFieldNumber = 10,
    kLoginModeFieldNumber = 1,
    kUserRegisterInfoFieldNumber = 6,
  };
  // string AccountName = 2;
  void clear_accountname();
  const std::string& accountname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accountname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accountname();
  PROTOBUF_NODISCARD std::string* release_accountname();
  void set_allocated_accountname(std::string* accountname);
  private:
  const std::string& _internal_accountname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accountname(const std::string& value);
  std::string* _internal_mutable_accountname();
  public:

  // string Pwd = 3;
  void clear_pwd();
  const std::string& pwd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pwd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pwd();
  PROTOBUF_NODISCARD std::string* release_pwd();
  void set_allocated_pwd(std::string* pwd);
  private:
  const std::string& _internal_pwd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pwd(const std::string& value);
  std::string* _internal_mutable_pwd();
  public:

  // string LoginToken = 4;
  void clear_logintoken();
  const std::string& logintoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_logintoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_logintoken();
  PROTOBUF_NODISCARD std::string* release_logintoken();
  void set_allocated_logintoken(std::string* logintoken);
  private:
  const std::string& _internal_logintoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_logintoken(const std::string& value);
  std::string* _internal_mutable_logintoken();
  public:

  // string LoginPhoneImei = 5;
  void clear_loginphoneimei();
  const std::string& loginphoneimei() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_loginphoneimei(ArgT0&& arg0, ArgT... args);
  std::string* mutable_loginphoneimei();
  PROTOBUF_NODISCARD std::string* release_loginphoneimei();
  void set_allocated_loginphoneimei(std::string* loginphoneimei);
  private:
  const std::string& _internal_loginphoneimei() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_loginphoneimei(const std::string& value);
  std::string* _internal_mutable_loginphoneimei();
  public:

  // string AppId = 7;
  void clear_appid();
  const std::string& appid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_appid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_appid();
  PROTOBUF_NODISCARD std::string* release_appid();
  void set_allocated_appid(std::string* appid);
  private:
  const std::string& _internal_appid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_appid(const std::string& value);
  std::string* _internal_mutable_appid();
  public:

  // string cypherText = 8;
  void clear_cyphertext();
  const std::string& cyphertext() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cyphertext(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cyphertext();
  PROTOBUF_NODISCARD std::string* release_cyphertext();
  void set_allocated_cyphertext(std::string* cyphertext);
  private:
  const std::string& _internal_cyphertext() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cyphertext(const std::string& value);
  std::string* _internal_mutable_cyphertext();
  public:

  // string originText = 9;
  void clear_origintext();
  const std::string& origintext() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_origintext(ArgT0&& arg0, ArgT... args);
  std::string* mutable_origintext();
  PROTOBUF_NODISCARD std::string* release_origintext();
  void set_allocated_origintext(std::string* origintext);
  private:
  const std::string& _internal_origintext() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_origintext(const std::string& value);
  std::string* _internal_mutable_origintext();
  public:

  // uint64 versionId = 10;
  void clear_versionid();
  uint64_t versionid() const;
  void set_versionid(uint64_t value);
  private:
  uint64_t _internal_versionid() const;
  void _internal_set_versionid(uint64_t value);
  public:

  // sint32 LoginMode = 1;
  void clear_loginmode();
  int32_t loginmode() const;
  void set_loginmode(int32_t value);
  private:
  int32_t _internal_loginmode() const;
  void _internal_set_loginmode(int32_t value);
  public:

  // .RegisterUserInfo UserRegisterInfo = 6;
  bool has_userregisterinfo() const;
  private:
  bool _internal_has_userregisterinfo() const;
  public:
  void clear_userregisterinfo();
  const ::RegisterUserInfo& userregisterinfo() const;
  PROTOBUF_NODISCARD ::RegisterUserInfo* release_userregisterinfo();
  ::RegisterUserInfo* mutable_userregisterinfo();
  void set_allocated_userregisterinfo(::RegisterUserInfo* userregisterinfo);
  private:
  const ::RegisterUserInfo& _internal_userregisterinfo() const;
  ::RegisterUserInfo* _internal_mutable_userregisterinfo();
  public:
  void unsafe_arena_set_allocated_userregisterinfo(
      ::RegisterUserInfo* userregisterinfo);
  ::RegisterUserInfo* unsafe_arena_release_userregisterinfo();

  void clear_RegisterInfo();
  RegisterInfoCase RegisterInfo_case() const;
  // @@protoc_insertion_point(class_scope:LoginInfo)
 private:
  class _Internal;
  void set_has_userregisterinfo();

  inline bool has_RegisterInfo() const;
  inline void clear_has_RegisterInfo();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accountname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pwd_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logintoken_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loginphoneimei_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cyphertext_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr origintext_;
    uint64_t versionid_;
    int32_t loginmode_;
    union RegisterInfoUnion {
      constexpr RegisterInfoUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::RegisterUserInfo* userregisterinfo_;
    } RegisterInfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_com_5fuser_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserBaseInfo

// uint64 UserId = 1;
inline void UserBaseInfo::clear_userid() {
  _impl_.userid_ = uint64_t{0u};
}
inline uint64_t UserBaseInfo::_internal_userid() const {
  return _impl_.userid_;
}
inline uint64_t UserBaseInfo::userid() const {
  // @@protoc_insertion_point(field_get:UserBaseInfo.UserId)
  return _internal_userid();
}
inline void UserBaseInfo::_internal_set_userid(uint64_t value) {
  
  _impl_.userid_ = value;
}
inline void UserBaseInfo::set_userid(uint64_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:UserBaseInfo.UserId)
}

// string AccountName = 2;
inline void UserBaseInfo::clear_accountname() {
  _impl_.accountname_.ClearToEmpty();
}
inline const std::string& UserBaseInfo::accountname() const {
  // @@protoc_insertion_point(field_get:UserBaseInfo.AccountName)
  return _internal_accountname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserBaseInfo::set_accountname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.accountname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserBaseInfo.AccountName)
}
inline std::string* UserBaseInfo::mutable_accountname() {
  std::string* _s = _internal_mutable_accountname();
  // @@protoc_insertion_point(field_mutable:UserBaseInfo.AccountName)
  return _s;
}
inline const std::string& UserBaseInfo::_internal_accountname() const {
  return _impl_.accountname_.Get();
}
inline void UserBaseInfo::_internal_set_accountname(const std::string& value) {
  
  _impl_.accountname_.Set(value, GetArenaForAllocation());
}
inline std::string* UserBaseInfo::_internal_mutable_accountname() {
  
  return _impl_.accountname_.Mutable(GetArenaForAllocation());
}
inline std::string* UserBaseInfo::release_accountname() {
  // @@protoc_insertion_point(field_release:UserBaseInfo.AccountName)
  return _impl_.accountname_.Release();
}
inline void UserBaseInfo::set_allocated_accountname(std::string* accountname) {
  if (accountname != nullptr) {
    
  } else {
    
  }
  _impl_.accountname_.SetAllocated(accountname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accountname_.IsDefault()) {
    _impl_.accountname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UserBaseInfo.AccountName)
}

// string Name = 3;
inline void UserBaseInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UserBaseInfo::name() const {
  // @@protoc_insertion_point(field_get:UserBaseInfo.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserBaseInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserBaseInfo.Name)
}
inline std::string* UserBaseInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:UserBaseInfo.Name)
  return _s;
}
inline const std::string& UserBaseInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UserBaseInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UserBaseInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UserBaseInfo::release_name() {
  // @@protoc_insertion_point(field_release:UserBaseInfo.Name)
  return _impl_.name_.Release();
}
inline void UserBaseInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UserBaseInfo.Name)
}

// string Nickname = 4;
inline void UserBaseInfo::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& UserBaseInfo::nickname() const {
  // @@protoc_insertion_point(field_get:UserBaseInfo.Nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserBaseInfo::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nickname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserBaseInfo.Nickname)
}
inline std::string* UserBaseInfo::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:UserBaseInfo.Nickname)
  return _s;
}
inline const std::string& UserBaseInfo::_internal_nickname() const {
  return _impl_.nickname_.Get();
}
inline void UserBaseInfo::_internal_set_nickname(const std::string& value) {
  
  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* UserBaseInfo::_internal_mutable_nickname() {
  
  return _impl_.nickname_.Mutable(GetArenaForAllocation());
}
inline std::string* UserBaseInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:UserBaseInfo.Nickname)
  return _impl_.nickname_.Release();
}
inline void UserBaseInfo::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  _impl_.nickname_.SetAllocated(nickname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nickname_.IsDefault()) {
    _impl_.nickname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UserBaseInfo.Nickname)
}

// string Pwd = 5;
inline void UserBaseInfo::clear_pwd() {
  _impl_.pwd_.ClearToEmpty();
}
inline const std::string& UserBaseInfo::pwd() const {
  // @@protoc_insertion_point(field_get:UserBaseInfo.Pwd)
  return _internal_pwd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserBaseInfo::set_pwd(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pwd_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserBaseInfo.Pwd)
}
inline std::string* UserBaseInfo::mutable_pwd() {
  std::string* _s = _internal_mutable_pwd();
  // @@protoc_insertion_point(field_mutable:UserBaseInfo.Pwd)
  return _s;
}
inline const std::string& UserBaseInfo::_internal_pwd() const {
  return _impl_.pwd_.Get();
}
inline void UserBaseInfo::_internal_set_pwd(const std::string& value) {
  
  _impl_.pwd_.Set(value, GetArenaForAllocation());
}
inline std::string* UserBaseInfo::_internal_mutable_pwd() {
  
  return _impl_.pwd_.Mutable(GetArenaForAllocation());
}
inline std::string* UserBaseInfo::release_pwd() {
  // @@protoc_insertion_point(field_release:UserBaseInfo.Pwd)
  return _impl_.pwd_.Release();
}
inline void UserBaseInfo::set_allocated_pwd(std::string* pwd) {
  if (pwd != nullptr) {
    
  } else {
    
  }
  _impl_.pwd_.SetAllocated(pwd, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pwd_.IsDefault()) {
    _impl_.pwd_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UserBaseInfo.Pwd)
}

// uint64 BindPhone = 6;
inline void UserBaseInfo::clear_bindphone() {
  _impl_.bindphone_ = uint64_t{0u};
}
inline uint64_t UserBaseInfo::_internal_bindphone() const {
  return _impl_.bindphone_;
}
inline uint64_t UserBaseInfo::bindphone() const {
  // @@protoc_insertion_point(field_get:UserBaseInfo.BindPhone)
  return _internal_bindphone();
}
inline void UserBaseInfo::_internal_set_bindphone(uint64_t value) {
  
  _impl_.bindphone_ = value;
}
inline void UserBaseInfo::set_bindphone(uint64_t value) {
  _internal_set_bindphone(value);
  // @@protoc_insertion_point(field_set:UserBaseInfo.BindPhone)
}

// sint64 LastLoginTime = 7;
inline void UserBaseInfo::clear_lastlogintime() {
  _impl_.lastlogintime_ = int64_t{0};
}
inline int64_t UserBaseInfo::_internal_lastlogintime() const {
  return _impl_.lastlogintime_;
}
inline int64_t UserBaseInfo::lastlogintime() const {
  // @@protoc_insertion_point(field_get:UserBaseInfo.LastLoginTime)
  return _internal_lastlogintime();
}
inline void UserBaseInfo::_internal_set_lastlogintime(int64_t value) {
  
  _impl_.lastlogintime_ = value;
}
inline void UserBaseInfo::set_lastlogintime(int64_t value) {
  _internal_set_lastlogintime(value);
  // @@protoc_insertion_point(field_set:UserBaseInfo.LastLoginTime)
}

// string LastLoginIp = 8;
inline void UserBaseInfo::clear_lastloginip() {
  _impl_.lastloginip_.ClearToEmpty();
}
inline const std::string& UserBaseInfo::lastloginip() const {
  // @@protoc_insertion_point(field_get:UserBaseInfo.LastLoginIp)
  return _internal_lastloginip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserBaseInfo::set_lastloginip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.lastloginip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserBaseInfo.LastLoginIp)
}
inline std::string* UserBaseInfo::mutable_lastloginip() {
  std::string* _s = _internal_mutable_lastloginip();
  // @@protoc_insertion_point(field_mutable:UserBaseInfo.LastLoginIp)
  return _s;
}
inline const std::string& UserBaseInfo::_internal_lastloginip() const {
  return _impl_.lastloginip_.Get();
}
inline void UserBaseInfo::_internal_set_lastloginip(const std::string& value) {
  
  _impl_.lastloginip_.Set(value, GetArenaForAllocation());
}
inline std::string* UserBaseInfo::_internal_mutable_lastloginip() {
  
  return _impl_.lastloginip_.Mutable(GetArenaForAllocation());
}
inline std::string* UserBaseInfo::release_lastloginip() {
  // @@protoc_insertion_point(field_release:UserBaseInfo.LastLoginIp)
  return _impl_.lastloginip_.Release();
}
inline void UserBaseInfo::set_allocated_lastloginip(std::string* lastloginip) {
  if (lastloginip != nullptr) {
    
  } else {
    
  }
  _impl_.lastloginip_.SetAllocated(lastloginip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lastloginip_.IsDefault()) {
    _impl_.lastloginip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UserBaseInfo.LastLoginIp)
}

// string LastLoginPhoneImei = 9;
inline void UserBaseInfo::clear_lastloginphoneimei() {
  _impl_.lastloginphoneimei_.ClearToEmpty();
}
inline const std::string& UserBaseInfo::lastloginphoneimei() const {
  // @@protoc_insertion_point(field_get:UserBaseInfo.LastLoginPhoneImei)
  return _internal_lastloginphoneimei();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserBaseInfo::set_lastloginphoneimei(ArgT0&& arg0, ArgT... args) {
 
 _impl_.lastloginphoneimei_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserBaseInfo.LastLoginPhoneImei)
}
inline std::string* UserBaseInfo::mutable_lastloginphoneimei() {
  std::string* _s = _internal_mutable_lastloginphoneimei();
  // @@protoc_insertion_point(field_mutable:UserBaseInfo.LastLoginPhoneImei)
  return _s;
}
inline const std::string& UserBaseInfo::_internal_lastloginphoneimei() const {
  return _impl_.lastloginphoneimei_.Get();
}
inline void UserBaseInfo::_internal_set_lastloginphoneimei(const std::string& value) {
  
  _impl_.lastloginphoneimei_.Set(value, GetArenaForAllocation());
}
inline std::string* UserBaseInfo::_internal_mutable_lastloginphoneimei() {
  
  return _impl_.lastloginphoneimei_.Mutable(GetArenaForAllocation());
}
inline std::string* UserBaseInfo::release_lastloginphoneimei() {
  // @@protoc_insertion_point(field_release:UserBaseInfo.LastLoginPhoneImei)
  return _impl_.lastloginphoneimei_.Release();
}
inline void UserBaseInfo::set_allocated_lastloginphoneimei(std::string* lastloginphoneimei) {
  if (lastloginphoneimei != nullptr) {
    
  } else {
    
  }
  _impl_.lastloginphoneimei_.SetAllocated(lastloginphoneimei, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lastloginphoneimei_.IsDefault()) {
    _impl_.lastloginphoneimei_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UserBaseInfo.LastLoginPhoneImei)
}

// string CreateIp = 10;
inline void UserBaseInfo::clear_createip() {
  _impl_.createip_.ClearToEmpty();
}
inline const std::string& UserBaseInfo::createip() const {
  // @@protoc_insertion_point(field_get:UserBaseInfo.CreateIp)
  return _internal_createip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserBaseInfo::set_createip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.createip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserBaseInfo.CreateIp)
}
inline std::string* UserBaseInfo::mutable_createip() {
  std::string* _s = _internal_mutable_createip();
  // @@protoc_insertion_point(field_mutable:UserBaseInfo.CreateIp)
  return _s;
}
inline const std::string& UserBaseInfo::_internal_createip() const {
  return _impl_.createip_.Get();
}
inline void UserBaseInfo::_internal_set_createip(const std::string& value) {
  
  _impl_.createip_.Set(value, GetArenaForAllocation());
}
inline std::string* UserBaseInfo::_internal_mutable_createip() {
  
  return _impl_.createip_.Mutable(GetArenaForAllocation());
}
inline std::string* UserBaseInfo::release_createip() {
  // @@protoc_insertion_point(field_release:UserBaseInfo.CreateIp)
  return _impl_.createip_.Release();
}
inline void UserBaseInfo::set_allocated_createip(std::string* createip) {
  if (createip != nullptr) {
    
  } else {
    
  }
  _impl_.createip_.SetAllocated(createip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.createip_.IsDefault()) {
    _impl_.createip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UserBaseInfo.CreateIp)
}

// sint64 CreateTime = 11;
inline void UserBaseInfo::clear_createtime() {
  _impl_.createtime_ = int64_t{0};
}
inline int64_t UserBaseInfo::_internal_createtime() const {
  return _impl_.createtime_;
}
inline int64_t UserBaseInfo::createtime() const {
  // @@protoc_insertion_point(field_get:UserBaseInfo.CreateTime)
  return _internal_createtime();
}
inline void UserBaseInfo::_internal_set_createtime(int64_t value) {
  
  _impl_.createtime_ = value;
}
inline void UserBaseInfo::set_createtime(int64_t value) {
  _internal_set_createtime(value);
  // @@protoc_insertion_point(field_set:UserBaseInfo.CreateTime)
}

// string CreatePhoneImei = 12;
inline void UserBaseInfo::clear_createphoneimei() {
  _impl_.createphoneimei_.ClearToEmpty();
}
inline const std::string& UserBaseInfo::createphoneimei() const {
  // @@protoc_insertion_point(field_get:UserBaseInfo.CreatePhoneImei)
  return _internal_createphoneimei();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserBaseInfo::set_createphoneimei(ArgT0&& arg0, ArgT... args) {
 
 _impl_.createphoneimei_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserBaseInfo.CreatePhoneImei)
}
inline std::string* UserBaseInfo::mutable_createphoneimei() {
  std::string* _s = _internal_mutable_createphoneimei();
  // @@protoc_insertion_point(field_mutable:UserBaseInfo.CreatePhoneImei)
  return _s;
}
inline const std::string& UserBaseInfo::_internal_createphoneimei() const {
  return _impl_.createphoneimei_.Get();
}
inline void UserBaseInfo::_internal_set_createphoneimei(const std::string& value) {
  
  _impl_.createphoneimei_.Set(value, GetArenaForAllocation());
}
inline std::string* UserBaseInfo::_internal_mutable_createphoneimei() {
  
  return _impl_.createphoneimei_.Mutable(GetArenaForAllocation());
}
inline std::string* UserBaseInfo::release_createphoneimei() {
  // @@protoc_insertion_point(field_release:UserBaseInfo.CreatePhoneImei)
  return _impl_.createphoneimei_.Release();
}
inline void UserBaseInfo::set_allocated_createphoneimei(std::string* createphoneimei) {
  if (createphoneimei != nullptr) {
    
  } else {
    
  }
  _impl_.createphoneimei_.SetAllocated(createphoneimei, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.createphoneimei_.IsDefault()) {
    _impl_.createphoneimei_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UserBaseInfo.CreatePhoneImei)
}

// string BindMailAddr = 13;
inline void UserBaseInfo::clear_bindmailaddr() {
  _impl_.bindmailaddr_.ClearToEmpty();
}
inline const std::string& UserBaseInfo::bindmailaddr() const {
  // @@protoc_insertion_point(field_get:UserBaseInfo.BindMailAddr)
  return _internal_bindmailaddr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserBaseInfo::set_bindmailaddr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bindmailaddr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserBaseInfo.BindMailAddr)
}
inline std::string* UserBaseInfo::mutable_bindmailaddr() {
  std::string* _s = _internal_mutable_bindmailaddr();
  // @@protoc_insertion_point(field_mutable:UserBaseInfo.BindMailAddr)
  return _s;
}
inline const std::string& UserBaseInfo::_internal_bindmailaddr() const {
  return _impl_.bindmailaddr_.Get();
}
inline void UserBaseInfo::_internal_set_bindmailaddr(const std::string& value) {
  
  _impl_.bindmailaddr_.Set(value, GetArenaForAllocation());
}
inline std::string* UserBaseInfo::_internal_mutable_bindmailaddr() {
  
  return _impl_.bindmailaddr_.Mutable(GetArenaForAllocation());
}
inline std::string* UserBaseInfo::release_bindmailaddr() {
  // @@protoc_insertion_point(field_release:UserBaseInfo.BindMailAddr)
  return _impl_.bindmailaddr_.Release();
}
inline void UserBaseInfo::set_allocated_bindmailaddr(std::string* bindmailaddr) {
  if (bindmailaddr != nullptr) {
    
  } else {
    
  }
  _impl_.bindmailaddr_.SetAllocated(bindmailaddr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bindmailaddr_.IsDefault()) {
    _impl_.bindmailaddr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UserBaseInfo.BindMailAddr)
}

// -------------------------------------------------------------------

// LoginMode

// -------------------------------------------------------------------

// RegisterUserInfo

// string AccountName = 1;
inline void RegisterUserInfo::clear_accountname() {
  _impl_.accountname_.ClearToEmpty();
}
inline const std::string& RegisterUserInfo::accountname() const {
  // @@protoc_insertion_point(field_get:RegisterUserInfo.AccountName)
  return _internal_accountname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterUserInfo::set_accountname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.accountname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RegisterUserInfo.AccountName)
}
inline std::string* RegisterUserInfo::mutable_accountname() {
  std::string* _s = _internal_mutable_accountname();
  // @@protoc_insertion_point(field_mutable:RegisterUserInfo.AccountName)
  return _s;
}
inline const std::string& RegisterUserInfo::_internal_accountname() const {
  return _impl_.accountname_.Get();
}
inline void RegisterUserInfo::_internal_set_accountname(const std::string& value) {
  
  _impl_.accountname_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisterUserInfo::_internal_mutable_accountname() {
  
  return _impl_.accountname_.Mutable(GetArenaForAllocation());
}
inline std::string* RegisterUserInfo::release_accountname() {
  // @@protoc_insertion_point(field_release:RegisterUserInfo.AccountName)
  return _impl_.accountname_.Release();
}
inline void RegisterUserInfo::set_allocated_accountname(std::string* accountname) {
  if (accountname != nullptr) {
    
  } else {
    
  }
  _impl_.accountname_.SetAllocated(accountname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accountname_.IsDefault()) {
    _impl_.accountname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RegisterUserInfo.AccountName)
}

// string Nickname = 2;
inline void RegisterUserInfo::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& RegisterUserInfo::nickname() const {
  // @@protoc_insertion_point(field_get:RegisterUserInfo.Nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterUserInfo::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nickname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RegisterUserInfo.Nickname)
}
inline std::string* RegisterUserInfo::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:RegisterUserInfo.Nickname)
  return _s;
}
inline const std::string& RegisterUserInfo::_internal_nickname() const {
  return _impl_.nickname_.Get();
}
inline void RegisterUserInfo::_internal_set_nickname(const std::string& value) {
  
  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisterUserInfo::_internal_mutable_nickname() {
  
  return _impl_.nickname_.Mutable(GetArenaForAllocation());
}
inline std::string* RegisterUserInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:RegisterUserInfo.Nickname)
  return _impl_.nickname_.Release();
}
inline void RegisterUserInfo::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  _impl_.nickname_.SetAllocated(nickname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nickname_.IsDefault()) {
    _impl_.nickname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RegisterUserInfo.Nickname)
}

// string Pwd = 3;
inline void RegisterUserInfo::clear_pwd() {
  _impl_.pwd_.ClearToEmpty();
}
inline const std::string& RegisterUserInfo::pwd() const {
  // @@protoc_insertion_point(field_get:RegisterUserInfo.Pwd)
  return _internal_pwd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterUserInfo::set_pwd(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pwd_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RegisterUserInfo.Pwd)
}
inline std::string* RegisterUserInfo::mutable_pwd() {
  std::string* _s = _internal_mutable_pwd();
  // @@protoc_insertion_point(field_mutable:RegisterUserInfo.Pwd)
  return _s;
}
inline const std::string& RegisterUserInfo::_internal_pwd() const {
  return _impl_.pwd_.Get();
}
inline void RegisterUserInfo::_internal_set_pwd(const std::string& value) {
  
  _impl_.pwd_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisterUserInfo::_internal_mutable_pwd() {
  
  return _impl_.pwd_.Mutable(GetArenaForAllocation());
}
inline std::string* RegisterUserInfo::release_pwd() {
  // @@protoc_insertion_point(field_release:RegisterUserInfo.Pwd)
  return _impl_.pwd_.Release();
}
inline void RegisterUserInfo::set_allocated_pwd(std::string* pwd) {
  if (pwd != nullptr) {
    
  } else {
    
  }
  _impl_.pwd_.SetAllocated(pwd, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pwd_.IsDefault()) {
    _impl_.pwd_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RegisterUserInfo.Pwd)
}

// string CreatePhoneImei = 4;
inline void RegisterUserInfo::clear_createphoneimei() {
  _impl_.createphoneimei_.ClearToEmpty();
}
inline const std::string& RegisterUserInfo::createphoneimei() const {
  // @@protoc_insertion_point(field_get:RegisterUserInfo.CreatePhoneImei)
  return _internal_createphoneimei();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterUserInfo::set_createphoneimei(ArgT0&& arg0, ArgT... args) {
 
 _impl_.createphoneimei_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RegisterUserInfo.CreatePhoneImei)
}
inline std::string* RegisterUserInfo::mutable_createphoneimei() {
  std::string* _s = _internal_mutable_createphoneimei();
  // @@protoc_insertion_point(field_mutable:RegisterUserInfo.CreatePhoneImei)
  return _s;
}
inline const std::string& RegisterUserInfo::_internal_createphoneimei() const {
  return _impl_.createphoneimei_.Get();
}
inline void RegisterUserInfo::_internal_set_createphoneimei(const std::string& value) {
  
  _impl_.createphoneimei_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisterUserInfo::_internal_mutable_createphoneimei() {
  
  return _impl_.createphoneimei_.Mutable(GetArenaForAllocation());
}
inline std::string* RegisterUserInfo::release_createphoneimei() {
  // @@protoc_insertion_point(field_release:RegisterUserInfo.CreatePhoneImei)
  return _impl_.createphoneimei_.Release();
}
inline void RegisterUserInfo::set_allocated_createphoneimei(std::string* createphoneimei) {
  if (createphoneimei != nullptr) {
    
  } else {
    
  }
  _impl_.createphoneimei_.SetAllocated(createphoneimei, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.createphoneimei_.IsDefault()) {
    _impl_.createphoneimei_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RegisterUserInfo.CreatePhoneImei)
}

// -------------------------------------------------------------------

// LoginInfo

// sint32 LoginMode = 1;
inline void LoginInfo::clear_loginmode() {
  _impl_.loginmode_ = 0;
}
inline int32_t LoginInfo::_internal_loginmode() const {
  return _impl_.loginmode_;
}
inline int32_t LoginInfo::loginmode() const {
  // @@protoc_insertion_point(field_get:LoginInfo.LoginMode)
  return _internal_loginmode();
}
inline void LoginInfo::_internal_set_loginmode(int32_t value) {
  
  _impl_.loginmode_ = value;
}
inline void LoginInfo::set_loginmode(int32_t value) {
  _internal_set_loginmode(value);
  // @@protoc_insertion_point(field_set:LoginInfo.LoginMode)
}

// string AccountName = 2;
inline void LoginInfo::clear_accountname() {
  _impl_.accountname_.ClearToEmpty();
}
inline const std::string& LoginInfo::accountname() const {
  // @@protoc_insertion_point(field_get:LoginInfo.AccountName)
  return _internal_accountname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginInfo::set_accountname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.accountname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:LoginInfo.AccountName)
}
inline std::string* LoginInfo::mutable_accountname() {
  std::string* _s = _internal_mutable_accountname();
  // @@protoc_insertion_point(field_mutable:LoginInfo.AccountName)
  return _s;
}
inline const std::string& LoginInfo::_internal_accountname() const {
  return _impl_.accountname_.Get();
}
inline void LoginInfo::_internal_set_accountname(const std::string& value) {
  
  _impl_.accountname_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginInfo::_internal_mutable_accountname() {
  
  return _impl_.accountname_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginInfo::release_accountname() {
  // @@protoc_insertion_point(field_release:LoginInfo.AccountName)
  return _impl_.accountname_.Release();
}
inline void LoginInfo::set_allocated_accountname(std::string* accountname) {
  if (accountname != nullptr) {
    
  } else {
    
  }
  _impl_.accountname_.SetAllocated(accountname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accountname_.IsDefault()) {
    _impl_.accountname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:LoginInfo.AccountName)
}

// string Pwd = 3;
inline void LoginInfo::clear_pwd() {
  _impl_.pwd_.ClearToEmpty();
}
inline const std::string& LoginInfo::pwd() const {
  // @@protoc_insertion_point(field_get:LoginInfo.Pwd)
  return _internal_pwd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginInfo::set_pwd(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pwd_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:LoginInfo.Pwd)
}
inline std::string* LoginInfo::mutable_pwd() {
  std::string* _s = _internal_mutable_pwd();
  // @@protoc_insertion_point(field_mutable:LoginInfo.Pwd)
  return _s;
}
inline const std::string& LoginInfo::_internal_pwd() const {
  return _impl_.pwd_.Get();
}
inline void LoginInfo::_internal_set_pwd(const std::string& value) {
  
  _impl_.pwd_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginInfo::_internal_mutable_pwd() {
  
  return _impl_.pwd_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginInfo::release_pwd() {
  // @@protoc_insertion_point(field_release:LoginInfo.Pwd)
  return _impl_.pwd_.Release();
}
inline void LoginInfo::set_allocated_pwd(std::string* pwd) {
  if (pwd != nullptr) {
    
  } else {
    
  }
  _impl_.pwd_.SetAllocated(pwd, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pwd_.IsDefault()) {
    _impl_.pwd_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:LoginInfo.Pwd)
}

// string LoginToken = 4;
inline void LoginInfo::clear_logintoken() {
  _impl_.logintoken_.ClearToEmpty();
}
inline const std::string& LoginInfo::logintoken() const {
  // @@protoc_insertion_point(field_get:LoginInfo.LoginToken)
  return _internal_logintoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginInfo::set_logintoken(ArgT0&& arg0, ArgT... args) {
 
 _impl_.logintoken_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:LoginInfo.LoginToken)
}
inline std::string* LoginInfo::mutable_logintoken() {
  std::string* _s = _internal_mutable_logintoken();
  // @@protoc_insertion_point(field_mutable:LoginInfo.LoginToken)
  return _s;
}
inline const std::string& LoginInfo::_internal_logintoken() const {
  return _impl_.logintoken_.Get();
}
inline void LoginInfo::_internal_set_logintoken(const std::string& value) {
  
  _impl_.logintoken_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginInfo::_internal_mutable_logintoken() {
  
  return _impl_.logintoken_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginInfo::release_logintoken() {
  // @@protoc_insertion_point(field_release:LoginInfo.LoginToken)
  return _impl_.logintoken_.Release();
}
inline void LoginInfo::set_allocated_logintoken(std::string* logintoken) {
  if (logintoken != nullptr) {
    
  } else {
    
  }
  _impl_.logintoken_.SetAllocated(logintoken, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.logintoken_.IsDefault()) {
    _impl_.logintoken_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:LoginInfo.LoginToken)
}

// string LoginPhoneImei = 5;
inline void LoginInfo::clear_loginphoneimei() {
  _impl_.loginphoneimei_.ClearToEmpty();
}
inline const std::string& LoginInfo::loginphoneimei() const {
  // @@protoc_insertion_point(field_get:LoginInfo.LoginPhoneImei)
  return _internal_loginphoneimei();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginInfo::set_loginphoneimei(ArgT0&& arg0, ArgT... args) {
 
 _impl_.loginphoneimei_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:LoginInfo.LoginPhoneImei)
}
inline std::string* LoginInfo::mutable_loginphoneimei() {
  std::string* _s = _internal_mutable_loginphoneimei();
  // @@protoc_insertion_point(field_mutable:LoginInfo.LoginPhoneImei)
  return _s;
}
inline const std::string& LoginInfo::_internal_loginphoneimei() const {
  return _impl_.loginphoneimei_.Get();
}
inline void LoginInfo::_internal_set_loginphoneimei(const std::string& value) {
  
  _impl_.loginphoneimei_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginInfo::_internal_mutable_loginphoneimei() {
  
  return _impl_.loginphoneimei_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginInfo::release_loginphoneimei() {
  // @@protoc_insertion_point(field_release:LoginInfo.LoginPhoneImei)
  return _impl_.loginphoneimei_.Release();
}
inline void LoginInfo::set_allocated_loginphoneimei(std::string* loginphoneimei) {
  if (loginphoneimei != nullptr) {
    
  } else {
    
  }
  _impl_.loginphoneimei_.SetAllocated(loginphoneimei, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.loginphoneimei_.IsDefault()) {
    _impl_.loginphoneimei_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:LoginInfo.LoginPhoneImei)
}

// .RegisterUserInfo UserRegisterInfo = 6;
inline bool LoginInfo::_internal_has_userregisterinfo() const {
  return RegisterInfo_case() == kUserRegisterInfo;
}
inline bool LoginInfo::has_userregisterinfo() const {
  return _internal_has_userregisterinfo();
}
inline void LoginInfo::set_has_userregisterinfo() {
  _impl_._oneof_case_[0] = kUserRegisterInfo;
}
inline void LoginInfo::clear_userregisterinfo() {
  if (_internal_has_userregisterinfo()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.RegisterInfo_.userregisterinfo_;
    }
    clear_has_RegisterInfo();
  }
}
inline ::RegisterUserInfo* LoginInfo::release_userregisterinfo() {
  // @@protoc_insertion_point(field_release:LoginInfo.UserRegisterInfo)
  if (_internal_has_userregisterinfo()) {
    clear_has_RegisterInfo();
    ::RegisterUserInfo* temp = _impl_.RegisterInfo_.userregisterinfo_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.RegisterInfo_.userregisterinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::RegisterUserInfo& LoginInfo::_internal_userregisterinfo() const {
  return _internal_has_userregisterinfo()
      ? *_impl_.RegisterInfo_.userregisterinfo_
      : reinterpret_cast< ::RegisterUserInfo&>(::_RegisterUserInfo_default_instance_);
}
inline const ::RegisterUserInfo& LoginInfo::userregisterinfo() const {
  // @@protoc_insertion_point(field_get:LoginInfo.UserRegisterInfo)
  return _internal_userregisterinfo();
}
inline ::RegisterUserInfo* LoginInfo::unsafe_arena_release_userregisterinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:LoginInfo.UserRegisterInfo)
  if (_internal_has_userregisterinfo()) {
    clear_has_RegisterInfo();
    ::RegisterUserInfo* temp = _impl_.RegisterInfo_.userregisterinfo_;
    _impl_.RegisterInfo_.userregisterinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LoginInfo::unsafe_arena_set_allocated_userregisterinfo(::RegisterUserInfo* userregisterinfo) {
  clear_RegisterInfo();
  if (userregisterinfo) {
    set_has_userregisterinfo();
    _impl_.RegisterInfo_.userregisterinfo_ = userregisterinfo;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LoginInfo.UserRegisterInfo)
}
inline ::RegisterUserInfo* LoginInfo::_internal_mutable_userregisterinfo() {
  if (!_internal_has_userregisterinfo()) {
    clear_RegisterInfo();
    set_has_userregisterinfo();
    _impl_.RegisterInfo_.userregisterinfo_ = CreateMaybeMessage< ::RegisterUserInfo >(GetArenaForAllocation());
  }
  return _impl_.RegisterInfo_.userregisterinfo_;
}
inline ::RegisterUserInfo* LoginInfo::mutable_userregisterinfo() {
  ::RegisterUserInfo* _msg = _internal_mutable_userregisterinfo();
  // @@protoc_insertion_point(field_mutable:LoginInfo.UserRegisterInfo)
  return _msg;
}

// string AppId = 7;
inline void LoginInfo::clear_appid() {
  _impl_.appid_.ClearToEmpty();
}
inline const std::string& LoginInfo::appid() const {
  // @@protoc_insertion_point(field_get:LoginInfo.AppId)
  return _internal_appid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginInfo::set_appid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.appid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:LoginInfo.AppId)
}
inline std::string* LoginInfo::mutable_appid() {
  std::string* _s = _internal_mutable_appid();
  // @@protoc_insertion_point(field_mutable:LoginInfo.AppId)
  return _s;
}
inline const std::string& LoginInfo::_internal_appid() const {
  return _impl_.appid_.Get();
}
inline void LoginInfo::_internal_set_appid(const std::string& value) {
  
  _impl_.appid_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginInfo::_internal_mutable_appid() {
  
  return _impl_.appid_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginInfo::release_appid() {
  // @@protoc_insertion_point(field_release:LoginInfo.AppId)
  return _impl_.appid_.Release();
}
inline void LoginInfo::set_allocated_appid(std::string* appid) {
  if (appid != nullptr) {
    
  } else {
    
  }
  _impl_.appid_.SetAllocated(appid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.appid_.IsDefault()) {
    _impl_.appid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:LoginInfo.AppId)
}

// string cypherText = 8;
inline void LoginInfo::clear_cyphertext() {
  _impl_.cyphertext_.ClearToEmpty();
}
inline const std::string& LoginInfo::cyphertext() const {
  // @@protoc_insertion_point(field_get:LoginInfo.cypherText)
  return _internal_cyphertext();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginInfo::set_cyphertext(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cyphertext_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:LoginInfo.cypherText)
}
inline std::string* LoginInfo::mutable_cyphertext() {
  std::string* _s = _internal_mutable_cyphertext();
  // @@protoc_insertion_point(field_mutable:LoginInfo.cypherText)
  return _s;
}
inline const std::string& LoginInfo::_internal_cyphertext() const {
  return _impl_.cyphertext_.Get();
}
inline void LoginInfo::_internal_set_cyphertext(const std::string& value) {
  
  _impl_.cyphertext_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginInfo::_internal_mutable_cyphertext() {
  
  return _impl_.cyphertext_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginInfo::release_cyphertext() {
  // @@protoc_insertion_point(field_release:LoginInfo.cypherText)
  return _impl_.cyphertext_.Release();
}
inline void LoginInfo::set_allocated_cyphertext(std::string* cyphertext) {
  if (cyphertext != nullptr) {
    
  } else {
    
  }
  _impl_.cyphertext_.SetAllocated(cyphertext, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cyphertext_.IsDefault()) {
    _impl_.cyphertext_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:LoginInfo.cypherText)
}

// string originText = 9;
inline void LoginInfo::clear_origintext() {
  _impl_.origintext_.ClearToEmpty();
}
inline const std::string& LoginInfo::origintext() const {
  // @@protoc_insertion_point(field_get:LoginInfo.originText)
  return _internal_origintext();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginInfo::set_origintext(ArgT0&& arg0, ArgT... args) {
 
 _impl_.origintext_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:LoginInfo.originText)
}
inline std::string* LoginInfo::mutable_origintext() {
  std::string* _s = _internal_mutable_origintext();
  // @@protoc_insertion_point(field_mutable:LoginInfo.originText)
  return _s;
}
inline const std::string& LoginInfo::_internal_origintext() const {
  return _impl_.origintext_.Get();
}
inline void LoginInfo::_internal_set_origintext(const std::string& value) {
  
  _impl_.origintext_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginInfo::_internal_mutable_origintext() {
  
  return _impl_.origintext_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginInfo::release_origintext() {
  // @@protoc_insertion_point(field_release:LoginInfo.originText)
  return _impl_.origintext_.Release();
}
inline void LoginInfo::set_allocated_origintext(std::string* origintext) {
  if (origintext != nullptr) {
    
  } else {
    
  }
  _impl_.origintext_.SetAllocated(origintext, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.origintext_.IsDefault()) {
    _impl_.origintext_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:LoginInfo.originText)
}

// uint64 versionId = 10;
inline void LoginInfo::clear_versionid() {
  _impl_.versionid_ = uint64_t{0u};
}
inline uint64_t LoginInfo::_internal_versionid() const {
  return _impl_.versionid_;
}
inline uint64_t LoginInfo::versionid() const {
  // @@protoc_insertion_point(field_get:LoginInfo.versionId)
  return _internal_versionid();
}
inline void LoginInfo::_internal_set_versionid(uint64_t value) {
  
  _impl_.versionid_ = value;
}
inline void LoginInfo::set_versionid(uint64_t value) {
  _internal_set_versionid(value);
  // @@protoc_insertion_point(field_set:LoginInfo.versionId)
}

inline bool LoginInfo::has_RegisterInfo() const {
  return RegisterInfo_case() != REGISTERINFO_NOT_SET;
}
inline void LoginInfo::clear_has_RegisterInfo() {
  _impl_._oneof_case_[0] = REGISTERINFO_NOT_SET;
}
inline LoginInfo::RegisterInfoCase LoginInfo::RegisterInfo_case() const {
  return LoginInfo::RegisterInfoCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::LoginMode_ENUMS> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LoginMode_ENUMS>() {
  return ::LoginMode_ENUMS_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>

class UserBaseInfoFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, UserBaseInfoFactory);
public:

    virtual void Release() override {
        UserBaseInfoFactory::Delete_UserBaseInfoFactory(this);
    }

    static UserBaseInfoFactory *CreateFactory() {
        return UserBaseInfoFactory::New_UserBaseInfoFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new UserBaseInfo();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new UserBaseInfo(*dynamic_cast<const UserBaseInfo *>(coder));
    }

};


class LoginModeFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, LoginModeFactory);
public:

    virtual void Release() override {
        LoginModeFactory::Delete_LoginModeFactory(this);
    }

    static LoginModeFactory *CreateFactory() {
        return LoginModeFactory::New_LoginModeFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new LoginMode();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new LoginMode(*dynamic_cast<const LoginMode *>(coder));
    }

};


class RegisterUserInfoFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, RegisterUserInfoFactory);
public:

    virtual void Release() override {
        RegisterUserInfoFactory::Delete_RegisterUserInfoFactory(this);
    }

    static RegisterUserInfoFactory *CreateFactory() {
        return RegisterUserInfoFactory::New_RegisterUserInfoFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new RegisterUserInfo();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new RegisterUserInfo(*dynamic_cast<const RegisterUserInfo *>(coder));
    }

};


class LoginInfoFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, LoginInfoFactory);
public:

    virtual void Release() override {
        LoginInfoFactory::Delete_LoginInfoFactory(this);
    }

    static LoginInfoFactory *CreateFactory() {
        return LoginInfoFactory::New_LoginInfoFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new LoginInfo();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new LoginInfo(*dynamic_cast<const LoginInfo *>(coder));
    }

};

#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_com_5fuser_2eproto
