// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: library.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_library_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_library_2eproto

// KERNEL_INCLUDED
#include <kernel/kernel.h>
#include <service_common/ServiceCommon.h>
#include <google/protobuf/util/json_util.h>
#include <google/protobuf/text_format.h>

#ifdef GetMessage
 #undef GetMessage
#endif


#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "com_library.pb.h"
#include "com_book.pb.h"
#include "com_user.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_library_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_library_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_library_2eproto;
namespace CRYSTAL_NET {
namespace service {
class AddLibraryBookCountReq;
struct AddLibraryBookCountReqDefaultTypeInternal;
extern AddLibraryBookCountReqDefaultTypeInternal _AddLibraryBookCountReq_default_instance_;
class AddLibraryBookCountRes;
struct AddLibraryBookCountResDefaultTypeInternal;
extern AddLibraryBookCountResDefaultTypeInternal _AddLibraryBookCountRes_default_instance_;
class AddLibraryBookReq;
struct AddLibraryBookReqDefaultTypeInternal;
extern AddLibraryBookReqDefaultTypeInternal _AddLibraryBookReq_default_instance_;
class AddLibraryBookRes;
struct AddLibraryBookResDefaultTypeInternal;
extern AddLibraryBookResDefaultTypeInternal _AddLibraryBookRes_default_instance_;
class BookListNty;
struct BookListNtyDefaultTypeInternal;
extern BookListNtyDefaultTypeInternal _BookListNty_default_instance_;
class BookVariantInfoItemsNty;
struct BookVariantInfoItemsNtyDefaultTypeInternal;
extern BookVariantInfoItemsNtyDefaultTypeInternal _BookVariantInfoItemsNty_default_instance_;
class BooksChangeNty;
struct BooksChangeNtyDefaultTypeInternal;
extern BooksChangeNtyDefaultTypeInternal _BooksChangeNty_default_instance_;
class BorrowBookReq;
struct BorrowBookReqDefaultTypeInternal;
extern BorrowBookReqDefaultTypeInternal _BorrowBookReq_default_instance_;
class BorrowBookRes;
struct BorrowBookResDefaultTypeInternal;
extern BorrowBookResDefaultTypeInternal _BorrowBookRes_default_instance_;
class CreateLibraryReq;
struct CreateLibraryReqDefaultTypeInternal;
extern CreateLibraryReqDefaultTypeInternal _CreateLibraryReq_default_instance_;
class CreateLibraryRes;
struct CreateLibraryResDefaultTypeInternal;
extern CreateLibraryResDefaultTypeInternal _CreateLibraryRes_default_instance_;
class GetBookByBookNameReq;
struct GetBookByBookNameReqDefaultTypeInternal;
extern GetBookByBookNameReqDefaultTypeInternal _GetBookByBookNameReq_default_instance_;
class GetBookByBookNameRes;
struct GetBookByBookNameResDefaultTypeInternal;
extern GetBookByBookNameResDefaultTypeInternal _GetBookByBookNameRes_default_instance_;
class GetBookInfoReq;
struct GetBookInfoReqDefaultTypeInternal;
extern GetBookInfoReqDefaultTypeInternal _GetBookInfoReq_default_instance_;
class GetBookInfoRes;
struct GetBookInfoResDefaultTypeInternal;
extern GetBookInfoResDefaultTypeInternal _GetBookInfoRes_default_instance_;
class GetBookListReq;
struct GetBookListReqDefaultTypeInternal;
extern GetBookListReqDefaultTypeInternal _GetBookListReq_default_instance_;
class GetBookListRes;
struct GetBookListResDefaultTypeInternal;
extern GetBookListResDefaultTypeInternal _GetBookListRes_default_instance_;
class GetLibraryInfoReq;
struct GetLibraryInfoReqDefaultTypeInternal;
extern GetLibraryInfoReqDefaultTypeInternal _GetLibraryInfoReq_default_instance_;
class GetLibraryInfoRes;
struct GetLibraryInfoResDefaultTypeInternal;
extern GetLibraryInfoResDefaultTypeInternal _GetLibraryInfoRes_default_instance_;
class GetLibraryListReq;
struct GetLibraryListReqDefaultTypeInternal;
extern GetLibraryListReqDefaultTypeInternal _GetLibraryListReq_default_instance_;
class GetLibraryListRes;
struct GetLibraryListResDefaultTypeInternal;
extern GetLibraryListResDefaultTypeInternal _GetLibraryListRes_default_instance_;
class GetLibraryMemberSimpleInfoReq;
struct GetLibraryMemberSimpleInfoReqDefaultTypeInternal;
extern GetLibraryMemberSimpleInfoReqDefaultTypeInternal _GetLibraryMemberSimpleInfoReq_default_instance_;
class GetLibraryMemberSimpleInfoRes;
struct GetLibraryMemberSimpleInfoResDefaultTypeInternal;
extern GetLibraryMemberSimpleInfoResDefaultTypeInternal _GetLibraryMemberSimpleInfoRes_default_instance_;
class JoinLibraryReq;
struct JoinLibraryReqDefaultTypeInternal;
extern JoinLibraryReqDefaultTypeInternal _JoinLibraryReq_default_instance_;
class JoinLibraryRes;
struct JoinLibraryResDefaultTypeInternal;
extern JoinLibraryResDefaultTypeInternal _JoinLibraryRes_default_instance_;
class LibraryInfoNty;
struct LibraryInfoNtyDefaultTypeInternal;
extern LibraryInfoNtyDefaultTypeInternal _LibraryInfoNty_default_instance_;
class ModifyMemberInfoReq;
struct ModifyMemberInfoReqDefaultTypeInternal;
extern ModifyMemberInfoReqDefaultTypeInternal _ModifyMemberInfoReq_default_instance_;
class ModifyMemberInfoRes;
struct ModifyMemberInfoResDefaultTypeInternal;
extern ModifyMemberInfoResDefaultTypeInternal _ModifyMemberInfoRes_default_instance_;
class QuitLibraryReq;
struct QuitLibraryReqDefaultTypeInternal;
extern QuitLibraryReqDefaultTypeInternal _QuitLibraryReq_default_instance_;
class QuitLibraryRes;
struct QuitLibraryResDefaultTypeInternal;
extern QuitLibraryResDefaultTypeInternal _QuitLibraryRes_default_instance_;
class TransferLibraianReq;
struct TransferLibraianReqDefaultTypeInternal;
extern TransferLibraianReqDefaultTypeInternal _TransferLibraianReq_default_instance_;
class TransferLibraianRes;
struct TransferLibraianResDefaultTypeInternal;
extern TransferLibraianResDefaultTypeInternal _TransferLibraianRes_default_instance_;
class UserLibraryInfoNty;
struct UserLibraryInfoNtyDefaultTypeInternal;
extern UserLibraryInfoNtyDefaultTypeInternal _UserLibraryInfoNty_default_instance_;
}  // namespace service
}  // namespace CRYSTAL_NET
PROTOBUF_NAMESPACE_OPEN
template<> ::CRYSTAL_NET::service::AddLibraryBookCountReq* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::AddLibraryBookCountReq>(Arena*);
template<> ::CRYSTAL_NET::service::AddLibraryBookCountRes* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::AddLibraryBookCountRes>(Arena*);
template<> ::CRYSTAL_NET::service::AddLibraryBookReq* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::AddLibraryBookReq>(Arena*);
template<> ::CRYSTAL_NET::service::AddLibraryBookRes* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::AddLibraryBookRes>(Arena*);
template<> ::CRYSTAL_NET::service::BookListNty* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::BookListNty>(Arena*);
template<> ::CRYSTAL_NET::service::BookVariantInfoItemsNty* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::BookVariantInfoItemsNty>(Arena*);
template<> ::CRYSTAL_NET::service::BooksChangeNty* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::BooksChangeNty>(Arena*);
template<> ::CRYSTAL_NET::service::BorrowBookReq* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::BorrowBookReq>(Arena*);
template<> ::CRYSTAL_NET::service::BorrowBookRes* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::BorrowBookRes>(Arena*);
template<> ::CRYSTAL_NET::service::CreateLibraryReq* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::CreateLibraryReq>(Arena*);
template<> ::CRYSTAL_NET::service::CreateLibraryRes* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::CreateLibraryRes>(Arena*);
template<> ::CRYSTAL_NET::service::GetBookByBookNameReq* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::GetBookByBookNameReq>(Arena*);
template<> ::CRYSTAL_NET::service::GetBookByBookNameRes* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::GetBookByBookNameRes>(Arena*);
template<> ::CRYSTAL_NET::service::GetBookInfoReq* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::GetBookInfoReq>(Arena*);
template<> ::CRYSTAL_NET::service::GetBookInfoRes* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::GetBookInfoRes>(Arena*);
template<> ::CRYSTAL_NET::service::GetBookListReq* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::GetBookListReq>(Arena*);
template<> ::CRYSTAL_NET::service::GetBookListRes* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::GetBookListRes>(Arena*);
template<> ::CRYSTAL_NET::service::GetLibraryInfoReq* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::GetLibraryInfoReq>(Arena*);
template<> ::CRYSTAL_NET::service::GetLibraryInfoRes* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::GetLibraryInfoRes>(Arena*);
template<> ::CRYSTAL_NET::service::GetLibraryListReq* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::GetLibraryListReq>(Arena*);
template<> ::CRYSTAL_NET::service::GetLibraryListRes* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::GetLibraryListRes>(Arena*);
template<> ::CRYSTAL_NET::service::GetLibraryMemberSimpleInfoReq* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::GetLibraryMemberSimpleInfoReq>(Arena*);
template<> ::CRYSTAL_NET::service::GetLibraryMemberSimpleInfoRes* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::GetLibraryMemberSimpleInfoRes>(Arena*);
template<> ::CRYSTAL_NET::service::JoinLibraryReq* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::JoinLibraryReq>(Arena*);
template<> ::CRYSTAL_NET::service::JoinLibraryRes* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::JoinLibraryRes>(Arena*);
template<> ::CRYSTAL_NET::service::LibraryInfoNty* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::LibraryInfoNty>(Arena*);
template<> ::CRYSTAL_NET::service::ModifyMemberInfoReq* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::ModifyMemberInfoReq>(Arena*);
template<> ::CRYSTAL_NET::service::ModifyMemberInfoRes* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::ModifyMemberInfoRes>(Arena*);
template<> ::CRYSTAL_NET::service::QuitLibraryReq* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::QuitLibraryReq>(Arena*);
template<> ::CRYSTAL_NET::service::QuitLibraryRes* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::QuitLibraryRes>(Arena*);
template<> ::CRYSTAL_NET::service::TransferLibraianReq* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::TransferLibraianReq>(Arena*);
template<> ::CRYSTAL_NET::service::TransferLibraianRes* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::TransferLibraianRes>(Arena*);
template<> ::CRYSTAL_NET::service::UserLibraryInfoNty* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::UserLibraryInfoNty>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CRYSTAL_NET {
namespace service {

// ===================================================================

// AnnotaionInfo[opcode(42), nolog(false), XorEncrypt(false), KeyBase64(false)]
class GetLibraryInfoReq final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.GetLibraryInfoReq) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetLibraryInfoReq failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetLibraryInfoReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetLibraryInfoReq failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetLibraryInfoReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message GetLibraryInfoReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message GetLibraryInfoReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline GetLibraryInfoReq() : GetLibraryInfoReq(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetLibraryInfoReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLibraryInfoReq(const GetLibraryInfoReq& from);
  GetLibraryInfoReq(GetLibraryInfoReq&& from) noexcept
    : GetLibraryInfoReq() {
    *this = ::std::move(from);
  }

  inline GetLibraryInfoReq& operator=(const GetLibraryInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLibraryInfoReq& operator=(GetLibraryInfoReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLibraryInfoReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLibraryInfoReq* internal_default_instance() {
    return reinterpret_cast<const GetLibraryInfoReq*>(
               &_GetLibraryInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetLibraryInfoReq& a, GetLibraryInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLibraryInfoReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLibraryInfoReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLibraryInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLibraryInfoReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetLibraryInfoReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetLibraryInfoReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.GetLibraryInfoReq";
  }
  protected:
  explicit GetLibraryInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.GetLibraryInfoReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_library_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(46), nolog(false), XorEncrypt(false), KeyBase64(false)]
class LibraryInfoNty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.LibraryInfoNty) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message LibraryInfoNty failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message LibraryInfoNty failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message LibraryInfoNty failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message LibraryInfoNty failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message LibraryInfoNty failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message LibraryInfoNty failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline LibraryInfoNty() : LibraryInfoNty(nullptr) {}
  ~LibraryInfoNty() override;
  explicit PROTOBUF_CONSTEXPR LibraryInfoNty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LibraryInfoNty(const LibraryInfoNty& from);
  LibraryInfoNty(LibraryInfoNty&& from) noexcept
    : LibraryInfoNty() {
    *this = ::std::move(from);
  }

  inline LibraryInfoNty& operator=(const LibraryInfoNty& from) {
    CopyFrom(from);
    return *this;
  }
  inline LibraryInfoNty& operator=(LibraryInfoNty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LibraryInfoNty& default_instance() {
    return *internal_default_instance();
  }
  static inline const LibraryInfoNty* internal_default_instance() {
    return reinterpret_cast<const LibraryInfoNty*>(
               &_LibraryInfoNty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LibraryInfoNty& a, LibraryInfoNty& b) {
    a.Swap(&b);
  }
  inline void Swap(LibraryInfoNty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LibraryInfoNty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LibraryInfoNty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LibraryInfoNty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LibraryInfoNty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LibraryInfoNty& from) {
    LibraryInfoNty::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LibraryInfoNty* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.LibraryInfoNty";
  }
  protected:
  explicit LibraryInfoNty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLibraryInfoFieldNumber = 1,
  };
  // .CRYSTAL_NET.service.LibraryInfo LibraryInfo = 1;
  bool has_libraryinfo() const;
  private:
  bool _internal_has_libraryinfo() const;
  public:
  void clear_libraryinfo();
  const ::CRYSTAL_NET::service::LibraryInfo& libraryinfo() const;
  PROTOBUF_NODISCARD ::CRYSTAL_NET::service::LibraryInfo* release_libraryinfo();
  ::CRYSTAL_NET::service::LibraryInfo* mutable_libraryinfo();
  void set_allocated_libraryinfo(::CRYSTAL_NET::service::LibraryInfo* libraryinfo);
  private:
  const ::CRYSTAL_NET::service::LibraryInfo& _internal_libraryinfo() const;
  ::CRYSTAL_NET::service::LibraryInfo* _internal_mutable_libraryinfo();
  public:
  void unsafe_arena_set_allocated_libraryinfo(
      ::CRYSTAL_NET::service::LibraryInfo* libraryinfo);
  ::CRYSTAL_NET::service::LibraryInfo* unsafe_arena_release_libraryinfo();

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.LibraryInfoNty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::CRYSTAL_NET::service::LibraryInfo* libraryinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_library_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(43), nolog(false), XorEncrypt(false), KeyBase64(false)]
class GetLibraryInfoRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.GetLibraryInfoRes) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetLibraryInfoRes failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetLibraryInfoRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetLibraryInfoRes failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetLibraryInfoRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message GetLibraryInfoRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message GetLibraryInfoRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline GetLibraryInfoRes() : GetLibraryInfoRes(nullptr) {}
  ~GetLibraryInfoRes() override;
  explicit PROTOBUF_CONSTEXPR GetLibraryInfoRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLibraryInfoRes(const GetLibraryInfoRes& from);
  GetLibraryInfoRes(GetLibraryInfoRes&& from) noexcept
    : GetLibraryInfoRes() {
    *this = ::std::move(from);
  }

  inline GetLibraryInfoRes& operator=(const GetLibraryInfoRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLibraryInfoRes& operator=(GetLibraryInfoRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLibraryInfoRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLibraryInfoRes* internal_default_instance() {
    return reinterpret_cast<const GetLibraryInfoRes*>(
               &_GetLibraryInfoRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetLibraryInfoRes& a, GetLibraryInfoRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLibraryInfoRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLibraryInfoRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLibraryInfoRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLibraryInfoRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLibraryInfoRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetLibraryInfoRes& from) {
    GetLibraryInfoRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLibraryInfoRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.GetLibraryInfoRes";
  }
  protected:
  explicit GetLibraryInfoRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrCodeFieldNumber = 1,
  };
  // sint32 ErrCode = 1;
  void clear_errcode();
  int32_t errcode() const;
  void set_errcode(int32_t value);
  private:
  int32_t _internal_errcode() const;
  void _internal_set_errcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.GetLibraryInfoRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t errcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_library_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(44), nolog(false), XorEncrypt(false), KeyBase64(false)]
class CreateLibraryReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.CreateLibraryReq) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message CreateLibraryReq failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message CreateLibraryReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message CreateLibraryReq failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message CreateLibraryReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message CreateLibraryReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message CreateLibraryReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline CreateLibraryReq() : CreateLibraryReq(nullptr) {}
  ~CreateLibraryReq() override;
  explicit PROTOBUF_CONSTEXPR CreateLibraryReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateLibraryReq(const CreateLibraryReq& from);
  CreateLibraryReq(CreateLibraryReq&& from) noexcept
    : CreateLibraryReq() {
    *this = ::std::move(from);
  }

  inline CreateLibraryReq& operator=(const CreateLibraryReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateLibraryReq& operator=(CreateLibraryReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateLibraryReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateLibraryReq* internal_default_instance() {
    return reinterpret_cast<const CreateLibraryReq*>(
               &_CreateLibraryReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateLibraryReq& a, CreateLibraryReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateLibraryReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateLibraryReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateLibraryReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateLibraryReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateLibraryReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateLibraryReq& from) {
    CreateLibraryReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateLibraryReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.CreateLibraryReq";
  }
  protected:
  explicit CreateLibraryReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInviteCodeFieldNumber = 1,
    kNameFieldNumber = 2,
    kAddressFieldNumber = 3,
    kOpenTimeFieldNumber = 4,
    kTelphoneNumberFieldNumber = 5,
    kBindPhoneFieldNumber = 6,
  };
  // string InviteCode = 1;
  void clear_invitecode();
  const std::string& invitecode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_invitecode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_invitecode();
  PROTOBUF_NODISCARD std::string* release_invitecode();
  void set_allocated_invitecode(std::string* invitecode);
  private:
  const std::string& _internal_invitecode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_invitecode(const std::string& value);
  std::string* _internal_mutable_invitecode();
  public:

  // string Name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string Address = 3;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string OpenTime = 4;
  void clear_opentime();
  const std::string& opentime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_opentime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_opentime();
  PROTOBUF_NODISCARD std::string* release_opentime();
  void set_allocated_opentime(std::string* opentime);
  private:
  const std::string& _internal_opentime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_opentime(const std::string& value);
  std::string* _internal_mutable_opentime();
  public:

  // string TelphoneNumber = 5;
  void clear_telphonenumber();
  const std::string& telphonenumber() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_telphonenumber(ArgT0&& arg0, ArgT... args);
  std::string* mutable_telphonenumber();
  PROTOBUF_NODISCARD std::string* release_telphonenumber();
  void set_allocated_telphonenumber(std::string* telphonenumber);
  private:
  const std::string& _internal_telphonenumber() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_telphonenumber(const std::string& value);
  std::string* _internal_mutable_telphonenumber();
  public:

  // uint64 BindPhone = 6;
  void clear_bindphone();
  uint64_t bindphone() const;
  void set_bindphone(uint64_t value);
  private:
  uint64_t _internal_bindphone() const;
  void _internal_set_bindphone(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.CreateLibraryReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invitecode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr opentime_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr telphonenumber_;
    uint64_t bindphone_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_library_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(45), nolog(false), XorEncrypt(false), KeyBase64(false)]
class CreateLibraryRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.CreateLibraryRes) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message CreateLibraryRes failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message CreateLibraryRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message CreateLibraryRes failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message CreateLibraryRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message CreateLibraryRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message CreateLibraryRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline CreateLibraryRes() : CreateLibraryRes(nullptr) {}
  ~CreateLibraryRes() override;
  explicit PROTOBUF_CONSTEXPR CreateLibraryRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateLibraryRes(const CreateLibraryRes& from);
  CreateLibraryRes(CreateLibraryRes&& from) noexcept
    : CreateLibraryRes() {
    *this = ::std::move(from);
  }

  inline CreateLibraryRes& operator=(const CreateLibraryRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateLibraryRes& operator=(CreateLibraryRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateLibraryRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateLibraryRes* internal_default_instance() {
    return reinterpret_cast<const CreateLibraryRes*>(
               &_CreateLibraryRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CreateLibraryRes& a, CreateLibraryRes& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateLibraryRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateLibraryRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateLibraryRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateLibraryRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateLibraryRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateLibraryRes& from) {
    CreateLibraryRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateLibraryRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.CreateLibraryRes";
  }
  protected:
  explicit CreateLibraryRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrCodeFieldNumber = 1,
  };
  // sint32 ErrCode = 1;
  void clear_errcode();
  int32_t errcode() const;
  void set_errcode(int32_t value);
  private:
  int32_t _internal_errcode() const;
  void _internal_set_errcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.CreateLibraryRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t errcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_library_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(47), nolog(false), XorEncrypt(false), KeyBase64(false)]
class JoinLibraryReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.JoinLibraryReq) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message JoinLibraryReq failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message JoinLibraryReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message JoinLibraryReq failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message JoinLibraryReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message JoinLibraryReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message JoinLibraryReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline JoinLibraryReq() : JoinLibraryReq(nullptr) {}
  ~JoinLibraryReq() override;
  explicit PROTOBUF_CONSTEXPR JoinLibraryReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinLibraryReq(const JoinLibraryReq& from);
  JoinLibraryReq(JoinLibraryReq&& from) noexcept
    : JoinLibraryReq() {
    *this = ::std::move(from);
  }

  inline JoinLibraryReq& operator=(const JoinLibraryReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinLibraryReq& operator=(JoinLibraryReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JoinLibraryReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinLibraryReq* internal_default_instance() {
    return reinterpret_cast<const JoinLibraryReq*>(
               &_JoinLibraryReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(JoinLibraryReq& a, JoinLibraryReq& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinLibraryReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinLibraryReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JoinLibraryReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JoinLibraryReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JoinLibraryReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JoinLibraryReq& from) {
    JoinLibraryReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinLibraryReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.JoinLibraryReq";
  }
  protected:
  explicit JoinLibraryReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLibraryIdFieldNumber = 1,
  };
  // uint64 LibraryId = 1;
  void clear_libraryid();
  uint64_t libraryid() const;
  void set_libraryid(uint64_t value);
  private:
  uint64_t _internal_libraryid() const;
  void _internal_set_libraryid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.JoinLibraryReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t libraryid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_library_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(48), nolog(false), XorEncrypt(false), KeyBase64(false)]
class JoinLibraryRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.JoinLibraryRes) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message JoinLibraryRes failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message JoinLibraryRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message JoinLibraryRes failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message JoinLibraryRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message JoinLibraryRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message JoinLibraryRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline JoinLibraryRes() : JoinLibraryRes(nullptr) {}
  ~JoinLibraryRes() override;
  explicit PROTOBUF_CONSTEXPR JoinLibraryRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinLibraryRes(const JoinLibraryRes& from);
  JoinLibraryRes(JoinLibraryRes&& from) noexcept
    : JoinLibraryRes() {
    *this = ::std::move(from);
  }

  inline JoinLibraryRes& operator=(const JoinLibraryRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinLibraryRes& operator=(JoinLibraryRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JoinLibraryRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinLibraryRes* internal_default_instance() {
    return reinterpret_cast<const JoinLibraryRes*>(
               &_JoinLibraryRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(JoinLibraryRes& a, JoinLibraryRes& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinLibraryRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinLibraryRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JoinLibraryRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JoinLibraryRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JoinLibraryRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JoinLibraryRes& from) {
    JoinLibraryRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinLibraryRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.JoinLibraryRes";
  }
  protected:
  explicit JoinLibraryRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrCodeFieldNumber = 1,
  };
  // sint32 ErrCode = 1;
  void clear_errcode();
  int32_t errcode() const;
  void set_errcode(int32_t value);
  private:
  int32_t _internal_errcode() const;
  void _internal_set_errcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.JoinLibraryRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t errcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_library_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(51), nolog(false), XorEncrypt(false), KeyBase64(false)]
class QuitLibraryReq final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.QuitLibraryReq) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message QuitLibraryReq failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message QuitLibraryReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message QuitLibraryReq failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message QuitLibraryReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message QuitLibraryReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message QuitLibraryReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline QuitLibraryReq() : QuitLibraryReq(nullptr) {}
  explicit PROTOBUF_CONSTEXPR QuitLibraryReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuitLibraryReq(const QuitLibraryReq& from);
  QuitLibraryReq(QuitLibraryReq&& from) noexcept
    : QuitLibraryReq() {
    *this = ::std::move(from);
  }

  inline QuitLibraryReq& operator=(const QuitLibraryReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuitLibraryReq& operator=(QuitLibraryReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuitLibraryReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuitLibraryReq* internal_default_instance() {
    return reinterpret_cast<const QuitLibraryReq*>(
               &_QuitLibraryReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(QuitLibraryReq& a, QuitLibraryReq& b) {
    a.Swap(&b);
  }
  inline void Swap(QuitLibraryReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuitLibraryReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuitLibraryReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuitLibraryReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const QuitLibraryReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const QuitLibraryReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.QuitLibraryReq";
  }
  protected:
  explicit QuitLibraryReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.QuitLibraryReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_library_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(52), nolog(false), XorEncrypt(false), KeyBase64(false)]
class QuitLibraryRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.QuitLibraryRes) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message QuitLibraryRes failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message QuitLibraryRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message QuitLibraryRes failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message QuitLibraryRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message QuitLibraryRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message QuitLibraryRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline QuitLibraryRes() : QuitLibraryRes(nullptr) {}
  ~QuitLibraryRes() override;
  explicit PROTOBUF_CONSTEXPR QuitLibraryRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuitLibraryRes(const QuitLibraryRes& from);
  QuitLibraryRes(QuitLibraryRes&& from) noexcept
    : QuitLibraryRes() {
    *this = ::std::move(from);
  }

  inline QuitLibraryRes& operator=(const QuitLibraryRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuitLibraryRes& operator=(QuitLibraryRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuitLibraryRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuitLibraryRes* internal_default_instance() {
    return reinterpret_cast<const QuitLibraryRes*>(
               &_QuitLibraryRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(QuitLibraryRes& a, QuitLibraryRes& b) {
    a.Swap(&b);
  }
  inline void Swap(QuitLibraryRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuitLibraryRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuitLibraryRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuitLibraryRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QuitLibraryRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QuitLibraryRes& from) {
    QuitLibraryRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuitLibraryRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.QuitLibraryRes";
  }
  protected:
  explicit QuitLibraryRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrCodeFieldNumber = 1,
  };
  // sint32 ErrCode = 1;
  void clear_errcode();
  int32_t errcode() const;
  void set_errcode(int32_t value);
  private:
  int32_t _internal_errcode() const;
  void _internal_set_errcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.QuitLibraryRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t errcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_library_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(49), nolog(false), XorEncrypt(false), KeyBase64(false)]
class GetLibraryListReq final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.GetLibraryListReq) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetLibraryListReq failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetLibraryListReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetLibraryListReq failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetLibraryListReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message GetLibraryListReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message GetLibraryListReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline GetLibraryListReq() : GetLibraryListReq(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetLibraryListReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLibraryListReq(const GetLibraryListReq& from);
  GetLibraryListReq(GetLibraryListReq&& from) noexcept
    : GetLibraryListReq() {
    *this = ::std::move(from);
  }

  inline GetLibraryListReq& operator=(const GetLibraryListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLibraryListReq& operator=(GetLibraryListReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLibraryListReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLibraryListReq* internal_default_instance() {
    return reinterpret_cast<const GetLibraryListReq*>(
               &_GetLibraryListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetLibraryListReq& a, GetLibraryListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLibraryListReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLibraryListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLibraryListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLibraryListReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetLibraryListReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetLibraryListReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.GetLibraryListReq";
  }
  protected:
  explicit GetLibraryListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.GetLibraryListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_library_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(50), nolog(false), XorEncrypt(false), KeyBase64(false)]
class GetLibraryListRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.GetLibraryListRes) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetLibraryListRes failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetLibraryListRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetLibraryListRes failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetLibraryListRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message GetLibraryListRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message GetLibraryListRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline GetLibraryListRes() : GetLibraryListRes(nullptr) {}
  ~GetLibraryListRes() override;
  explicit PROTOBUF_CONSTEXPR GetLibraryListRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLibraryListRes(const GetLibraryListRes& from);
  GetLibraryListRes(GetLibraryListRes&& from) noexcept
    : GetLibraryListRes() {
    *this = ::std::move(from);
  }

  inline GetLibraryListRes& operator=(const GetLibraryListRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLibraryListRes& operator=(GetLibraryListRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLibraryListRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLibraryListRes* internal_default_instance() {
    return reinterpret_cast<const GetLibraryListRes*>(
               &_GetLibraryListRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetLibraryListRes& a, GetLibraryListRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLibraryListRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLibraryListRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLibraryListRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLibraryListRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLibraryListRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetLibraryListRes& from) {
    GetLibraryListRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLibraryListRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.GetLibraryListRes";
  }
  protected:
  explicit GetLibraryListRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLibraryPreviewInfoListFieldNumber = 1,
  };
  // repeated .CRYSTAL_NET.service.LibraryPreviewInfo LibraryPreviewInfoList = 1;
  int librarypreviewinfolist_size() const;
  private:
  int _internal_librarypreviewinfolist_size() const;
  public:
  void clear_librarypreviewinfolist();
  ::CRYSTAL_NET::service::LibraryPreviewInfo* mutable_librarypreviewinfolist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRYSTAL_NET::service::LibraryPreviewInfo >*
      mutable_librarypreviewinfolist();
  private:
  const ::CRYSTAL_NET::service::LibraryPreviewInfo& _internal_librarypreviewinfolist(int index) const;
  ::CRYSTAL_NET::service::LibraryPreviewInfo* _internal_add_librarypreviewinfolist();
  public:
  const ::CRYSTAL_NET::service::LibraryPreviewInfo& librarypreviewinfolist(int index) const;
  ::CRYSTAL_NET::service::LibraryPreviewInfo* add_librarypreviewinfolist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRYSTAL_NET::service::LibraryPreviewInfo >&
      librarypreviewinfolist() const;

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.GetLibraryListRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRYSTAL_NET::service::LibraryPreviewInfo > librarypreviewinfolist_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_library_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(53), nolog(false), XorEncrypt(false), KeyBase64(false)]
class TransferLibraianReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.TransferLibraianReq) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message TransferLibraianReq failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message TransferLibraianReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message TransferLibraianReq failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message TransferLibraianReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message TransferLibraianReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message TransferLibraianReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline TransferLibraianReq() : TransferLibraianReq(nullptr) {}
  ~TransferLibraianReq() override;
  explicit PROTOBUF_CONSTEXPR TransferLibraianReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransferLibraianReq(const TransferLibraianReq& from);
  TransferLibraianReq(TransferLibraianReq&& from) noexcept
    : TransferLibraianReq() {
    *this = ::std::move(from);
  }

  inline TransferLibraianReq& operator=(const TransferLibraianReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferLibraianReq& operator=(TransferLibraianReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransferLibraianReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransferLibraianReq* internal_default_instance() {
    return reinterpret_cast<const TransferLibraianReq*>(
               &_TransferLibraianReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TransferLibraianReq& a, TransferLibraianReq& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferLibraianReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferLibraianReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransferLibraianReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransferLibraianReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransferLibraianReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransferLibraianReq& from) {
    TransferLibraianReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferLibraianReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.TransferLibraianReq";
  }
  protected:
  explicit TransferLibraianReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetUserIdFieldNumber = 1,
  };
  // uint64 TargetUserId = 1;
  void clear_targetuserid();
  uint64_t targetuserid() const;
  void set_targetuserid(uint64_t value);
  private:
  uint64_t _internal_targetuserid() const;
  void _internal_set_targetuserid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.TransferLibraianReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t targetuserid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_library_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(54), nolog(false), XorEncrypt(false), KeyBase64(false)]
class TransferLibraianRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.TransferLibraianRes) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message TransferLibraianRes failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message TransferLibraianRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message TransferLibraianRes failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message TransferLibraianRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message TransferLibraianRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message TransferLibraianRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline TransferLibraianRes() : TransferLibraianRes(nullptr) {}
  ~TransferLibraianRes() override;
  explicit PROTOBUF_CONSTEXPR TransferLibraianRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransferLibraianRes(const TransferLibraianRes& from);
  TransferLibraianRes(TransferLibraianRes&& from) noexcept
    : TransferLibraianRes() {
    *this = ::std::move(from);
  }

  inline TransferLibraianRes& operator=(const TransferLibraianRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferLibraianRes& operator=(TransferLibraianRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransferLibraianRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransferLibraianRes* internal_default_instance() {
    return reinterpret_cast<const TransferLibraianRes*>(
               &_TransferLibraianRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(TransferLibraianRes& a, TransferLibraianRes& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferLibraianRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferLibraianRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransferLibraianRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransferLibraianRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransferLibraianRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransferLibraianRes& from) {
    TransferLibraianRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferLibraianRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.TransferLibraianRes";
  }
  protected:
  explicit TransferLibraianRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrCodeFieldNumber = 1,
  };
  // sint32 ErrCode = 1;
  void clear_errcode();
  int32_t errcode() const;
  void set_errcode(int32_t value);
  private:
  int32_t _internal_errcode() const;
  void _internal_set_errcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.TransferLibraianRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t errcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_library_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(55), nolog(false), XorEncrypt(false), KeyBase64(false)]
class ModifyMemberInfoReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.ModifyMemberInfoReq) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message ModifyMemberInfoReq failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message ModifyMemberInfoReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message ModifyMemberInfoReq failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message ModifyMemberInfoReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message ModifyMemberInfoReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message ModifyMemberInfoReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline ModifyMemberInfoReq() : ModifyMemberInfoReq(nullptr) {}
  ~ModifyMemberInfoReq() override;
  explicit PROTOBUF_CONSTEXPR ModifyMemberInfoReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModifyMemberInfoReq(const ModifyMemberInfoReq& from);
  ModifyMemberInfoReq(ModifyMemberInfoReq&& from) noexcept
    : ModifyMemberInfoReq() {
    *this = ::std::move(from);
  }

  inline ModifyMemberInfoReq& operator=(const ModifyMemberInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModifyMemberInfoReq& operator=(ModifyMemberInfoReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModifyMemberInfoReq& default_instance() {
    return *internal_default_instance();
  }
  enum ModifyRoleCase {
    kNewRole = 2,
    MODIFYROLE_NOT_SET = 0,
  };

  enum ModifyPhoneNumberCase {
    kNewMemberPhone = 3,
    MODIFYPHONENUMBER_NOT_SET = 0,
  };

  static inline const ModifyMemberInfoReq* internal_default_instance() {
    return reinterpret_cast<const ModifyMemberInfoReq*>(
               &_ModifyMemberInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ModifyMemberInfoReq& a, ModifyMemberInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ModifyMemberInfoReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModifyMemberInfoReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModifyMemberInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModifyMemberInfoReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModifyMemberInfoReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ModifyMemberInfoReq& from) {
    ModifyMemberInfoReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModifyMemberInfoReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.ModifyMemberInfoReq";
  }
  protected:
  explicit ModifyMemberInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberUserIdFieldNumber = 1,
    kNewRoleFieldNumber = 2,
    kNewMemberPhoneFieldNumber = 3,
  };
  // uint64 memberUserId = 1;
  void clear_memberuserid();
  uint64_t memberuserid() const;
  void set_memberuserid(uint64_t value);
  private:
  uint64_t _internal_memberuserid() const;
  void _internal_set_memberuserid(uint64_t value);
  public:

  // sint32 newRole = 2;
  bool has_newrole() const;
  private:
  bool _internal_has_newrole() const;
  public:
  void clear_newrole();
  int32_t newrole() const;
  void set_newrole(int32_t value);
  private:
  int32_t _internal_newrole() const;
  void _internal_set_newrole(int32_t value);
  public:

  // uint64 newMemberPhone = 3;
  bool has_newmemberphone() const;
  private:
  bool _internal_has_newmemberphone() const;
  public:
  void clear_newmemberphone();
  uint64_t newmemberphone() const;
  void set_newmemberphone(uint64_t value);
  private:
  uint64_t _internal_newmemberphone() const;
  void _internal_set_newmemberphone(uint64_t value);
  public:

  void clear_ModifyRole();
  ModifyRoleCase ModifyRole_case() const;
  void clear_ModifyPhoneNumber();
  ModifyPhoneNumberCase ModifyPhoneNumber_case() const;
  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.ModifyMemberInfoReq)
 private:
  class _Internal;
  void set_has_newrole();
  void set_has_newmemberphone();

  inline bool has_ModifyRole() const;
  inline void clear_has_ModifyRole();

  inline bool has_ModifyPhoneNumber() const;
  inline void clear_has_ModifyPhoneNumber();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t memberuserid_;
    union ModifyRoleUnion {
      constexpr ModifyRoleUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int32_t newrole_;
    } ModifyRole_;
    union ModifyPhoneNumberUnion {
      constexpr ModifyPhoneNumberUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint64_t newmemberphone_;
    } ModifyPhoneNumber_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[2];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_library_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(56), nolog(false), XorEncrypt(false), KeyBase64(false)]
class ModifyMemberInfoRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.ModifyMemberInfoRes) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message ModifyMemberInfoRes failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message ModifyMemberInfoRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message ModifyMemberInfoRes failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message ModifyMemberInfoRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message ModifyMemberInfoRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message ModifyMemberInfoRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline ModifyMemberInfoRes() : ModifyMemberInfoRes(nullptr) {}
  ~ModifyMemberInfoRes() override;
  explicit PROTOBUF_CONSTEXPR ModifyMemberInfoRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModifyMemberInfoRes(const ModifyMemberInfoRes& from);
  ModifyMemberInfoRes(ModifyMemberInfoRes&& from) noexcept
    : ModifyMemberInfoRes() {
    *this = ::std::move(from);
  }

  inline ModifyMemberInfoRes& operator=(const ModifyMemberInfoRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModifyMemberInfoRes& operator=(ModifyMemberInfoRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModifyMemberInfoRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModifyMemberInfoRes* internal_default_instance() {
    return reinterpret_cast<const ModifyMemberInfoRes*>(
               &_ModifyMemberInfoRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ModifyMemberInfoRes& a, ModifyMemberInfoRes& b) {
    a.Swap(&b);
  }
  inline void Swap(ModifyMemberInfoRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModifyMemberInfoRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModifyMemberInfoRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModifyMemberInfoRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModifyMemberInfoRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ModifyMemberInfoRes& from) {
    ModifyMemberInfoRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModifyMemberInfoRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.ModifyMemberInfoRes";
  }
  protected:
  explicit ModifyMemberInfoRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrCodeFieldNumber = 1,
  };
  // sint32 ErrCode = 1;
  void clear_errcode();
  int32_t errcode() const;
  void set_errcode(int32_t value);
  private:
  int32_t _internal_errcode() const;
  void _internal_set_errcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.ModifyMemberInfoRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t errcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_library_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(57), nolog(false), XorEncrypt(false), KeyBase64(false)]
class UserLibraryInfoNty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.UserLibraryInfoNty) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message UserLibraryInfoNty failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message UserLibraryInfoNty failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message UserLibraryInfoNty failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message UserLibraryInfoNty failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message UserLibraryInfoNty failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message UserLibraryInfoNty failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline UserLibraryInfoNty() : UserLibraryInfoNty(nullptr) {}
  ~UserLibraryInfoNty() override;
  explicit PROTOBUF_CONSTEXPR UserLibraryInfoNty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserLibraryInfoNty(const UserLibraryInfoNty& from);
  UserLibraryInfoNty(UserLibraryInfoNty&& from) noexcept
    : UserLibraryInfoNty() {
    *this = ::std::move(from);
  }

  inline UserLibraryInfoNty& operator=(const UserLibraryInfoNty& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLibraryInfoNty& operator=(UserLibraryInfoNty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserLibraryInfoNty& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserLibraryInfoNty* internal_default_instance() {
    return reinterpret_cast<const UserLibraryInfoNty*>(
               &_UserLibraryInfoNty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(UserLibraryInfoNty& a, UserLibraryInfoNty& b) {
    a.Swap(&b);
  }
  inline void Swap(UserLibraryInfoNty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserLibraryInfoNty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserLibraryInfoNty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserLibraryInfoNty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserLibraryInfoNty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserLibraryInfoNty& from) {
    UserLibraryInfoNty::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLibraryInfoNty* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.UserLibraryInfoNty";
  }
  protected:
  explicit UserLibraryInfoNty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserLibraryInfoFieldNumber = 1,
  };
  // .CRYSTAL_NET.service.UserLibraryInfo UserLibraryInfo = 1;
  bool has_userlibraryinfo() const;
  private:
  bool _internal_has_userlibraryinfo() const;
  public:
  void clear_userlibraryinfo();
  const ::CRYSTAL_NET::service::UserLibraryInfo& userlibraryinfo() const;
  PROTOBUF_NODISCARD ::CRYSTAL_NET::service::UserLibraryInfo* release_userlibraryinfo();
  ::CRYSTAL_NET::service::UserLibraryInfo* mutable_userlibraryinfo();
  void set_allocated_userlibraryinfo(::CRYSTAL_NET::service::UserLibraryInfo* userlibraryinfo);
  private:
  const ::CRYSTAL_NET::service::UserLibraryInfo& _internal_userlibraryinfo() const;
  ::CRYSTAL_NET::service::UserLibraryInfo* _internal_mutable_userlibraryinfo();
  public:
  void unsafe_arena_set_allocated_userlibraryinfo(
      ::CRYSTAL_NET::service::UserLibraryInfo* userlibraryinfo);
  ::CRYSTAL_NET::service::UserLibraryInfo* unsafe_arena_release_userlibraryinfo();

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.UserLibraryInfoNty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::CRYSTAL_NET::service::UserLibraryInfo* userlibraryinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_library_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(62), nolog(false), XorEncrypt(false), KeyBase64(false)]
class GetLibraryMemberSimpleInfoReq final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.GetLibraryMemberSimpleInfoReq) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetLibraryMemberSimpleInfoReq failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetLibraryMemberSimpleInfoReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetLibraryMemberSimpleInfoReq failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetLibraryMemberSimpleInfoReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message GetLibraryMemberSimpleInfoReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message GetLibraryMemberSimpleInfoReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline GetLibraryMemberSimpleInfoReq() : GetLibraryMemberSimpleInfoReq(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetLibraryMemberSimpleInfoReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLibraryMemberSimpleInfoReq(const GetLibraryMemberSimpleInfoReq& from);
  GetLibraryMemberSimpleInfoReq(GetLibraryMemberSimpleInfoReq&& from) noexcept
    : GetLibraryMemberSimpleInfoReq() {
    *this = ::std::move(from);
  }

  inline GetLibraryMemberSimpleInfoReq& operator=(const GetLibraryMemberSimpleInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLibraryMemberSimpleInfoReq& operator=(GetLibraryMemberSimpleInfoReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLibraryMemberSimpleInfoReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLibraryMemberSimpleInfoReq* internal_default_instance() {
    return reinterpret_cast<const GetLibraryMemberSimpleInfoReq*>(
               &_GetLibraryMemberSimpleInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GetLibraryMemberSimpleInfoReq& a, GetLibraryMemberSimpleInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLibraryMemberSimpleInfoReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLibraryMemberSimpleInfoReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLibraryMemberSimpleInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLibraryMemberSimpleInfoReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetLibraryMemberSimpleInfoReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetLibraryMemberSimpleInfoReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.GetLibraryMemberSimpleInfoReq";
  }
  protected:
  explicit GetLibraryMemberSimpleInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.GetLibraryMemberSimpleInfoReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_library_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(63), nolog(false), XorEncrypt(false), KeyBase64(false)]
class GetLibraryMemberSimpleInfoRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.GetLibraryMemberSimpleInfoRes) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetLibraryMemberSimpleInfoRes failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetLibraryMemberSimpleInfoRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetLibraryMemberSimpleInfoRes failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetLibraryMemberSimpleInfoRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message GetLibraryMemberSimpleInfoRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message GetLibraryMemberSimpleInfoRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline GetLibraryMemberSimpleInfoRes() : GetLibraryMemberSimpleInfoRes(nullptr) {}
  ~GetLibraryMemberSimpleInfoRes() override;
  explicit PROTOBUF_CONSTEXPR GetLibraryMemberSimpleInfoRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLibraryMemberSimpleInfoRes(const GetLibraryMemberSimpleInfoRes& from);
  GetLibraryMemberSimpleInfoRes(GetLibraryMemberSimpleInfoRes&& from) noexcept
    : GetLibraryMemberSimpleInfoRes() {
    *this = ::std::move(from);
  }

  inline GetLibraryMemberSimpleInfoRes& operator=(const GetLibraryMemberSimpleInfoRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLibraryMemberSimpleInfoRes& operator=(GetLibraryMemberSimpleInfoRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLibraryMemberSimpleInfoRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLibraryMemberSimpleInfoRes* internal_default_instance() {
    return reinterpret_cast<const GetLibraryMemberSimpleInfoRes*>(
               &_GetLibraryMemberSimpleInfoRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GetLibraryMemberSimpleInfoRes& a, GetLibraryMemberSimpleInfoRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLibraryMemberSimpleInfoRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLibraryMemberSimpleInfoRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLibraryMemberSimpleInfoRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLibraryMemberSimpleInfoRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLibraryMemberSimpleInfoRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetLibraryMemberSimpleInfoRes& from) {
    GetLibraryMemberSimpleInfoRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLibraryMemberSimpleInfoRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.GetLibraryMemberSimpleInfoRes";
  }
  protected:
  explicit GetLibraryMemberSimpleInfoRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSimpleUserInfoListFieldNumber = 2,
    kErrCodeFieldNumber = 1,
  };
  // repeated .CRYSTAL_NET.service.SimpleUserInfo SimpleUserInfoList = 2;
  int simpleuserinfolist_size() const;
  private:
  int _internal_simpleuserinfolist_size() const;
  public:
  void clear_simpleuserinfolist();
  ::CRYSTAL_NET::service::SimpleUserInfo* mutable_simpleuserinfolist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRYSTAL_NET::service::SimpleUserInfo >*
      mutable_simpleuserinfolist();
  private:
  const ::CRYSTAL_NET::service::SimpleUserInfo& _internal_simpleuserinfolist(int index) const;
  ::CRYSTAL_NET::service::SimpleUserInfo* _internal_add_simpleuserinfolist();
  public:
  const ::CRYSTAL_NET::service::SimpleUserInfo& simpleuserinfolist(int index) const;
  ::CRYSTAL_NET::service::SimpleUserInfo* add_simpleuserinfolist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRYSTAL_NET::service::SimpleUserInfo >&
      simpleuserinfolist() const;

  // sint32 ErrCode = 1;
  void clear_errcode();
  int32_t errcode() const;
  void set_errcode(int32_t value);
  private:
  int32_t _internal_errcode() const;
  void _internal_set_errcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.GetLibraryMemberSimpleInfoRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRYSTAL_NET::service::SimpleUserInfo > simpleuserinfolist_;
    int32_t errcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_library_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(64), nolog(false), XorEncrypt(false), KeyBase64(false)]
class AddLibraryBookReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.AddLibraryBookReq) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message AddLibraryBookReq failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message AddLibraryBookReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message AddLibraryBookReq failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message AddLibraryBookReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message AddLibraryBookReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message AddLibraryBookReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline AddLibraryBookReq() : AddLibraryBookReq(nullptr) {}
  ~AddLibraryBookReq() override;
  explicit PROTOBUF_CONSTEXPR AddLibraryBookReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddLibraryBookReq(const AddLibraryBookReq& from);
  AddLibraryBookReq(AddLibraryBookReq&& from) noexcept
    : AddLibraryBookReq() {
    *this = ::std::move(from);
  }

  inline AddLibraryBookReq& operator=(const AddLibraryBookReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddLibraryBookReq& operator=(AddLibraryBookReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddLibraryBookReq& default_instance() {
    return *internal_default_instance();
  }
  enum BookCoverImageOptionCase {
    kBookCoverImage = 3,
    BOOKCOVERIMAGEOPTION_NOT_SET = 0,
  };

  enum KeyWordsOptionCase {
    kKeyWords = 6,
    KEYWORDSOPTION_NOT_SET = 0,
  };

  enum ContentOptionCase {
    kContent = 7,
    CONTENTOPTION_NOT_SET = 0,
  };

  enum SnapshotOptionCase {
    kSnapshot = 8,
    SNAPSHOTOPTION_NOT_SET = 0,
  };

  static inline const AddLibraryBookReq* internal_default_instance() {
    return reinterpret_cast<const AddLibraryBookReq*>(
               &_AddLibraryBookReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(AddLibraryBookReq& a, AddLibraryBookReq& b) {
    a.Swap(&b);
  }
  inline void Swap(AddLibraryBookReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddLibraryBookReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddLibraryBookReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddLibraryBookReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddLibraryBookReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddLibraryBookReq& from) {
    AddLibraryBookReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddLibraryBookReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.AddLibraryBookReq";
  }
  protected:
  explicit AddLibraryBookReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBookNameFieldNumber = 1,
    kIsbnCodeFieldNumber = 2,
    kPriceFieldNumber = 4,
    kModifyCountFieldNumber = 5,
    kBookCoverImageFieldNumber = 3,
    kKeyWordsFieldNumber = 6,
    kContentFieldNumber = 7,
    kSnapshotFieldNumber = 8,
  };
  // string BookName = 1;
  void clear_bookname();
  const std::string& bookname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bookname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bookname();
  PROTOBUF_NODISCARD std::string* release_bookname();
  void set_allocated_bookname(std::string* bookname);
  private:
  const std::string& _internal_bookname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bookname(const std::string& value);
  std::string* _internal_mutable_bookname();
  public:

  // string IsbnCode = 2;
  void clear_isbncode();
  const std::string& isbncode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_isbncode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_isbncode();
  PROTOBUF_NODISCARD std::string* release_isbncode();
  void set_allocated_isbncode(std::string* isbncode);
  private:
  const std::string& _internal_isbncode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_isbncode(const std::string& value);
  std::string* _internal_mutable_isbncode();
  public:

  // sint64 Price = 4;
  void clear_price();
  int64_t price() const;
  void set_price(int64_t value);
  private:
  int64_t _internal_price() const;
  void _internal_set_price(int64_t value);
  public:

  // sint64 ModifyCount = 5;
  void clear_modifycount();
  int64_t modifycount() const;
  void set_modifycount(int64_t value);
  private:
  int64_t _internal_modifycount() const;
  void _internal_set_modifycount(int64_t value);
  public:

  // string BookCoverImage = 3;
  bool has_bookcoverimage() const;
  private:
  bool _internal_has_bookcoverimage() const;
  public:
  void clear_bookcoverimage();
  const std::string& bookcoverimage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bookcoverimage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bookcoverimage();
  PROTOBUF_NODISCARD std::string* release_bookcoverimage();
  void set_allocated_bookcoverimage(std::string* bookcoverimage);
  private:
  const std::string& _internal_bookcoverimage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bookcoverimage(const std::string& value);
  std::string* _internal_mutable_bookcoverimage();
  public:

  // .CRYSTAL_NET.service.KeyWordsField KeyWords = 6;
  bool has_keywords() const;
  private:
  bool _internal_has_keywords() const;
  public:
  void clear_keywords();
  const ::CRYSTAL_NET::service::KeyWordsField& keywords() const;
  PROTOBUF_NODISCARD ::CRYSTAL_NET::service::KeyWordsField* release_keywords();
  ::CRYSTAL_NET::service::KeyWordsField* mutable_keywords();
  void set_allocated_keywords(::CRYSTAL_NET::service::KeyWordsField* keywords);
  private:
  const ::CRYSTAL_NET::service::KeyWordsField& _internal_keywords() const;
  ::CRYSTAL_NET::service::KeyWordsField* _internal_mutable_keywords();
  public:
  void unsafe_arena_set_allocated_keywords(
      ::CRYSTAL_NET::service::KeyWordsField* keywords);
  ::CRYSTAL_NET::service::KeyWordsField* unsafe_arena_release_keywords();

  // string Content = 7;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // .CRYSTAL_NET.service.SnapshotField Snapshot = 8;
  bool has_snapshot() const;
  private:
  bool _internal_has_snapshot() const;
  public:
  void clear_snapshot();
  const ::CRYSTAL_NET::service::SnapshotField& snapshot() const;
  PROTOBUF_NODISCARD ::CRYSTAL_NET::service::SnapshotField* release_snapshot();
  ::CRYSTAL_NET::service::SnapshotField* mutable_snapshot();
  void set_allocated_snapshot(::CRYSTAL_NET::service::SnapshotField* snapshot);
  private:
  const ::CRYSTAL_NET::service::SnapshotField& _internal_snapshot() const;
  ::CRYSTAL_NET::service::SnapshotField* _internal_mutable_snapshot();
  public:
  void unsafe_arena_set_allocated_snapshot(
      ::CRYSTAL_NET::service::SnapshotField* snapshot);
  ::CRYSTAL_NET::service::SnapshotField* unsafe_arena_release_snapshot();

  void clear_BookCoverImageOption();
  BookCoverImageOptionCase BookCoverImageOption_case() const;
  void clear_KeyWordsOption();
  KeyWordsOptionCase KeyWordsOption_case() const;
  void clear_ContentOption();
  ContentOptionCase ContentOption_case() const;
  void clear_SnapshotOption();
  SnapshotOptionCase SnapshotOption_case() const;
  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.AddLibraryBookReq)
 private:
  class _Internal;
  void set_has_bookcoverimage();
  void set_has_keywords();
  void set_has_content();
  void set_has_snapshot();

  inline bool has_BookCoverImageOption() const;
  inline void clear_has_BookCoverImageOption();

  inline bool has_KeyWordsOption() const;
  inline void clear_has_KeyWordsOption();

  inline bool has_ContentOption() const;
  inline void clear_has_ContentOption();

  inline bool has_SnapshotOption() const;
  inline void clear_has_SnapshotOption();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bookname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr isbncode_;
    int64_t price_;
    int64_t modifycount_;
    union BookCoverImageOptionUnion {
      constexpr BookCoverImageOptionUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bookcoverimage_;
    } BookCoverImageOption_;
    union KeyWordsOptionUnion {
      constexpr KeyWordsOptionUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::CRYSTAL_NET::service::KeyWordsField* keywords_;
    } KeyWordsOption_;
    union ContentOptionUnion {
      constexpr ContentOptionUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    } ContentOption_;
    union SnapshotOptionUnion {
      constexpr SnapshotOptionUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::CRYSTAL_NET::service::SnapshotField* snapshot_;
    } SnapshotOption_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[4];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_library_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(65), nolog(false), XorEncrypt(false), KeyBase64(false)]
class AddLibraryBookRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.AddLibraryBookRes) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message AddLibraryBookRes failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message AddLibraryBookRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message AddLibraryBookRes failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message AddLibraryBookRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message AddLibraryBookRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message AddLibraryBookRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline AddLibraryBookRes() : AddLibraryBookRes(nullptr) {}
  ~AddLibraryBookRes() override;
  explicit PROTOBUF_CONSTEXPR AddLibraryBookRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddLibraryBookRes(const AddLibraryBookRes& from);
  AddLibraryBookRes(AddLibraryBookRes&& from) noexcept
    : AddLibraryBookRes() {
    *this = ::std::move(from);
  }

  inline AddLibraryBookRes& operator=(const AddLibraryBookRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddLibraryBookRes& operator=(AddLibraryBookRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddLibraryBookRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddLibraryBookRes* internal_default_instance() {
    return reinterpret_cast<const AddLibraryBookRes*>(
               &_AddLibraryBookRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(AddLibraryBookRes& a, AddLibraryBookRes& b) {
    a.Swap(&b);
  }
  inline void Swap(AddLibraryBookRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddLibraryBookRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddLibraryBookRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddLibraryBookRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddLibraryBookRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddLibraryBookRes& from) {
    AddLibraryBookRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddLibraryBookRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.AddLibraryBookRes";
  }
  protected:
  explicit AddLibraryBookRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrCodeFieldNumber = 1,
  };
  // sint32 ErrCode = 1;
  void clear_errcode();
  int32_t errcode() const;
  void set_errcode(int32_t value);
  private:
  int32_t _internal_errcode() const;
  void _internal_set_errcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.AddLibraryBookRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t errcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_library_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(66), nolog(false), XorEncrypt(false), KeyBase64(false)]
class AddLibraryBookCountReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.AddLibraryBookCountReq) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message AddLibraryBookCountReq failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message AddLibraryBookCountReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message AddLibraryBookCountReq failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message AddLibraryBookCountReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message AddLibraryBookCountReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message AddLibraryBookCountReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline AddLibraryBookCountReq() : AddLibraryBookCountReq(nullptr) {}
  ~AddLibraryBookCountReq() override;
  explicit PROTOBUF_CONSTEXPR AddLibraryBookCountReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddLibraryBookCountReq(const AddLibraryBookCountReq& from);
  AddLibraryBookCountReq(AddLibraryBookCountReq&& from) noexcept
    : AddLibraryBookCountReq() {
    *this = ::std::move(from);
  }

  inline AddLibraryBookCountReq& operator=(const AddLibraryBookCountReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddLibraryBookCountReq& operator=(AddLibraryBookCountReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddLibraryBookCountReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddLibraryBookCountReq* internal_default_instance() {
    return reinterpret_cast<const AddLibraryBookCountReq*>(
               &_AddLibraryBookCountReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(AddLibraryBookCountReq& a, AddLibraryBookCountReq& b) {
    a.Swap(&b);
  }
  inline void Swap(AddLibraryBookCountReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddLibraryBookCountReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddLibraryBookCountReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddLibraryBookCountReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddLibraryBookCountReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddLibraryBookCountReq& from) {
    AddLibraryBookCountReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddLibraryBookCountReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.AddLibraryBookCountReq";
  }
  protected:
  explicit AddLibraryBookCountReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBookIdFieldNumber = 1,
    kModifyCountFieldNumber = 2,
  };
  // uint64 BookId = 1;
  void clear_bookid();
  uint64_t bookid() const;
  void set_bookid(uint64_t value);
  private:
  uint64_t _internal_bookid() const;
  void _internal_set_bookid(uint64_t value);
  public:

  // sint64 ModifyCount = 2;
  void clear_modifycount();
  int64_t modifycount() const;
  void set_modifycount(int64_t value);
  private:
  int64_t _internal_modifycount() const;
  void _internal_set_modifycount(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.AddLibraryBookCountReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t bookid_;
    int64_t modifycount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_library_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(67), nolog(false), XorEncrypt(false), KeyBase64(false)]
class AddLibraryBookCountRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.AddLibraryBookCountRes) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message AddLibraryBookCountRes failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message AddLibraryBookCountRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message AddLibraryBookCountRes failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message AddLibraryBookCountRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message AddLibraryBookCountRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message AddLibraryBookCountRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline AddLibraryBookCountRes() : AddLibraryBookCountRes(nullptr) {}
  ~AddLibraryBookCountRes() override;
  explicit PROTOBUF_CONSTEXPR AddLibraryBookCountRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddLibraryBookCountRes(const AddLibraryBookCountRes& from);
  AddLibraryBookCountRes(AddLibraryBookCountRes&& from) noexcept
    : AddLibraryBookCountRes() {
    *this = ::std::move(from);
  }

  inline AddLibraryBookCountRes& operator=(const AddLibraryBookCountRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddLibraryBookCountRes& operator=(AddLibraryBookCountRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddLibraryBookCountRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddLibraryBookCountRes* internal_default_instance() {
    return reinterpret_cast<const AddLibraryBookCountRes*>(
               &_AddLibraryBookCountRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(AddLibraryBookCountRes& a, AddLibraryBookCountRes& b) {
    a.Swap(&b);
  }
  inline void Swap(AddLibraryBookCountRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddLibraryBookCountRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddLibraryBookCountRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddLibraryBookCountRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddLibraryBookCountRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddLibraryBookCountRes& from) {
    AddLibraryBookCountRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddLibraryBookCountRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.AddLibraryBookCountRes";
  }
  protected:
  explicit AddLibraryBookCountRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrCodeFieldNumber = 1,
  };
  // sint32 ErrCode = 1;
  void clear_errcode();
  int32_t errcode() const;
  void set_errcode(int32_t value);
  private:
  int32_t _internal_errcode() const;
  void _internal_set_errcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.AddLibraryBookCountRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t errcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_library_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(68), nolog(false), XorEncrypt(false), KeyBase64(false)]
class GetBookListReq final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.GetBookListReq) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetBookListReq failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetBookListReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetBookListReq failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetBookListReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message GetBookListReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message GetBookListReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline GetBookListReq() : GetBookListReq(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetBookListReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBookListReq(const GetBookListReq& from);
  GetBookListReq(GetBookListReq&& from) noexcept
    : GetBookListReq() {
    *this = ::std::move(from);
  }

  inline GetBookListReq& operator=(const GetBookListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBookListReq& operator=(GetBookListReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBookListReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBookListReq* internal_default_instance() {
    return reinterpret_cast<const GetBookListReq*>(
               &_GetBookListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(GetBookListReq& a, GetBookListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBookListReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBookListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBookListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBookListReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetBookListReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetBookListReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.GetBookListReq";
  }
  protected:
  explicit GetBookListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.GetBookListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_library_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(69), nolog(false), XorEncrypt(false), KeyBase64(false)]
class BookListNty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.BookListNty) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message BookListNty failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message BookListNty failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message BookListNty failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message BookListNty failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message BookListNty failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message BookListNty failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline BookListNty() : BookListNty(nullptr) {}
  ~BookListNty() override;
  explicit PROTOBUF_CONSTEXPR BookListNty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BookListNty(const BookListNty& from);
  BookListNty(BookListNty&& from) noexcept
    : BookListNty() {
    *this = ::std::move(from);
  }

  inline BookListNty& operator=(const BookListNty& from) {
    CopyFrom(from);
    return *this;
  }
  inline BookListNty& operator=(BookListNty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BookListNty& default_instance() {
    return *internal_default_instance();
  }
  static inline const BookListNty* internal_default_instance() {
    return reinterpret_cast<const BookListNty*>(
               &_BookListNty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(BookListNty& a, BookListNty& b) {
    a.Swap(&b);
  }
  inline void Swap(BookListNty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BookListNty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BookListNty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BookListNty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BookListNty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BookListNty& from) {
    BookListNty::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BookListNty* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.BookListNty";
  }
  protected:
  explicit BookListNty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBookInfoListFieldNumber = 1,
  };
  // repeated .CRYSTAL_NET.service.BookInfo BookInfoList = 1;
  int bookinfolist_size() const;
  private:
  int _internal_bookinfolist_size() const;
  public:
  void clear_bookinfolist();
  ::CRYSTAL_NET::service::BookInfo* mutable_bookinfolist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRYSTAL_NET::service::BookInfo >*
      mutable_bookinfolist();
  private:
  const ::CRYSTAL_NET::service::BookInfo& _internal_bookinfolist(int index) const;
  ::CRYSTAL_NET::service::BookInfo* _internal_add_bookinfolist();
  public:
  const ::CRYSTAL_NET::service::BookInfo& bookinfolist(int index) const;
  ::CRYSTAL_NET::service::BookInfo* add_bookinfolist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRYSTAL_NET::service::BookInfo >&
      bookinfolist() const;

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.BookListNty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRYSTAL_NET::service::BookInfo > bookinfolist_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_library_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(70), nolog(false), XorEncrypt(false), KeyBase64(false)]
class BooksChangeNty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.BooksChangeNty) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message BooksChangeNty failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message BooksChangeNty failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message BooksChangeNty failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message BooksChangeNty failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message BooksChangeNty failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message BooksChangeNty failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline BooksChangeNty() : BooksChangeNty(nullptr) {}
  ~BooksChangeNty() override;
  explicit PROTOBUF_CONSTEXPR BooksChangeNty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BooksChangeNty(const BooksChangeNty& from);
  BooksChangeNty(BooksChangeNty&& from) noexcept
    : BooksChangeNty() {
    *this = ::std::move(from);
  }

  inline BooksChangeNty& operator=(const BooksChangeNty& from) {
    CopyFrom(from);
    return *this;
  }
  inline BooksChangeNty& operator=(BooksChangeNty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BooksChangeNty& default_instance() {
    return *internal_default_instance();
  }
  static inline const BooksChangeNty* internal_default_instance() {
    return reinterpret_cast<const BooksChangeNty*>(
               &_BooksChangeNty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(BooksChangeNty& a, BooksChangeNty& b) {
    a.Swap(&b);
  }
  inline void Swap(BooksChangeNty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BooksChangeNty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BooksChangeNty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BooksChangeNty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BooksChangeNty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BooksChangeNty& from) {
    BooksChangeNty::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BooksChangeNty* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.BooksChangeNty";
  }
  protected:
  explicit BooksChangeNty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBookInfoListFieldNumber = 1,
  };
  // repeated .CRYSTAL_NET.service.BookInfo BookInfoList = 1;
  int bookinfolist_size() const;
  private:
  int _internal_bookinfolist_size() const;
  public:
  void clear_bookinfolist();
  ::CRYSTAL_NET::service::BookInfo* mutable_bookinfolist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRYSTAL_NET::service::BookInfo >*
      mutable_bookinfolist();
  private:
  const ::CRYSTAL_NET::service::BookInfo& _internal_bookinfolist(int index) const;
  ::CRYSTAL_NET::service::BookInfo* _internal_add_bookinfolist();
  public:
  const ::CRYSTAL_NET::service::BookInfo& bookinfolist(int index) const;
  ::CRYSTAL_NET::service::BookInfo* add_bookinfolist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRYSTAL_NET::service::BookInfo >&
      bookinfolist() const;

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.BooksChangeNty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRYSTAL_NET::service::BookInfo > bookinfolist_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_library_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(73), nolog(false), XorEncrypt(false), KeyBase64(false)]
class BookVariantInfoItemsNty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.BookVariantInfoItemsNty) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message BookVariantInfoItemsNty failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message BookVariantInfoItemsNty failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message BookVariantInfoItemsNty failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message BookVariantInfoItemsNty failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message BookVariantInfoItemsNty failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message BookVariantInfoItemsNty failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline BookVariantInfoItemsNty() : BookVariantInfoItemsNty(nullptr) {}
  ~BookVariantInfoItemsNty() override;
  explicit PROTOBUF_CONSTEXPR BookVariantInfoItemsNty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BookVariantInfoItemsNty(const BookVariantInfoItemsNty& from);
  BookVariantInfoItemsNty(BookVariantInfoItemsNty&& from) noexcept
    : BookVariantInfoItemsNty() {
    *this = ::std::move(from);
  }

  inline BookVariantInfoItemsNty& operator=(const BookVariantInfoItemsNty& from) {
    CopyFrom(from);
    return *this;
  }
  inline BookVariantInfoItemsNty& operator=(BookVariantInfoItemsNty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BookVariantInfoItemsNty& default_instance() {
    return *internal_default_instance();
  }
  static inline const BookVariantInfoItemsNty* internal_default_instance() {
    return reinterpret_cast<const BookVariantInfoItemsNty*>(
               &_BookVariantInfoItemsNty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(BookVariantInfoItemsNty& a, BookVariantInfoItemsNty& b) {
    a.Swap(&b);
  }
  inline void Swap(BookVariantInfoItemsNty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BookVariantInfoItemsNty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BookVariantInfoItemsNty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BookVariantInfoItemsNty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BookVariantInfoItemsNty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BookVariantInfoItemsNty& from) {
    BookVariantInfoItemsNty::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BookVariantInfoItemsNty* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.BookVariantInfoItemsNty";
  }
  protected:
  explicit BookVariantInfoItemsNty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBookVariantInfoItemListFieldNumber = 1,
  };
  // repeated .CRYSTAL_NET.service.BookVariantInfoItem BookVariantInfoItemList = 1;
  int bookvariantinfoitemlist_size() const;
  private:
  int _internal_bookvariantinfoitemlist_size() const;
  public:
  void clear_bookvariantinfoitemlist();
  ::CRYSTAL_NET::service::BookVariantInfoItem* mutable_bookvariantinfoitemlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRYSTAL_NET::service::BookVariantInfoItem >*
      mutable_bookvariantinfoitemlist();
  private:
  const ::CRYSTAL_NET::service::BookVariantInfoItem& _internal_bookvariantinfoitemlist(int index) const;
  ::CRYSTAL_NET::service::BookVariantInfoItem* _internal_add_bookvariantinfoitemlist();
  public:
  const ::CRYSTAL_NET::service::BookVariantInfoItem& bookvariantinfoitemlist(int index) const;
  ::CRYSTAL_NET::service::BookVariantInfoItem* add_bookvariantinfoitemlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRYSTAL_NET::service::BookVariantInfoItem >&
      bookvariantinfoitemlist() const;

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.BookVariantInfoItemsNty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRYSTAL_NET::service::BookVariantInfoItem > bookvariantinfoitemlist_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_library_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(72), nolog(false), XorEncrypt(false), KeyBase64(false)]
class GetBookListRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.GetBookListRes) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetBookListRes failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetBookListRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetBookListRes failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetBookListRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message GetBookListRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message GetBookListRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline GetBookListRes() : GetBookListRes(nullptr) {}
  ~GetBookListRes() override;
  explicit PROTOBUF_CONSTEXPR GetBookListRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBookListRes(const GetBookListRes& from);
  GetBookListRes(GetBookListRes&& from) noexcept
    : GetBookListRes() {
    *this = ::std::move(from);
  }

  inline GetBookListRes& operator=(const GetBookListRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBookListRes& operator=(GetBookListRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBookListRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBookListRes* internal_default_instance() {
    return reinterpret_cast<const GetBookListRes*>(
               &_GetBookListRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(GetBookListRes& a, GetBookListRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBookListRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBookListRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBookListRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBookListRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBookListRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetBookListRes& from) {
    GetBookListRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBookListRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.GetBookListRes";
  }
  protected:
  explicit GetBookListRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrCodeFieldNumber = 1,
  };
  // sint32 ErrCode = 1;
  void clear_errcode();
  int32_t errcode() const;
  void set_errcode(int32_t value);
  private:
  int32_t _internal_errcode() const;
  void _internal_set_errcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.GetBookListRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t errcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_library_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(74), nolog(false), XorEncrypt(false), KeyBase64(false)]
class GetBookInfoReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.GetBookInfoReq) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetBookInfoReq failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetBookInfoReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetBookInfoReq failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetBookInfoReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message GetBookInfoReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message GetBookInfoReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline GetBookInfoReq() : GetBookInfoReq(nullptr) {}
  ~GetBookInfoReq() override;
  explicit PROTOBUF_CONSTEXPR GetBookInfoReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBookInfoReq(const GetBookInfoReq& from);
  GetBookInfoReq(GetBookInfoReq&& from) noexcept
    : GetBookInfoReq() {
    *this = ::std::move(from);
  }

  inline GetBookInfoReq& operator=(const GetBookInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBookInfoReq& operator=(GetBookInfoReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBookInfoReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBookInfoReq* internal_default_instance() {
    return reinterpret_cast<const GetBookInfoReq*>(
               &_GetBookInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(GetBookInfoReq& a, GetBookInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBookInfoReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBookInfoReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBookInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBookInfoReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBookInfoReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetBookInfoReq& from) {
    GetBookInfoReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBookInfoReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.GetBookInfoReq";
  }
  protected:
  explicit GetBookInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsbnCodeFieldNumber = 1,
  };
  // string IsbnCode = 1;
  void clear_isbncode();
  const std::string& isbncode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_isbncode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_isbncode();
  PROTOBUF_NODISCARD std::string* release_isbncode();
  void set_allocated_isbncode(std::string* isbncode);
  private:
  const std::string& _internal_isbncode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_isbncode(const std::string& value);
  std::string* _internal_mutable_isbncode();
  public:

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.GetBookInfoReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr isbncode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_library_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(75), nolog(false), XorEncrypt(false), KeyBase64(false)]
class GetBookInfoRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.GetBookInfoRes) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetBookInfoRes failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetBookInfoRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetBookInfoRes failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetBookInfoRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message GetBookInfoRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message GetBookInfoRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline GetBookInfoRes() : GetBookInfoRes(nullptr) {}
  ~GetBookInfoRes() override;
  explicit PROTOBUF_CONSTEXPR GetBookInfoRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBookInfoRes(const GetBookInfoRes& from);
  GetBookInfoRes(GetBookInfoRes&& from) noexcept
    : GetBookInfoRes() {
    *this = ::std::move(from);
  }

  inline GetBookInfoRes& operator=(const GetBookInfoRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBookInfoRes& operator=(GetBookInfoRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBookInfoRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBookInfoRes* internal_default_instance() {
    return reinterpret_cast<const GetBookInfoRes*>(
               &_GetBookInfoRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(GetBookInfoRes& a, GetBookInfoRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBookInfoRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBookInfoRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBookInfoRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBookInfoRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBookInfoRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetBookInfoRes& from) {
    GetBookInfoRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBookInfoRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.GetBookInfoRes";
  }
  protected:
  explicit GetBookInfoRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBookInfoFieldNumber = 2,
    kErrCodeFieldNumber = 1,
  };
  // .CRYSTAL_NET.service.BookInfo BookInfo = 2;
  bool has_bookinfo() const;
  private:
  bool _internal_has_bookinfo() const;
  public:
  void clear_bookinfo();
  const ::CRYSTAL_NET::service::BookInfo& bookinfo() const;
  PROTOBUF_NODISCARD ::CRYSTAL_NET::service::BookInfo* release_bookinfo();
  ::CRYSTAL_NET::service::BookInfo* mutable_bookinfo();
  void set_allocated_bookinfo(::CRYSTAL_NET::service::BookInfo* bookinfo);
  private:
  const ::CRYSTAL_NET::service::BookInfo& _internal_bookinfo() const;
  ::CRYSTAL_NET::service::BookInfo* _internal_mutable_bookinfo();
  public:
  void unsafe_arena_set_allocated_bookinfo(
      ::CRYSTAL_NET::service::BookInfo* bookinfo);
  ::CRYSTAL_NET::service::BookInfo* unsafe_arena_release_bookinfo();

  // sint32 ErrCode = 1;
  void clear_errcode();
  int32_t errcode() const;
  void set_errcode(int32_t value);
  private:
  int32_t _internal_errcode() const;
  void _internal_set_errcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.GetBookInfoRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::CRYSTAL_NET::service::BookInfo* bookinfo_;
    int32_t errcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_library_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(76), nolog(false), XorEncrypt(false), KeyBase64(false)]
class GetBookByBookNameReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.GetBookByBookNameReq) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetBookByBookNameReq failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetBookByBookNameReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetBookByBookNameReq failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetBookByBookNameReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message GetBookByBookNameReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message GetBookByBookNameReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline GetBookByBookNameReq() : GetBookByBookNameReq(nullptr) {}
  ~GetBookByBookNameReq() override;
  explicit PROTOBUF_CONSTEXPR GetBookByBookNameReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBookByBookNameReq(const GetBookByBookNameReq& from);
  GetBookByBookNameReq(GetBookByBookNameReq&& from) noexcept
    : GetBookByBookNameReq() {
    *this = ::std::move(from);
  }

  inline GetBookByBookNameReq& operator=(const GetBookByBookNameReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBookByBookNameReq& operator=(GetBookByBookNameReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBookByBookNameReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBookByBookNameReq* internal_default_instance() {
    return reinterpret_cast<const GetBookByBookNameReq*>(
               &_GetBookByBookNameReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(GetBookByBookNameReq& a, GetBookByBookNameReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBookByBookNameReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBookByBookNameReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBookByBookNameReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBookByBookNameReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBookByBookNameReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetBookByBookNameReq& from) {
    GetBookByBookNameReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBookByBookNameReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.GetBookByBookNameReq";
  }
  protected:
  explicit GetBookByBookNameReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBookNameFieldNumber = 1,
  };
  // string BookName = 1;
  void clear_bookname();
  const std::string& bookname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bookname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bookname();
  PROTOBUF_NODISCARD std::string* release_bookname();
  void set_allocated_bookname(std::string* bookname);
  private:
  const std::string& _internal_bookname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bookname(const std::string& value);
  std::string* _internal_mutable_bookname();
  public:

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.GetBookByBookNameReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bookname_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_library_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(77), nolog(false), XorEncrypt(false), KeyBase64(false)]
class GetBookByBookNameRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.GetBookByBookNameRes) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetBookByBookNameRes failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetBookByBookNameRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetBookByBookNameRes failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetBookByBookNameRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message GetBookByBookNameRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message GetBookByBookNameRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline GetBookByBookNameRes() : GetBookByBookNameRes(nullptr) {}
  ~GetBookByBookNameRes() override;
  explicit PROTOBUF_CONSTEXPR GetBookByBookNameRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBookByBookNameRes(const GetBookByBookNameRes& from);
  GetBookByBookNameRes(GetBookByBookNameRes&& from) noexcept
    : GetBookByBookNameRes() {
    *this = ::std::move(from);
  }

  inline GetBookByBookNameRes& operator=(const GetBookByBookNameRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBookByBookNameRes& operator=(GetBookByBookNameRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBookByBookNameRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBookByBookNameRes* internal_default_instance() {
    return reinterpret_cast<const GetBookByBookNameRes*>(
               &_GetBookByBookNameRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(GetBookByBookNameRes& a, GetBookByBookNameRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBookByBookNameRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBookByBookNameRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBookByBookNameRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBookByBookNameRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBookByBookNameRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetBookByBookNameRes& from) {
    GetBookByBookNameRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBookByBookNameRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.GetBookByBookNameRes";
  }
  protected:
  explicit GetBookByBookNameRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBookInfoListFieldNumber = 1,
  };
  // repeated .CRYSTAL_NET.service.BookInfo BookInfoList = 1;
  int bookinfolist_size() const;
  private:
  int _internal_bookinfolist_size() const;
  public:
  void clear_bookinfolist();
  ::CRYSTAL_NET::service::BookInfo* mutable_bookinfolist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRYSTAL_NET::service::BookInfo >*
      mutable_bookinfolist();
  private:
  const ::CRYSTAL_NET::service::BookInfo& _internal_bookinfolist(int index) const;
  ::CRYSTAL_NET::service::BookInfo* _internal_add_bookinfolist();
  public:
  const ::CRYSTAL_NET::service::BookInfo& bookinfolist(int index) const;
  ::CRYSTAL_NET::service::BookInfo* add_bookinfolist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRYSTAL_NET::service::BookInfo >&
      bookinfolist() const;

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.GetBookByBookNameRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRYSTAL_NET::service::BookInfo > bookinfolist_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_library_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(78), nolog(false), XorEncrypt(false), KeyBase64(false)]
class BorrowBookReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.BorrowBookReq) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message BorrowBookReq failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message BorrowBookReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message BorrowBookReq failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message BorrowBookReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message BorrowBookReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message BorrowBookReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline BorrowBookReq() : BorrowBookReq(nullptr) {}
  ~BorrowBookReq() override;
  explicit PROTOBUF_CONSTEXPR BorrowBookReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BorrowBookReq(const BorrowBookReq& from);
  BorrowBookReq(BorrowBookReq&& from) noexcept
    : BorrowBookReq() {
    *this = ::std::move(from);
  }

  inline BorrowBookReq& operator=(const BorrowBookReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline BorrowBookReq& operator=(BorrowBookReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BorrowBookReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const BorrowBookReq* internal_default_instance() {
    return reinterpret_cast<const BorrowBookReq*>(
               &_BorrowBookReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(BorrowBookReq& a, BorrowBookReq& b) {
    a.Swap(&b);
  }
  inline void Swap(BorrowBookReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BorrowBookReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BorrowBookReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BorrowBookReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BorrowBookReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BorrowBookReq& from) {
    BorrowBookReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BorrowBookReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.BorrowBookReq";
  }
  protected:
  explicit BorrowBookReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBorrowBookListFieldNumber = 1,
  };
  // repeated .CRYSTAL_NET.service.BorrowBookItem BorrowBookList = 1;
  int borrowbooklist_size() const;
  private:
  int _internal_borrowbooklist_size() const;
  public:
  void clear_borrowbooklist();
  ::CRYSTAL_NET::service::BorrowBookItem* mutable_borrowbooklist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRYSTAL_NET::service::BorrowBookItem >*
      mutable_borrowbooklist();
  private:
  const ::CRYSTAL_NET::service::BorrowBookItem& _internal_borrowbooklist(int index) const;
  ::CRYSTAL_NET::service::BorrowBookItem* _internal_add_borrowbooklist();
  public:
  const ::CRYSTAL_NET::service::BorrowBookItem& borrowbooklist(int index) const;
  ::CRYSTAL_NET::service::BorrowBookItem* add_borrowbooklist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRYSTAL_NET::service::BorrowBookItem >&
      borrowbooklist() const;

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.BorrowBookReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRYSTAL_NET::service::BorrowBookItem > borrowbooklist_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_library_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(79), nolog(false), XorEncrypt(false), KeyBase64(false)]
class BorrowBookRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.BorrowBookRes) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message BorrowBookRes failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message BorrowBookRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message BorrowBookRes failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message BorrowBookRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message BorrowBookRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message BorrowBookRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline BorrowBookRes() : BorrowBookRes(nullptr) {}
  ~BorrowBookRes() override;
  explicit PROTOBUF_CONSTEXPR BorrowBookRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BorrowBookRes(const BorrowBookRes& from);
  BorrowBookRes(BorrowBookRes&& from) noexcept
    : BorrowBookRes() {
    *this = ::std::move(from);
  }

  inline BorrowBookRes& operator=(const BorrowBookRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline BorrowBookRes& operator=(BorrowBookRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BorrowBookRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const BorrowBookRes* internal_default_instance() {
    return reinterpret_cast<const BorrowBookRes*>(
               &_BorrowBookRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(BorrowBookRes& a, BorrowBookRes& b) {
    a.Swap(&b);
  }
  inline void Swap(BorrowBookRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BorrowBookRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BorrowBookRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BorrowBookRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BorrowBookRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BorrowBookRes& from) {
    BorrowBookRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BorrowBookRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.BorrowBookRes";
  }
  protected:
  explicit BorrowBookRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrCodeFieldNumber = 1,
  };
  // sint32 ErrCode = 1;
  void clear_errcode();
  int32_t errcode() const;
  void set_errcode(int32_t value);
  private:
  int32_t _internal_errcode() const;
  void _internal_set_errcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.BorrowBookRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t errcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_library_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetLibraryInfoReq

// -------------------------------------------------------------------

// LibraryInfoNty

// .CRYSTAL_NET.service.LibraryInfo LibraryInfo = 1;
inline bool LibraryInfoNty::_internal_has_libraryinfo() const {
  return this != internal_default_instance() && _impl_.libraryinfo_ != nullptr;
}
inline bool LibraryInfoNty::has_libraryinfo() const {
  return _internal_has_libraryinfo();
}
inline const ::CRYSTAL_NET::service::LibraryInfo& LibraryInfoNty::_internal_libraryinfo() const {
  const ::CRYSTAL_NET::service::LibraryInfo* p = _impl_.libraryinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::CRYSTAL_NET::service::LibraryInfo&>(
      ::CRYSTAL_NET::service::_LibraryInfo_default_instance_);
}
inline const ::CRYSTAL_NET::service::LibraryInfo& LibraryInfoNty::libraryinfo() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.LibraryInfoNty.LibraryInfo)
  return _internal_libraryinfo();
}
inline void LibraryInfoNty::unsafe_arena_set_allocated_libraryinfo(
    ::CRYSTAL_NET::service::LibraryInfo* libraryinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.libraryinfo_);
  }
  _impl_.libraryinfo_ = libraryinfo;
  if (libraryinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CRYSTAL_NET.service.LibraryInfoNty.LibraryInfo)
}
inline ::CRYSTAL_NET::service::LibraryInfo* LibraryInfoNty::release_libraryinfo() {
  
  ::CRYSTAL_NET::service::LibraryInfo* temp = _impl_.libraryinfo_;
  _impl_.libraryinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CRYSTAL_NET::service::LibraryInfo* LibraryInfoNty::unsafe_arena_release_libraryinfo() {
  // @@protoc_insertion_point(field_release:CRYSTAL_NET.service.LibraryInfoNty.LibraryInfo)
  
  ::CRYSTAL_NET::service::LibraryInfo* temp = _impl_.libraryinfo_;
  _impl_.libraryinfo_ = nullptr;
  return temp;
}
inline ::CRYSTAL_NET::service::LibraryInfo* LibraryInfoNty::_internal_mutable_libraryinfo() {
  
  if (_impl_.libraryinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::CRYSTAL_NET::service::LibraryInfo>(GetArenaForAllocation());
    _impl_.libraryinfo_ = p;
  }
  return _impl_.libraryinfo_;
}
inline ::CRYSTAL_NET::service::LibraryInfo* LibraryInfoNty::mutable_libraryinfo() {
  ::CRYSTAL_NET::service::LibraryInfo* _msg = _internal_mutable_libraryinfo();
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.LibraryInfoNty.LibraryInfo)
  return _msg;
}
inline void LibraryInfoNty::set_allocated_libraryinfo(::CRYSTAL_NET::service::LibraryInfo* libraryinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.libraryinfo_);
  }
  if (libraryinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(libraryinfo));
    if (message_arena != submessage_arena) {
      libraryinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, libraryinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.libraryinfo_ = libraryinfo;
  // @@protoc_insertion_point(field_set_allocated:CRYSTAL_NET.service.LibraryInfoNty.LibraryInfo)
}

// -------------------------------------------------------------------

// GetLibraryInfoRes

// sint32 ErrCode = 1;
inline void GetLibraryInfoRes::clear_errcode() {
  _impl_.errcode_ = 0;
}
inline int32_t GetLibraryInfoRes::_internal_errcode() const {
  return _impl_.errcode_;
}
inline int32_t GetLibraryInfoRes::errcode() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.GetLibraryInfoRes.ErrCode)
  return _internal_errcode();
}
inline void GetLibraryInfoRes::_internal_set_errcode(int32_t value) {
  
  _impl_.errcode_ = value;
}
inline void GetLibraryInfoRes::set_errcode(int32_t value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.GetLibraryInfoRes.ErrCode)
}

// -------------------------------------------------------------------

// CreateLibraryReq

// string InviteCode = 1;
inline void CreateLibraryReq::clear_invitecode() {
  _impl_.invitecode_.ClearToEmpty();
}
inline const std::string& CreateLibraryReq::invitecode() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.CreateLibraryReq.InviteCode)
  return _internal_invitecode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateLibraryReq::set_invitecode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.invitecode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.CreateLibraryReq.InviteCode)
}
inline std::string* CreateLibraryReq::mutable_invitecode() {
  std::string* _s = _internal_mutable_invitecode();
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.CreateLibraryReq.InviteCode)
  return _s;
}
inline const std::string& CreateLibraryReq::_internal_invitecode() const {
  return _impl_.invitecode_.Get();
}
inline void CreateLibraryReq::_internal_set_invitecode(const std::string& value) {
  
  _impl_.invitecode_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateLibraryReq::_internal_mutable_invitecode() {
  
  return _impl_.invitecode_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateLibraryReq::release_invitecode() {
  // @@protoc_insertion_point(field_release:CRYSTAL_NET.service.CreateLibraryReq.InviteCode)
  return _impl_.invitecode_.Release();
}
inline void CreateLibraryReq::set_allocated_invitecode(std::string* invitecode) {
  if (invitecode != nullptr) {
    
  } else {
    
  }
  _impl_.invitecode_.SetAllocated(invitecode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.invitecode_.IsDefault()) {
    _impl_.invitecode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRYSTAL_NET.service.CreateLibraryReq.InviteCode)
}

// string Name = 2;
inline void CreateLibraryReq::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CreateLibraryReq::name() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.CreateLibraryReq.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateLibraryReq::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.CreateLibraryReq.Name)
}
inline std::string* CreateLibraryReq::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.CreateLibraryReq.Name)
  return _s;
}
inline const std::string& CreateLibraryReq::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CreateLibraryReq::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateLibraryReq::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateLibraryReq::release_name() {
  // @@protoc_insertion_point(field_release:CRYSTAL_NET.service.CreateLibraryReq.Name)
  return _impl_.name_.Release();
}
inline void CreateLibraryReq::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRYSTAL_NET.service.CreateLibraryReq.Name)
}

// string Address = 3;
inline void CreateLibraryReq::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& CreateLibraryReq::address() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.CreateLibraryReq.Address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateLibraryReq::set_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.CreateLibraryReq.Address)
}
inline std::string* CreateLibraryReq::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.CreateLibraryReq.Address)
  return _s;
}
inline const std::string& CreateLibraryReq::_internal_address() const {
  return _impl_.address_.Get();
}
inline void CreateLibraryReq::_internal_set_address(const std::string& value) {
  
  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateLibraryReq::_internal_mutable_address() {
  
  return _impl_.address_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateLibraryReq::release_address() {
  // @@protoc_insertion_point(field_release:CRYSTAL_NET.service.CreateLibraryReq.Address)
  return _impl_.address_.Release();
}
inline void CreateLibraryReq::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  _impl_.address_.SetAllocated(address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRYSTAL_NET.service.CreateLibraryReq.Address)
}

// string OpenTime = 4;
inline void CreateLibraryReq::clear_opentime() {
  _impl_.opentime_.ClearToEmpty();
}
inline const std::string& CreateLibraryReq::opentime() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.CreateLibraryReq.OpenTime)
  return _internal_opentime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateLibraryReq::set_opentime(ArgT0&& arg0, ArgT... args) {
 
 _impl_.opentime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.CreateLibraryReq.OpenTime)
}
inline std::string* CreateLibraryReq::mutable_opentime() {
  std::string* _s = _internal_mutable_opentime();
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.CreateLibraryReq.OpenTime)
  return _s;
}
inline const std::string& CreateLibraryReq::_internal_opentime() const {
  return _impl_.opentime_.Get();
}
inline void CreateLibraryReq::_internal_set_opentime(const std::string& value) {
  
  _impl_.opentime_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateLibraryReq::_internal_mutable_opentime() {
  
  return _impl_.opentime_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateLibraryReq::release_opentime() {
  // @@protoc_insertion_point(field_release:CRYSTAL_NET.service.CreateLibraryReq.OpenTime)
  return _impl_.opentime_.Release();
}
inline void CreateLibraryReq::set_allocated_opentime(std::string* opentime) {
  if (opentime != nullptr) {
    
  } else {
    
  }
  _impl_.opentime_.SetAllocated(opentime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.opentime_.IsDefault()) {
    _impl_.opentime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRYSTAL_NET.service.CreateLibraryReq.OpenTime)
}

// string TelphoneNumber = 5;
inline void CreateLibraryReq::clear_telphonenumber() {
  _impl_.telphonenumber_.ClearToEmpty();
}
inline const std::string& CreateLibraryReq::telphonenumber() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.CreateLibraryReq.TelphoneNumber)
  return _internal_telphonenumber();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateLibraryReq::set_telphonenumber(ArgT0&& arg0, ArgT... args) {
 
 _impl_.telphonenumber_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.CreateLibraryReq.TelphoneNumber)
}
inline std::string* CreateLibraryReq::mutable_telphonenumber() {
  std::string* _s = _internal_mutable_telphonenumber();
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.CreateLibraryReq.TelphoneNumber)
  return _s;
}
inline const std::string& CreateLibraryReq::_internal_telphonenumber() const {
  return _impl_.telphonenumber_.Get();
}
inline void CreateLibraryReq::_internal_set_telphonenumber(const std::string& value) {
  
  _impl_.telphonenumber_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateLibraryReq::_internal_mutable_telphonenumber() {
  
  return _impl_.telphonenumber_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateLibraryReq::release_telphonenumber() {
  // @@protoc_insertion_point(field_release:CRYSTAL_NET.service.CreateLibraryReq.TelphoneNumber)
  return _impl_.telphonenumber_.Release();
}
inline void CreateLibraryReq::set_allocated_telphonenumber(std::string* telphonenumber) {
  if (telphonenumber != nullptr) {
    
  } else {
    
  }
  _impl_.telphonenumber_.SetAllocated(telphonenumber, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.telphonenumber_.IsDefault()) {
    _impl_.telphonenumber_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRYSTAL_NET.service.CreateLibraryReq.TelphoneNumber)
}

// uint64 BindPhone = 6;
inline void CreateLibraryReq::clear_bindphone() {
  _impl_.bindphone_ = uint64_t{0u};
}
inline uint64_t CreateLibraryReq::_internal_bindphone() const {
  return _impl_.bindphone_;
}
inline uint64_t CreateLibraryReq::bindphone() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.CreateLibraryReq.BindPhone)
  return _internal_bindphone();
}
inline void CreateLibraryReq::_internal_set_bindphone(uint64_t value) {
  
  _impl_.bindphone_ = value;
}
inline void CreateLibraryReq::set_bindphone(uint64_t value) {
  _internal_set_bindphone(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.CreateLibraryReq.BindPhone)
}

// -------------------------------------------------------------------

// CreateLibraryRes

// sint32 ErrCode = 1;
inline void CreateLibraryRes::clear_errcode() {
  _impl_.errcode_ = 0;
}
inline int32_t CreateLibraryRes::_internal_errcode() const {
  return _impl_.errcode_;
}
inline int32_t CreateLibraryRes::errcode() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.CreateLibraryRes.ErrCode)
  return _internal_errcode();
}
inline void CreateLibraryRes::_internal_set_errcode(int32_t value) {
  
  _impl_.errcode_ = value;
}
inline void CreateLibraryRes::set_errcode(int32_t value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.CreateLibraryRes.ErrCode)
}

// -------------------------------------------------------------------

// JoinLibraryReq

// uint64 LibraryId = 1;
inline void JoinLibraryReq::clear_libraryid() {
  _impl_.libraryid_ = uint64_t{0u};
}
inline uint64_t JoinLibraryReq::_internal_libraryid() const {
  return _impl_.libraryid_;
}
inline uint64_t JoinLibraryReq::libraryid() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.JoinLibraryReq.LibraryId)
  return _internal_libraryid();
}
inline void JoinLibraryReq::_internal_set_libraryid(uint64_t value) {
  
  _impl_.libraryid_ = value;
}
inline void JoinLibraryReq::set_libraryid(uint64_t value) {
  _internal_set_libraryid(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.JoinLibraryReq.LibraryId)
}

// -------------------------------------------------------------------

// JoinLibraryRes

// sint32 ErrCode = 1;
inline void JoinLibraryRes::clear_errcode() {
  _impl_.errcode_ = 0;
}
inline int32_t JoinLibraryRes::_internal_errcode() const {
  return _impl_.errcode_;
}
inline int32_t JoinLibraryRes::errcode() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.JoinLibraryRes.ErrCode)
  return _internal_errcode();
}
inline void JoinLibraryRes::_internal_set_errcode(int32_t value) {
  
  _impl_.errcode_ = value;
}
inline void JoinLibraryRes::set_errcode(int32_t value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.JoinLibraryRes.ErrCode)
}

// -------------------------------------------------------------------

// QuitLibraryReq

// -------------------------------------------------------------------

// QuitLibraryRes

// sint32 ErrCode = 1;
inline void QuitLibraryRes::clear_errcode() {
  _impl_.errcode_ = 0;
}
inline int32_t QuitLibraryRes::_internal_errcode() const {
  return _impl_.errcode_;
}
inline int32_t QuitLibraryRes::errcode() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.QuitLibraryRes.ErrCode)
  return _internal_errcode();
}
inline void QuitLibraryRes::_internal_set_errcode(int32_t value) {
  
  _impl_.errcode_ = value;
}
inline void QuitLibraryRes::set_errcode(int32_t value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.QuitLibraryRes.ErrCode)
}

// -------------------------------------------------------------------

// GetLibraryListReq

// -------------------------------------------------------------------

// GetLibraryListRes

// repeated .CRYSTAL_NET.service.LibraryPreviewInfo LibraryPreviewInfoList = 1;
inline int GetLibraryListRes::_internal_librarypreviewinfolist_size() const {
  return _impl_.librarypreviewinfolist_.size();
}
inline int GetLibraryListRes::librarypreviewinfolist_size() const {
  return _internal_librarypreviewinfolist_size();
}
inline ::CRYSTAL_NET::service::LibraryPreviewInfo* GetLibraryListRes::mutable_librarypreviewinfolist(int index) {
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.GetLibraryListRes.LibraryPreviewInfoList)
  return _impl_.librarypreviewinfolist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRYSTAL_NET::service::LibraryPreviewInfo >*
GetLibraryListRes::mutable_librarypreviewinfolist() {
  // @@protoc_insertion_point(field_mutable_list:CRYSTAL_NET.service.GetLibraryListRes.LibraryPreviewInfoList)
  return &_impl_.librarypreviewinfolist_;
}
inline const ::CRYSTAL_NET::service::LibraryPreviewInfo& GetLibraryListRes::_internal_librarypreviewinfolist(int index) const {
  return _impl_.librarypreviewinfolist_.Get(index);
}
inline const ::CRYSTAL_NET::service::LibraryPreviewInfo& GetLibraryListRes::librarypreviewinfolist(int index) const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.GetLibraryListRes.LibraryPreviewInfoList)
  return _internal_librarypreviewinfolist(index);
}
inline ::CRYSTAL_NET::service::LibraryPreviewInfo* GetLibraryListRes::_internal_add_librarypreviewinfolist() {
  return _impl_.librarypreviewinfolist_.Add();
}
inline ::CRYSTAL_NET::service::LibraryPreviewInfo* GetLibraryListRes::add_librarypreviewinfolist() {
  ::CRYSTAL_NET::service::LibraryPreviewInfo* _add = _internal_add_librarypreviewinfolist();
  // @@protoc_insertion_point(field_add:CRYSTAL_NET.service.GetLibraryListRes.LibraryPreviewInfoList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRYSTAL_NET::service::LibraryPreviewInfo >&
GetLibraryListRes::librarypreviewinfolist() const {
  // @@protoc_insertion_point(field_list:CRYSTAL_NET.service.GetLibraryListRes.LibraryPreviewInfoList)
  return _impl_.librarypreviewinfolist_;
}

// -------------------------------------------------------------------

// TransferLibraianReq

// uint64 TargetUserId = 1;
inline void TransferLibraianReq::clear_targetuserid() {
  _impl_.targetuserid_ = uint64_t{0u};
}
inline uint64_t TransferLibraianReq::_internal_targetuserid() const {
  return _impl_.targetuserid_;
}
inline uint64_t TransferLibraianReq::targetuserid() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.TransferLibraianReq.TargetUserId)
  return _internal_targetuserid();
}
inline void TransferLibraianReq::_internal_set_targetuserid(uint64_t value) {
  
  _impl_.targetuserid_ = value;
}
inline void TransferLibraianReq::set_targetuserid(uint64_t value) {
  _internal_set_targetuserid(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.TransferLibraianReq.TargetUserId)
}

// -------------------------------------------------------------------

// TransferLibraianRes

// sint32 ErrCode = 1;
inline void TransferLibraianRes::clear_errcode() {
  _impl_.errcode_ = 0;
}
inline int32_t TransferLibraianRes::_internal_errcode() const {
  return _impl_.errcode_;
}
inline int32_t TransferLibraianRes::errcode() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.TransferLibraianRes.ErrCode)
  return _internal_errcode();
}
inline void TransferLibraianRes::_internal_set_errcode(int32_t value) {
  
  _impl_.errcode_ = value;
}
inline void TransferLibraianRes::set_errcode(int32_t value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.TransferLibraianRes.ErrCode)
}

// -------------------------------------------------------------------

// ModifyMemberInfoReq

// uint64 memberUserId = 1;
inline void ModifyMemberInfoReq::clear_memberuserid() {
  _impl_.memberuserid_ = uint64_t{0u};
}
inline uint64_t ModifyMemberInfoReq::_internal_memberuserid() const {
  return _impl_.memberuserid_;
}
inline uint64_t ModifyMemberInfoReq::memberuserid() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.ModifyMemberInfoReq.memberUserId)
  return _internal_memberuserid();
}
inline void ModifyMemberInfoReq::_internal_set_memberuserid(uint64_t value) {
  
  _impl_.memberuserid_ = value;
}
inline void ModifyMemberInfoReq::set_memberuserid(uint64_t value) {
  _internal_set_memberuserid(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.ModifyMemberInfoReq.memberUserId)
}

// sint32 newRole = 2;
inline bool ModifyMemberInfoReq::_internal_has_newrole() const {
  return ModifyRole_case() == kNewRole;
}
inline bool ModifyMemberInfoReq::has_newrole() const {
  return _internal_has_newrole();
}
inline void ModifyMemberInfoReq::set_has_newrole() {
  _impl_._oneof_case_[0] = kNewRole;
}
inline void ModifyMemberInfoReq::clear_newrole() {
  if (_internal_has_newrole()) {
    _impl_.ModifyRole_.newrole_ = 0;
    clear_has_ModifyRole();
  }
}
inline int32_t ModifyMemberInfoReq::_internal_newrole() const {
  if (_internal_has_newrole()) {
    return _impl_.ModifyRole_.newrole_;
  }
  return 0;
}
inline void ModifyMemberInfoReq::_internal_set_newrole(int32_t value) {
  if (!_internal_has_newrole()) {
    clear_ModifyRole();
    set_has_newrole();
  }
  _impl_.ModifyRole_.newrole_ = value;
}
inline int32_t ModifyMemberInfoReq::newrole() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.ModifyMemberInfoReq.newRole)
  return _internal_newrole();
}
inline void ModifyMemberInfoReq::set_newrole(int32_t value) {
  _internal_set_newrole(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.ModifyMemberInfoReq.newRole)
}

// uint64 newMemberPhone = 3;
inline bool ModifyMemberInfoReq::_internal_has_newmemberphone() const {
  return ModifyPhoneNumber_case() == kNewMemberPhone;
}
inline bool ModifyMemberInfoReq::has_newmemberphone() const {
  return _internal_has_newmemberphone();
}
inline void ModifyMemberInfoReq::set_has_newmemberphone() {
  _impl_._oneof_case_[1] = kNewMemberPhone;
}
inline void ModifyMemberInfoReq::clear_newmemberphone() {
  if (_internal_has_newmemberphone()) {
    _impl_.ModifyPhoneNumber_.newmemberphone_ = uint64_t{0u};
    clear_has_ModifyPhoneNumber();
  }
}
inline uint64_t ModifyMemberInfoReq::_internal_newmemberphone() const {
  if (_internal_has_newmemberphone()) {
    return _impl_.ModifyPhoneNumber_.newmemberphone_;
  }
  return uint64_t{0u};
}
inline void ModifyMemberInfoReq::_internal_set_newmemberphone(uint64_t value) {
  if (!_internal_has_newmemberphone()) {
    clear_ModifyPhoneNumber();
    set_has_newmemberphone();
  }
  _impl_.ModifyPhoneNumber_.newmemberphone_ = value;
}
inline uint64_t ModifyMemberInfoReq::newmemberphone() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.ModifyMemberInfoReq.newMemberPhone)
  return _internal_newmemberphone();
}
inline void ModifyMemberInfoReq::set_newmemberphone(uint64_t value) {
  _internal_set_newmemberphone(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.ModifyMemberInfoReq.newMemberPhone)
}

inline bool ModifyMemberInfoReq::has_ModifyRole() const {
  return ModifyRole_case() != MODIFYROLE_NOT_SET;
}
inline void ModifyMemberInfoReq::clear_has_ModifyRole() {
  _impl_._oneof_case_[0] = MODIFYROLE_NOT_SET;
}
inline bool ModifyMemberInfoReq::has_ModifyPhoneNumber() const {
  return ModifyPhoneNumber_case() != MODIFYPHONENUMBER_NOT_SET;
}
inline void ModifyMemberInfoReq::clear_has_ModifyPhoneNumber() {
  _impl_._oneof_case_[1] = MODIFYPHONENUMBER_NOT_SET;
}
inline ModifyMemberInfoReq::ModifyRoleCase ModifyMemberInfoReq::ModifyRole_case() const {
  return ModifyMemberInfoReq::ModifyRoleCase(_impl_._oneof_case_[0]);
}
inline ModifyMemberInfoReq::ModifyPhoneNumberCase ModifyMemberInfoReq::ModifyPhoneNumber_case() const {
  return ModifyMemberInfoReq::ModifyPhoneNumberCase(_impl_._oneof_case_[1]);
}
// -------------------------------------------------------------------

// ModifyMemberInfoRes

// sint32 ErrCode = 1;
inline void ModifyMemberInfoRes::clear_errcode() {
  _impl_.errcode_ = 0;
}
inline int32_t ModifyMemberInfoRes::_internal_errcode() const {
  return _impl_.errcode_;
}
inline int32_t ModifyMemberInfoRes::errcode() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.ModifyMemberInfoRes.ErrCode)
  return _internal_errcode();
}
inline void ModifyMemberInfoRes::_internal_set_errcode(int32_t value) {
  
  _impl_.errcode_ = value;
}
inline void ModifyMemberInfoRes::set_errcode(int32_t value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.ModifyMemberInfoRes.ErrCode)
}

// -------------------------------------------------------------------

// UserLibraryInfoNty

// .CRYSTAL_NET.service.UserLibraryInfo UserLibraryInfo = 1;
inline bool UserLibraryInfoNty::_internal_has_userlibraryinfo() const {
  return this != internal_default_instance() && _impl_.userlibraryinfo_ != nullptr;
}
inline bool UserLibraryInfoNty::has_userlibraryinfo() const {
  return _internal_has_userlibraryinfo();
}
inline const ::CRYSTAL_NET::service::UserLibraryInfo& UserLibraryInfoNty::_internal_userlibraryinfo() const {
  const ::CRYSTAL_NET::service::UserLibraryInfo* p = _impl_.userlibraryinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::CRYSTAL_NET::service::UserLibraryInfo&>(
      ::CRYSTAL_NET::service::_UserLibraryInfo_default_instance_);
}
inline const ::CRYSTAL_NET::service::UserLibraryInfo& UserLibraryInfoNty::userlibraryinfo() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.UserLibraryInfoNty.UserLibraryInfo)
  return _internal_userlibraryinfo();
}
inline void UserLibraryInfoNty::unsafe_arena_set_allocated_userlibraryinfo(
    ::CRYSTAL_NET::service::UserLibraryInfo* userlibraryinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userlibraryinfo_);
  }
  _impl_.userlibraryinfo_ = userlibraryinfo;
  if (userlibraryinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CRYSTAL_NET.service.UserLibraryInfoNty.UserLibraryInfo)
}
inline ::CRYSTAL_NET::service::UserLibraryInfo* UserLibraryInfoNty::release_userlibraryinfo() {
  
  ::CRYSTAL_NET::service::UserLibraryInfo* temp = _impl_.userlibraryinfo_;
  _impl_.userlibraryinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CRYSTAL_NET::service::UserLibraryInfo* UserLibraryInfoNty::unsafe_arena_release_userlibraryinfo() {
  // @@protoc_insertion_point(field_release:CRYSTAL_NET.service.UserLibraryInfoNty.UserLibraryInfo)
  
  ::CRYSTAL_NET::service::UserLibraryInfo* temp = _impl_.userlibraryinfo_;
  _impl_.userlibraryinfo_ = nullptr;
  return temp;
}
inline ::CRYSTAL_NET::service::UserLibraryInfo* UserLibraryInfoNty::_internal_mutable_userlibraryinfo() {
  
  if (_impl_.userlibraryinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::CRYSTAL_NET::service::UserLibraryInfo>(GetArenaForAllocation());
    _impl_.userlibraryinfo_ = p;
  }
  return _impl_.userlibraryinfo_;
}
inline ::CRYSTAL_NET::service::UserLibraryInfo* UserLibraryInfoNty::mutable_userlibraryinfo() {
  ::CRYSTAL_NET::service::UserLibraryInfo* _msg = _internal_mutable_userlibraryinfo();
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.UserLibraryInfoNty.UserLibraryInfo)
  return _msg;
}
inline void UserLibraryInfoNty::set_allocated_userlibraryinfo(::CRYSTAL_NET::service::UserLibraryInfo* userlibraryinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userlibraryinfo_);
  }
  if (userlibraryinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userlibraryinfo));
    if (message_arena != submessage_arena) {
      userlibraryinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userlibraryinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userlibraryinfo_ = userlibraryinfo;
  // @@protoc_insertion_point(field_set_allocated:CRYSTAL_NET.service.UserLibraryInfoNty.UserLibraryInfo)
}

// -------------------------------------------------------------------

// GetLibraryMemberSimpleInfoReq

// -------------------------------------------------------------------

// GetLibraryMemberSimpleInfoRes

// sint32 ErrCode = 1;
inline void GetLibraryMemberSimpleInfoRes::clear_errcode() {
  _impl_.errcode_ = 0;
}
inline int32_t GetLibraryMemberSimpleInfoRes::_internal_errcode() const {
  return _impl_.errcode_;
}
inline int32_t GetLibraryMemberSimpleInfoRes::errcode() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.GetLibraryMemberSimpleInfoRes.ErrCode)
  return _internal_errcode();
}
inline void GetLibraryMemberSimpleInfoRes::_internal_set_errcode(int32_t value) {
  
  _impl_.errcode_ = value;
}
inline void GetLibraryMemberSimpleInfoRes::set_errcode(int32_t value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.GetLibraryMemberSimpleInfoRes.ErrCode)
}

// repeated .CRYSTAL_NET.service.SimpleUserInfo SimpleUserInfoList = 2;
inline int GetLibraryMemberSimpleInfoRes::_internal_simpleuserinfolist_size() const {
  return _impl_.simpleuserinfolist_.size();
}
inline int GetLibraryMemberSimpleInfoRes::simpleuserinfolist_size() const {
  return _internal_simpleuserinfolist_size();
}
inline ::CRYSTAL_NET::service::SimpleUserInfo* GetLibraryMemberSimpleInfoRes::mutable_simpleuserinfolist(int index) {
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.GetLibraryMemberSimpleInfoRes.SimpleUserInfoList)
  return _impl_.simpleuserinfolist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRYSTAL_NET::service::SimpleUserInfo >*
GetLibraryMemberSimpleInfoRes::mutable_simpleuserinfolist() {
  // @@protoc_insertion_point(field_mutable_list:CRYSTAL_NET.service.GetLibraryMemberSimpleInfoRes.SimpleUserInfoList)
  return &_impl_.simpleuserinfolist_;
}
inline const ::CRYSTAL_NET::service::SimpleUserInfo& GetLibraryMemberSimpleInfoRes::_internal_simpleuserinfolist(int index) const {
  return _impl_.simpleuserinfolist_.Get(index);
}
inline const ::CRYSTAL_NET::service::SimpleUserInfo& GetLibraryMemberSimpleInfoRes::simpleuserinfolist(int index) const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.GetLibraryMemberSimpleInfoRes.SimpleUserInfoList)
  return _internal_simpleuserinfolist(index);
}
inline ::CRYSTAL_NET::service::SimpleUserInfo* GetLibraryMemberSimpleInfoRes::_internal_add_simpleuserinfolist() {
  return _impl_.simpleuserinfolist_.Add();
}
inline ::CRYSTAL_NET::service::SimpleUserInfo* GetLibraryMemberSimpleInfoRes::add_simpleuserinfolist() {
  ::CRYSTAL_NET::service::SimpleUserInfo* _add = _internal_add_simpleuserinfolist();
  // @@protoc_insertion_point(field_add:CRYSTAL_NET.service.GetLibraryMemberSimpleInfoRes.SimpleUserInfoList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRYSTAL_NET::service::SimpleUserInfo >&
GetLibraryMemberSimpleInfoRes::simpleuserinfolist() const {
  // @@protoc_insertion_point(field_list:CRYSTAL_NET.service.GetLibraryMemberSimpleInfoRes.SimpleUserInfoList)
  return _impl_.simpleuserinfolist_;
}

// -------------------------------------------------------------------

// AddLibraryBookReq

// string BookName = 1;
inline void AddLibraryBookReq::clear_bookname() {
  _impl_.bookname_.ClearToEmpty();
}
inline const std::string& AddLibraryBookReq::bookname() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.AddLibraryBookReq.BookName)
  return _internal_bookname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddLibraryBookReq::set_bookname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bookname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.AddLibraryBookReq.BookName)
}
inline std::string* AddLibraryBookReq::mutable_bookname() {
  std::string* _s = _internal_mutable_bookname();
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.AddLibraryBookReq.BookName)
  return _s;
}
inline const std::string& AddLibraryBookReq::_internal_bookname() const {
  return _impl_.bookname_.Get();
}
inline void AddLibraryBookReq::_internal_set_bookname(const std::string& value) {
  
  _impl_.bookname_.Set(value, GetArenaForAllocation());
}
inline std::string* AddLibraryBookReq::_internal_mutable_bookname() {
  
  return _impl_.bookname_.Mutable(GetArenaForAllocation());
}
inline std::string* AddLibraryBookReq::release_bookname() {
  // @@protoc_insertion_point(field_release:CRYSTAL_NET.service.AddLibraryBookReq.BookName)
  return _impl_.bookname_.Release();
}
inline void AddLibraryBookReq::set_allocated_bookname(std::string* bookname) {
  if (bookname != nullptr) {
    
  } else {
    
  }
  _impl_.bookname_.SetAllocated(bookname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bookname_.IsDefault()) {
    _impl_.bookname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRYSTAL_NET.service.AddLibraryBookReq.BookName)
}

// string IsbnCode = 2;
inline void AddLibraryBookReq::clear_isbncode() {
  _impl_.isbncode_.ClearToEmpty();
}
inline const std::string& AddLibraryBookReq::isbncode() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.AddLibraryBookReq.IsbnCode)
  return _internal_isbncode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddLibraryBookReq::set_isbncode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.isbncode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.AddLibraryBookReq.IsbnCode)
}
inline std::string* AddLibraryBookReq::mutable_isbncode() {
  std::string* _s = _internal_mutable_isbncode();
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.AddLibraryBookReq.IsbnCode)
  return _s;
}
inline const std::string& AddLibraryBookReq::_internal_isbncode() const {
  return _impl_.isbncode_.Get();
}
inline void AddLibraryBookReq::_internal_set_isbncode(const std::string& value) {
  
  _impl_.isbncode_.Set(value, GetArenaForAllocation());
}
inline std::string* AddLibraryBookReq::_internal_mutable_isbncode() {
  
  return _impl_.isbncode_.Mutable(GetArenaForAllocation());
}
inline std::string* AddLibraryBookReq::release_isbncode() {
  // @@protoc_insertion_point(field_release:CRYSTAL_NET.service.AddLibraryBookReq.IsbnCode)
  return _impl_.isbncode_.Release();
}
inline void AddLibraryBookReq::set_allocated_isbncode(std::string* isbncode) {
  if (isbncode != nullptr) {
    
  } else {
    
  }
  _impl_.isbncode_.SetAllocated(isbncode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.isbncode_.IsDefault()) {
    _impl_.isbncode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRYSTAL_NET.service.AddLibraryBookReq.IsbnCode)
}

// string BookCoverImage = 3;
inline bool AddLibraryBookReq::_internal_has_bookcoverimage() const {
  return BookCoverImageOption_case() == kBookCoverImage;
}
inline bool AddLibraryBookReq::has_bookcoverimage() const {
  return _internal_has_bookcoverimage();
}
inline void AddLibraryBookReq::set_has_bookcoverimage() {
  _impl_._oneof_case_[0] = kBookCoverImage;
}
inline void AddLibraryBookReq::clear_bookcoverimage() {
  if (_internal_has_bookcoverimage()) {
    _impl_.BookCoverImageOption_.bookcoverimage_.Destroy();
    clear_has_BookCoverImageOption();
  }
}
inline const std::string& AddLibraryBookReq::bookcoverimage() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.AddLibraryBookReq.BookCoverImage)
  return _internal_bookcoverimage();
}
template <typename ArgT0, typename... ArgT>
inline void AddLibraryBookReq::set_bookcoverimage(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_bookcoverimage()) {
    clear_BookCoverImageOption();
    set_has_bookcoverimage();
    _impl_.BookCoverImageOption_.bookcoverimage_.InitDefault();
  }
  _impl_.BookCoverImageOption_.bookcoverimage_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.AddLibraryBookReq.BookCoverImage)
}
inline std::string* AddLibraryBookReq::mutable_bookcoverimage() {
  std::string* _s = _internal_mutable_bookcoverimage();
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.AddLibraryBookReq.BookCoverImage)
  return _s;
}
inline const std::string& AddLibraryBookReq::_internal_bookcoverimage() const {
  if (_internal_has_bookcoverimage()) {
    return _impl_.BookCoverImageOption_.bookcoverimage_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void AddLibraryBookReq::_internal_set_bookcoverimage(const std::string& value) {
  if (!_internal_has_bookcoverimage()) {
    clear_BookCoverImageOption();
    set_has_bookcoverimage();
    _impl_.BookCoverImageOption_.bookcoverimage_.InitDefault();
  }
  _impl_.BookCoverImageOption_.bookcoverimage_.Set(value, GetArenaForAllocation());
}
inline std::string* AddLibraryBookReq::_internal_mutable_bookcoverimage() {
  if (!_internal_has_bookcoverimage()) {
    clear_BookCoverImageOption();
    set_has_bookcoverimage();
    _impl_.BookCoverImageOption_.bookcoverimage_.InitDefault();
  }
  return _impl_.BookCoverImageOption_.bookcoverimage_.Mutable(      GetArenaForAllocation());
}
inline std::string* AddLibraryBookReq::release_bookcoverimage() {
  // @@protoc_insertion_point(field_release:CRYSTAL_NET.service.AddLibraryBookReq.BookCoverImage)
  if (_internal_has_bookcoverimage()) {
    clear_has_BookCoverImageOption();
    return _impl_.BookCoverImageOption_.bookcoverimage_.Release();
  } else {
    return nullptr;
  }
}
inline void AddLibraryBookReq::set_allocated_bookcoverimage(std::string* bookcoverimage) {
  if (has_BookCoverImageOption()) {
    clear_BookCoverImageOption();
  }
  if (bookcoverimage != nullptr) {
    set_has_bookcoverimage();
    _impl_.BookCoverImageOption_.bookcoverimage_.InitAllocated(bookcoverimage, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:CRYSTAL_NET.service.AddLibraryBookReq.BookCoverImage)
}

// sint64 Price = 4;
inline void AddLibraryBookReq::clear_price() {
  _impl_.price_ = int64_t{0};
}
inline int64_t AddLibraryBookReq::_internal_price() const {
  return _impl_.price_;
}
inline int64_t AddLibraryBookReq::price() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.AddLibraryBookReq.Price)
  return _internal_price();
}
inline void AddLibraryBookReq::_internal_set_price(int64_t value) {
  
  _impl_.price_ = value;
}
inline void AddLibraryBookReq::set_price(int64_t value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.AddLibraryBookReq.Price)
}

// sint64 ModifyCount = 5;
inline void AddLibraryBookReq::clear_modifycount() {
  _impl_.modifycount_ = int64_t{0};
}
inline int64_t AddLibraryBookReq::_internal_modifycount() const {
  return _impl_.modifycount_;
}
inline int64_t AddLibraryBookReq::modifycount() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.AddLibraryBookReq.ModifyCount)
  return _internal_modifycount();
}
inline void AddLibraryBookReq::_internal_set_modifycount(int64_t value) {
  
  _impl_.modifycount_ = value;
}
inline void AddLibraryBookReq::set_modifycount(int64_t value) {
  _internal_set_modifycount(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.AddLibraryBookReq.ModifyCount)
}

// .CRYSTAL_NET.service.KeyWordsField KeyWords = 6;
inline bool AddLibraryBookReq::_internal_has_keywords() const {
  return KeyWordsOption_case() == kKeyWords;
}
inline bool AddLibraryBookReq::has_keywords() const {
  return _internal_has_keywords();
}
inline void AddLibraryBookReq::set_has_keywords() {
  _impl_._oneof_case_[1] = kKeyWords;
}
inline ::CRYSTAL_NET::service::KeyWordsField* AddLibraryBookReq::release_keywords() {
  // @@protoc_insertion_point(field_release:CRYSTAL_NET.service.AddLibraryBookReq.KeyWords)
  if (_internal_has_keywords()) {
    clear_has_KeyWordsOption();
    ::CRYSTAL_NET::service::KeyWordsField* temp = _impl_.KeyWordsOption_.keywords_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.KeyWordsOption_.keywords_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CRYSTAL_NET::service::KeyWordsField& AddLibraryBookReq::_internal_keywords() const {
  return _internal_has_keywords()
      ? *_impl_.KeyWordsOption_.keywords_
      : reinterpret_cast< ::CRYSTAL_NET::service::KeyWordsField&>(::CRYSTAL_NET::service::_KeyWordsField_default_instance_);
}
inline const ::CRYSTAL_NET::service::KeyWordsField& AddLibraryBookReq::keywords() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.AddLibraryBookReq.KeyWords)
  return _internal_keywords();
}
inline ::CRYSTAL_NET::service::KeyWordsField* AddLibraryBookReq::unsafe_arena_release_keywords() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CRYSTAL_NET.service.AddLibraryBookReq.KeyWords)
  if (_internal_has_keywords()) {
    clear_has_KeyWordsOption();
    ::CRYSTAL_NET::service::KeyWordsField* temp = _impl_.KeyWordsOption_.keywords_;
    _impl_.KeyWordsOption_.keywords_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AddLibraryBookReq::unsafe_arena_set_allocated_keywords(::CRYSTAL_NET::service::KeyWordsField* keywords) {
  clear_KeyWordsOption();
  if (keywords) {
    set_has_keywords();
    _impl_.KeyWordsOption_.keywords_ = keywords;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CRYSTAL_NET.service.AddLibraryBookReq.KeyWords)
}
inline ::CRYSTAL_NET::service::KeyWordsField* AddLibraryBookReq::_internal_mutable_keywords() {
  if (!_internal_has_keywords()) {
    clear_KeyWordsOption();
    set_has_keywords();
    _impl_.KeyWordsOption_.keywords_ = CreateMaybeMessage< ::CRYSTAL_NET::service::KeyWordsField >(GetArenaForAllocation());
  }
  return _impl_.KeyWordsOption_.keywords_;
}
inline ::CRYSTAL_NET::service::KeyWordsField* AddLibraryBookReq::mutable_keywords() {
  ::CRYSTAL_NET::service::KeyWordsField* _msg = _internal_mutable_keywords();
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.AddLibraryBookReq.KeyWords)
  return _msg;
}

// string Content = 7;
inline bool AddLibraryBookReq::_internal_has_content() const {
  return ContentOption_case() == kContent;
}
inline bool AddLibraryBookReq::has_content() const {
  return _internal_has_content();
}
inline void AddLibraryBookReq::set_has_content() {
  _impl_._oneof_case_[2] = kContent;
}
inline void AddLibraryBookReq::clear_content() {
  if (_internal_has_content()) {
    _impl_.ContentOption_.content_.Destroy();
    clear_has_ContentOption();
  }
}
inline const std::string& AddLibraryBookReq::content() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.AddLibraryBookReq.Content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline void AddLibraryBookReq::set_content(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_content()) {
    clear_ContentOption();
    set_has_content();
    _impl_.ContentOption_.content_.InitDefault();
  }
  _impl_.ContentOption_.content_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.AddLibraryBookReq.Content)
}
inline std::string* AddLibraryBookReq::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.AddLibraryBookReq.Content)
  return _s;
}
inline const std::string& AddLibraryBookReq::_internal_content() const {
  if (_internal_has_content()) {
    return _impl_.ContentOption_.content_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void AddLibraryBookReq::_internal_set_content(const std::string& value) {
  if (!_internal_has_content()) {
    clear_ContentOption();
    set_has_content();
    _impl_.ContentOption_.content_.InitDefault();
  }
  _impl_.ContentOption_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* AddLibraryBookReq::_internal_mutable_content() {
  if (!_internal_has_content()) {
    clear_ContentOption();
    set_has_content();
    _impl_.ContentOption_.content_.InitDefault();
  }
  return _impl_.ContentOption_.content_.Mutable(      GetArenaForAllocation());
}
inline std::string* AddLibraryBookReq::release_content() {
  // @@protoc_insertion_point(field_release:CRYSTAL_NET.service.AddLibraryBookReq.Content)
  if (_internal_has_content()) {
    clear_has_ContentOption();
    return _impl_.ContentOption_.content_.Release();
  } else {
    return nullptr;
  }
}
inline void AddLibraryBookReq::set_allocated_content(std::string* content) {
  if (has_ContentOption()) {
    clear_ContentOption();
  }
  if (content != nullptr) {
    set_has_content();
    _impl_.ContentOption_.content_.InitAllocated(content, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:CRYSTAL_NET.service.AddLibraryBookReq.Content)
}

// .CRYSTAL_NET.service.SnapshotField Snapshot = 8;
inline bool AddLibraryBookReq::_internal_has_snapshot() const {
  return SnapshotOption_case() == kSnapshot;
}
inline bool AddLibraryBookReq::has_snapshot() const {
  return _internal_has_snapshot();
}
inline void AddLibraryBookReq::set_has_snapshot() {
  _impl_._oneof_case_[3] = kSnapshot;
}
inline ::CRYSTAL_NET::service::SnapshotField* AddLibraryBookReq::release_snapshot() {
  // @@protoc_insertion_point(field_release:CRYSTAL_NET.service.AddLibraryBookReq.Snapshot)
  if (_internal_has_snapshot()) {
    clear_has_SnapshotOption();
    ::CRYSTAL_NET::service::SnapshotField* temp = _impl_.SnapshotOption_.snapshot_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.SnapshotOption_.snapshot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CRYSTAL_NET::service::SnapshotField& AddLibraryBookReq::_internal_snapshot() const {
  return _internal_has_snapshot()
      ? *_impl_.SnapshotOption_.snapshot_
      : reinterpret_cast< ::CRYSTAL_NET::service::SnapshotField&>(::CRYSTAL_NET::service::_SnapshotField_default_instance_);
}
inline const ::CRYSTAL_NET::service::SnapshotField& AddLibraryBookReq::snapshot() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.AddLibraryBookReq.Snapshot)
  return _internal_snapshot();
}
inline ::CRYSTAL_NET::service::SnapshotField* AddLibraryBookReq::unsafe_arena_release_snapshot() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CRYSTAL_NET.service.AddLibraryBookReq.Snapshot)
  if (_internal_has_snapshot()) {
    clear_has_SnapshotOption();
    ::CRYSTAL_NET::service::SnapshotField* temp = _impl_.SnapshotOption_.snapshot_;
    _impl_.SnapshotOption_.snapshot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AddLibraryBookReq::unsafe_arena_set_allocated_snapshot(::CRYSTAL_NET::service::SnapshotField* snapshot) {
  clear_SnapshotOption();
  if (snapshot) {
    set_has_snapshot();
    _impl_.SnapshotOption_.snapshot_ = snapshot;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CRYSTAL_NET.service.AddLibraryBookReq.Snapshot)
}
inline ::CRYSTAL_NET::service::SnapshotField* AddLibraryBookReq::_internal_mutable_snapshot() {
  if (!_internal_has_snapshot()) {
    clear_SnapshotOption();
    set_has_snapshot();
    _impl_.SnapshotOption_.snapshot_ = CreateMaybeMessage< ::CRYSTAL_NET::service::SnapshotField >(GetArenaForAllocation());
  }
  return _impl_.SnapshotOption_.snapshot_;
}
inline ::CRYSTAL_NET::service::SnapshotField* AddLibraryBookReq::mutable_snapshot() {
  ::CRYSTAL_NET::service::SnapshotField* _msg = _internal_mutable_snapshot();
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.AddLibraryBookReq.Snapshot)
  return _msg;
}

inline bool AddLibraryBookReq::has_BookCoverImageOption() const {
  return BookCoverImageOption_case() != BOOKCOVERIMAGEOPTION_NOT_SET;
}
inline void AddLibraryBookReq::clear_has_BookCoverImageOption() {
  _impl_._oneof_case_[0] = BOOKCOVERIMAGEOPTION_NOT_SET;
}
inline bool AddLibraryBookReq::has_KeyWordsOption() const {
  return KeyWordsOption_case() != KEYWORDSOPTION_NOT_SET;
}
inline void AddLibraryBookReq::clear_has_KeyWordsOption() {
  _impl_._oneof_case_[1] = KEYWORDSOPTION_NOT_SET;
}
inline bool AddLibraryBookReq::has_ContentOption() const {
  return ContentOption_case() != CONTENTOPTION_NOT_SET;
}
inline void AddLibraryBookReq::clear_has_ContentOption() {
  _impl_._oneof_case_[2] = CONTENTOPTION_NOT_SET;
}
inline bool AddLibraryBookReq::has_SnapshotOption() const {
  return SnapshotOption_case() != SNAPSHOTOPTION_NOT_SET;
}
inline void AddLibraryBookReq::clear_has_SnapshotOption() {
  _impl_._oneof_case_[3] = SNAPSHOTOPTION_NOT_SET;
}
inline AddLibraryBookReq::BookCoverImageOptionCase AddLibraryBookReq::BookCoverImageOption_case() const {
  return AddLibraryBookReq::BookCoverImageOptionCase(_impl_._oneof_case_[0]);
}
inline AddLibraryBookReq::KeyWordsOptionCase AddLibraryBookReq::KeyWordsOption_case() const {
  return AddLibraryBookReq::KeyWordsOptionCase(_impl_._oneof_case_[1]);
}
inline AddLibraryBookReq::ContentOptionCase AddLibraryBookReq::ContentOption_case() const {
  return AddLibraryBookReq::ContentOptionCase(_impl_._oneof_case_[2]);
}
inline AddLibraryBookReq::SnapshotOptionCase AddLibraryBookReq::SnapshotOption_case() const {
  return AddLibraryBookReq::SnapshotOptionCase(_impl_._oneof_case_[3]);
}
// -------------------------------------------------------------------

// AddLibraryBookRes

// sint32 ErrCode = 1;
inline void AddLibraryBookRes::clear_errcode() {
  _impl_.errcode_ = 0;
}
inline int32_t AddLibraryBookRes::_internal_errcode() const {
  return _impl_.errcode_;
}
inline int32_t AddLibraryBookRes::errcode() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.AddLibraryBookRes.ErrCode)
  return _internal_errcode();
}
inline void AddLibraryBookRes::_internal_set_errcode(int32_t value) {
  
  _impl_.errcode_ = value;
}
inline void AddLibraryBookRes::set_errcode(int32_t value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.AddLibraryBookRes.ErrCode)
}

// -------------------------------------------------------------------

// AddLibraryBookCountReq

// uint64 BookId = 1;
inline void AddLibraryBookCountReq::clear_bookid() {
  _impl_.bookid_ = uint64_t{0u};
}
inline uint64_t AddLibraryBookCountReq::_internal_bookid() const {
  return _impl_.bookid_;
}
inline uint64_t AddLibraryBookCountReq::bookid() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.AddLibraryBookCountReq.BookId)
  return _internal_bookid();
}
inline void AddLibraryBookCountReq::_internal_set_bookid(uint64_t value) {
  
  _impl_.bookid_ = value;
}
inline void AddLibraryBookCountReq::set_bookid(uint64_t value) {
  _internal_set_bookid(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.AddLibraryBookCountReq.BookId)
}

// sint64 ModifyCount = 2;
inline void AddLibraryBookCountReq::clear_modifycount() {
  _impl_.modifycount_ = int64_t{0};
}
inline int64_t AddLibraryBookCountReq::_internal_modifycount() const {
  return _impl_.modifycount_;
}
inline int64_t AddLibraryBookCountReq::modifycount() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.AddLibraryBookCountReq.ModifyCount)
  return _internal_modifycount();
}
inline void AddLibraryBookCountReq::_internal_set_modifycount(int64_t value) {
  
  _impl_.modifycount_ = value;
}
inline void AddLibraryBookCountReq::set_modifycount(int64_t value) {
  _internal_set_modifycount(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.AddLibraryBookCountReq.ModifyCount)
}

// -------------------------------------------------------------------

// AddLibraryBookCountRes

// sint32 ErrCode = 1;
inline void AddLibraryBookCountRes::clear_errcode() {
  _impl_.errcode_ = 0;
}
inline int32_t AddLibraryBookCountRes::_internal_errcode() const {
  return _impl_.errcode_;
}
inline int32_t AddLibraryBookCountRes::errcode() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.AddLibraryBookCountRes.ErrCode)
  return _internal_errcode();
}
inline void AddLibraryBookCountRes::_internal_set_errcode(int32_t value) {
  
  _impl_.errcode_ = value;
}
inline void AddLibraryBookCountRes::set_errcode(int32_t value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.AddLibraryBookCountRes.ErrCode)
}

// -------------------------------------------------------------------

// GetBookListReq

// -------------------------------------------------------------------

// BookListNty

// repeated .CRYSTAL_NET.service.BookInfo BookInfoList = 1;
inline int BookListNty::_internal_bookinfolist_size() const {
  return _impl_.bookinfolist_.size();
}
inline int BookListNty::bookinfolist_size() const {
  return _internal_bookinfolist_size();
}
inline ::CRYSTAL_NET::service::BookInfo* BookListNty::mutable_bookinfolist(int index) {
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.BookListNty.BookInfoList)
  return _impl_.bookinfolist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRYSTAL_NET::service::BookInfo >*
BookListNty::mutable_bookinfolist() {
  // @@protoc_insertion_point(field_mutable_list:CRYSTAL_NET.service.BookListNty.BookInfoList)
  return &_impl_.bookinfolist_;
}
inline const ::CRYSTAL_NET::service::BookInfo& BookListNty::_internal_bookinfolist(int index) const {
  return _impl_.bookinfolist_.Get(index);
}
inline const ::CRYSTAL_NET::service::BookInfo& BookListNty::bookinfolist(int index) const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.BookListNty.BookInfoList)
  return _internal_bookinfolist(index);
}
inline ::CRYSTAL_NET::service::BookInfo* BookListNty::_internal_add_bookinfolist() {
  return _impl_.bookinfolist_.Add();
}
inline ::CRYSTAL_NET::service::BookInfo* BookListNty::add_bookinfolist() {
  ::CRYSTAL_NET::service::BookInfo* _add = _internal_add_bookinfolist();
  // @@protoc_insertion_point(field_add:CRYSTAL_NET.service.BookListNty.BookInfoList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRYSTAL_NET::service::BookInfo >&
BookListNty::bookinfolist() const {
  // @@protoc_insertion_point(field_list:CRYSTAL_NET.service.BookListNty.BookInfoList)
  return _impl_.bookinfolist_;
}

// -------------------------------------------------------------------

// BooksChangeNty

// repeated .CRYSTAL_NET.service.BookInfo BookInfoList = 1;
inline int BooksChangeNty::_internal_bookinfolist_size() const {
  return _impl_.bookinfolist_.size();
}
inline int BooksChangeNty::bookinfolist_size() const {
  return _internal_bookinfolist_size();
}
inline ::CRYSTAL_NET::service::BookInfo* BooksChangeNty::mutable_bookinfolist(int index) {
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.BooksChangeNty.BookInfoList)
  return _impl_.bookinfolist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRYSTAL_NET::service::BookInfo >*
BooksChangeNty::mutable_bookinfolist() {
  // @@protoc_insertion_point(field_mutable_list:CRYSTAL_NET.service.BooksChangeNty.BookInfoList)
  return &_impl_.bookinfolist_;
}
inline const ::CRYSTAL_NET::service::BookInfo& BooksChangeNty::_internal_bookinfolist(int index) const {
  return _impl_.bookinfolist_.Get(index);
}
inline const ::CRYSTAL_NET::service::BookInfo& BooksChangeNty::bookinfolist(int index) const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.BooksChangeNty.BookInfoList)
  return _internal_bookinfolist(index);
}
inline ::CRYSTAL_NET::service::BookInfo* BooksChangeNty::_internal_add_bookinfolist() {
  return _impl_.bookinfolist_.Add();
}
inline ::CRYSTAL_NET::service::BookInfo* BooksChangeNty::add_bookinfolist() {
  ::CRYSTAL_NET::service::BookInfo* _add = _internal_add_bookinfolist();
  // @@protoc_insertion_point(field_add:CRYSTAL_NET.service.BooksChangeNty.BookInfoList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRYSTAL_NET::service::BookInfo >&
BooksChangeNty::bookinfolist() const {
  // @@protoc_insertion_point(field_list:CRYSTAL_NET.service.BooksChangeNty.BookInfoList)
  return _impl_.bookinfolist_;
}

// -------------------------------------------------------------------

// BookVariantInfoItemsNty

// repeated .CRYSTAL_NET.service.BookVariantInfoItem BookVariantInfoItemList = 1;
inline int BookVariantInfoItemsNty::_internal_bookvariantinfoitemlist_size() const {
  return _impl_.bookvariantinfoitemlist_.size();
}
inline int BookVariantInfoItemsNty::bookvariantinfoitemlist_size() const {
  return _internal_bookvariantinfoitemlist_size();
}
inline ::CRYSTAL_NET::service::BookVariantInfoItem* BookVariantInfoItemsNty::mutable_bookvariantinfoitemlist(int index) {
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.BookVariantInfoItemsNty.BookVariantInfoItemList)
  return _impl_.bookvariantinfoitemlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRYSTAL_NET::service::BookVariantInfoItem >*
BookVariantInfoItemsNty::mutable_bookvariantinfoitemlist() {
  // @@protoc_insertion_point(field_mutable_list:CRYSTAL_NET.service.BookVariantInfoItemsNty.BookVariantInfoItemList)
  return &_impl_.bookvariantinfoitemlist_;
}
inline const ::CRYSTAL_NET::service::BookVariantInfoItem& BookVariantInfoItemsNty::_internal_bookvariantinfoitemlist(int index) const {
  return _impl_.bookvariantinfoitemlist_.Get(index);
}
inline const ::CRYSTAL_NET::service::BookVariantInfoItem& BookVariantInfoItemsNty::bookvariantinfoitemlist(int index) const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.BookVariantInfoItemsNty.BookVariantInfoItemList)
  return _internal_bookvariantinfoitemlist(index);
}
inline ::CRYSTAL_NET::service::BookVariantInfoItem* BookVariantInfoItemsNty::_internal_add_bookvariantinfoitemlist() {
  return _impl_.bookvariantinfoitemlist_.Add();
}
inline ::CRYSTAL_NET::service::BookVariantInfoItem* BookVariantInfoItemsNty::add_bookvariantinfoitemlist() {
  ::CRYSTAL_NET::service::BookVariantInfoItem* _add = _internal_add_bookvariantinfoitemlist();
  // @@protoc_insertion_point(field_add:CRYSTAL_NET.service.BookVariantInfoItemsNty.BookVariantInfoItemList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRYSTAL_NET::service::BookVariantInfoItem >&
BookVariantInfoItemsNty::bookvariantinfoitemlist() const {
  // @@protoc_insertion_point(field_list:CRYSTAL_NET.service.BookVariantInfoItemsNty.BookVariantInfoItemList)
  return _impl_.bookvariantinfoitemlist_;
}

// -------------------------------------------------------------------

// GetBookListRes

// sint32 ErrCode = 1;
inline void GetBookListRes::clear_errcode() {
  _impl_.errcode_ = 0;
}
inline int32_t GetBookListRes::_internal_errcode() const {
  return _impl_.errcode_;
}
inline int32_t GetBookListRes::errcode() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.GetBookListRes.ErrCode)
  return _internal_errcode();
}
inline void GetBookListRes::_internal_set_errcode(int32_t value) {
  
  _impl_.errcode_ = value;
}
inline void GetBookListRes::set_errcode(int32_t value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.GetBookListRes.ErrCode)
}

// -------------------------------------------------------------------

// GetBookInfoReq

// string IsbnCode = 1;
inline void GetBookInfoReq::clear_isbncode() {
  _impl_.isbncode_.ClearToEmpty();
}
inline const std::string& GetBookInfoReq::isbncode() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.GetBookInfoReq.IsbnCode)
  return _internal_isbncode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetBookInfoReq::set_isbncode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.isbncode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.GetBookInfoReq.IsbnCode)
}
inline std::string* GetBookInfoReq::mutable_isbncode() {
  std::string* _s = _internal_mutable_isbncode();
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.GetBookInfoReq.IsbnCode)
  return _s;
}
inline const std::string& GetBookInfoReq::_internal_isbncode() const {
  return _impl_.isbncode_.Get();
}
inline void GetBookInfoReq::_internal_set_isbncode(const std::string& value) {
  
  _impl_.isbncode_.Set(value, GetArenaForAllocation());
}
inline std::string* GetBookInfoReq::_internal_mutable_isbncode() {
  
  return _impl_.isbncode_.Mutable(GetArenaForAllocation());
}
inline std::string* GetBookInfoReq::release_isbncode() {
  // @@protoc_insertion_point(field_release:CRYSTAL_NET.service.GetBookInfoReq.IsbnCode)
  return _impl_.isbncode_.Release();
}
inline void GetBookInfoReq::set_allocated_isbncode(std::string* isbncode) {
  if (isbncode != nullptr) {
    
  } else {
    
  }
  _impl_.isbncode_.SetAllocated(isbncode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.isbncode_.IsDefault()) {
    _impl_.isbncode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRYSTAL_NET.service.GetBookInfoReq.IsbnCode)
}

// -------------------------------------------------------------------

// GetBookInfoRes

// sint32 ErrCode = 1;
inline void GetBookInfoRes::clear_errcode() {
  _impl_.errcode_ = 0;
}
inline int32_t GetBookInfoRes::_internal_errcode() const {
  return _impl_.errcode_;
}
inline int32_t GetBookInfoRes::errcode() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.GetBookInfoRes.ErrCode)
  return _internal_errcode();
}
inline void GetBookInfoRes::_internal_set_errcode(int32_t value) {
  
  _impl_.errcode_ = value;
}
inline void GetBookInfoRes::set_errcode(int32_t value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.GetBookInfoRes.ErrCode)
}

// .CRYSTAL_NET.service.BookInfo BookInfo = 2;
inline bool GetBookInfoRes::_internal_has_bookinfo() const {
  return this != internal_default_instance() && _impl_.bookinfo_ != nullptr;
}
inline bool GetBookInfoRes::has_bookinfo() const {
  return _internal_has_bookinfo();
}
inline const ::CRYSTAL_NET::service::BookInfo& GetBookInfoRes::_internal_bookinfo() const {
  const ::CRYSTAL_NET::service::BookInfo* p = _impl_.bookinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::CRYSTAL_NET::service::BookInfo&>(
      ::CRYSTAL_NET::service::_BookInfo_default_instance_);
}
inline const ::CRYSTAL_NET::service::BookInfo& GetBookInfoRes::bookinfo() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.GetBookInfoRes.BookInfo)
  return _internal_bookinfo();
}
inline void GetBookInfoRes::unsafe_arena_set_allocated_bookinfo(
    ::CRYSTAL_NET::service::BookInfo* bookinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bookinfo_);
  }
  _impl_.bookinfo_ = bookinfo;
  if (bookinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CRYSTAL_NET.service.GetBookInfoRes.BookInfo)
}
inline ::CRYSTAL_NET::service::BookInfo* GetBookInfoRes::release_bookinfo() {
  
  ::CRYSTAL_NET::service::BookInfo* temp = _impl_.bookinfo_;
  _impl_.bookinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CRYSTAL_NET::service::BookInfo* GetBookInfoRes::unsafe_arena_release_bookinfo() {
  // @@protoc_insertion_point(field_release:CRYSTAL_NET.service.GetBookInfoRes.BookInfo)
  
  ::CRYSTAL_NET::service::BookInfo* temp = _impl_.bookinfo_;
  _impl_.bookinfo_ = nullptr;
  return temp;
}
inline ::CRYSTAL_NET::service::BookInfo* GetBookInfoRes::_internal_mutable_bookinfo() {
  
  if (_impl_.bookinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::CRYSTAL_NET::service::BookInfo>(GetArenaForAllocation());
    _impl_.bookinfo_ = p;
  }
  return _impl_.bookinfo_;
}
inline ::CRYSTAL_NET::service::BookInfo* GetBookInfoRes::mutable_bookinfo() {
  ::CRYSTAL_NET::service::BookInfo* _msg = _internal_mutable_bookinfo();
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.GetBookInfoRes.BookInfo)
  return _msg;
}
inline void GetBookInfoRes::set_allocated_bookinfo(::CRYSTAL_NET::service::BookInfo* bookinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bookinfo_);
  }
  if (bookinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bookinfo));
    if (message_arena != submessage_arena) {
      bookinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bookinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bookinfo_ = bookinfo;
  // @@protoc_insertion_point(field_set_allocated:CRYSTAL_NET.service.GetBookInfoRes.BookInfo)
}

// -------------------------------------------------------------------

// GetBookByBookNameReq

// string BookName = 1;
inline void GetBookByBookNameReq::clear_bookname() {
  _impl_.bookname_.ClearToEmpty();
}
inline const std::string& GetBookByBookNameReq::bookname() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.GetBookByBookNameReq.BookName)
  return _internal_bookname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetBookByBookNameReq::set_bookname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bookname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.GetBookByBookNameReq.BookName)
}
inline std::string* GetBookByBookNameReq::mutable_bookname() {
  std::string* _s = _internal_mutable_bookname();
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.GetBookByBookNameReq.BookName)
  return _s;
}
inline const std::string& GetBookByBookNameReq::_internal_bookname() const {
  return _impl_.bookname_.Get();
}
inline void GetBookByBookNameReq::_internal_set_bookname(const std::string& value) {
  
  _impl_.bookname_.Set(value, GetArenaForAllocation());
}
inline std::string* GetBookByBookNameReq::_internal_mutable_bookname() {
  
  return _impl_.bookname_.Mutable(GetArenaForAllocation());
}
inline std::string* GetBookByBookNameReq::release_bookname() {
  // @@protoc_insertion_point(field_release:CRYSTAL_NET.service.GetBookByBookNameReq.BookName)
  return _impl_.bookname_.Release();
}
inline void GetBookByBookNameReq::set_allocated_bookname(std::string* bookname) {
  if (bookname != nullptr) {
    
  } else {
    
  }
  _impl_.bookname_.SetAllocated(bookname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bookname_.IsDefault()) {
    _impl_.bookname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRYSTAL_NET.service.GetBookByBookNameReq.BookName)
}

// -------------------------------------------------------------------

// GetBookByBookNameRes

// repeated .CRYSTAL_NET.service.BookInfo BookInfoList = 1;
inline int GetBookByBookNameRes::_internal_bookinfolist_size() const {
  return _impl_.bookinfolist_.size();
}
inline int GetBookByBookNameRes::bookinfolist_size() const {
  return _internal_bookinfolist_size();
}
inline ::CRYSTAL_NET::service::BookInfo* GetBookByBookNameRes::mutable_bookinfolist(int index) {
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.GetBookByBookNameRes.BookInfoList)
  return _impl_.bookinfolist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRYSTAL_NET::service::BookInfo >*
GetBookByBookNameRes::mutable_bookinfolist() {
  // @@protoc_insertion_point(field_mutable_list:CRYSTAL_NET.service.GetBookByBookNameRes.BookInfoList)
  return &_impl_.bookinfolist_;
}
inline const ::CRYSTAL_NET::service::BookInfo& GetBookByBookNameRes::_internal_bookinfolist(int index) const {
  return _impl_.bookinfolist_.Get(index);
}
inline const ::CRYSTAL_NET::service::BookInfo& GetBookByBookNameRes::bookinfolist(int index) const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.GetBookByBookNameRes.BookInfoList)
  return _internal_bookinfolist(index);
}
inline ::CRYSTAL_NET::service::BookInfo* GetBookByBookNameRes::_internal_add_bookinfolist() {
  return _impl_.bookinfolist_.Add();
}
inline ::CRYSTAL_NET::service::BookInfo* GetBookByBookNameRes::add_bookinfolist() {
  ::CRYSTAL_NET::service::BookInfo* _add = _internal_add_bookinfolist();
  // @@protoc_insertion_point(field_add:CRYSTAL_NET.service.GetBookByBookNameRes.BookInfoList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRYSTAL_NET::service::BookInfo >&
GetBookByBookNameRes::bookinfolist() const {
  // @@protoc_insertion_point(field_list:CRYSTAL_NET.service.GetBookByBookNameRes.BookInfoList)
  return _impl_.bookinfolist_;
}

// -------------------------------------------------------------------

// BorrowBookReq

// repeated .CRYSTAL_NET.service.BorrowBookItem BorrowBookList = 1;
inline int BorrowBookReq::_internal_borrowbooklist_size() const {
  return _impl_.borrowbooklist_.size();
}
inline int BorrowBookReq::borrowbooklist_size() const {
  return _internal_borrowbooklist_size();
}
inline ::CRYSTAL_NET::service::BorrowBookItem* BorrowBookReq::mutable_borrowbooklist(int index) {
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.BorrowBookReq.BorrowBookList)
  return _impl_.borrowbooklist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRYSTAL_NET::service::BorrowBookItem >*
BorrowBookReq::mutable_borrowbooklist() {
  // @@protoc_insertion_point(field_mutable_list:CRYSTAL_NET.service.BorrowBookReq.BorrowBookList)
  return &_impl_.borrowbooklist_;
}
inline const ::CRYSTAL_NET::service::BorrowBookItem& BorrowBookReq::_internal_borrowbooklist(int index) const {
  return _impl_.borrowbooklist_.Get(index);
}
inline const ::CRYSTAL_NET::service::BorrowBookItem& BorrowBookReq::borrowbooklist(int index) const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.BorrowBookReq.BorrowBookList)
  return _internal_borrowbooklist(index);
}
inline ::CRYSTAL_NET::service::BorrowBookItem* BorrowBookReq::_internal_add_borrowbooklist() {
  return _impl_.borrowbooklist_.Add();
}
inline ::CRYSTAL_NET::service::BorrowBookItem* BorrowBookReq::add_borrowbooklist() {
  ::CRYSTAL_NET::service::BorrowBookItem* _add = _internal_add_borrowbooklist();
  // @@protoc_insertion_point(field_add:CRYSTAL_NET.service.BorrowBookReq.BorrowBookList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRYSTAL_NET::service::BorrowBookItem >&
BorrowBookReq::borrowbooklist() const {
  // @@protoc_insertion_point(field_list:CRYSTAL_NET.service.BorrowBookReq.BorrowBookList)
  return _impl_.borrowbooklist_;
}

// -------------------------------------------------------------------

// BorrowBookRes

// sint32 ErrCode = 1;
inline void BorrowBookRes::clear_errcode() {
  _impl_.errcode_ = 0;
}
inline int32_t BorrowBookRes::_internal_errcode() const {
  return _impl_.errcode_;
}
inline int32_t BorrowBookRes::errcode() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.BorrowBookRes.ErrCode)
  return _internal_errcode();
}
inline void BorrowBookRes::_internal_set_errcode(int32_t value) {
  
  _impl_.errcode_ = value;
}
inline void BorrowBookRes::set_errcode(int32_t value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.BorrowBookRes.ErrCode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service
}  // namespace CRYSTAL_NET

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>

class GetLibraryInfoReqFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, GetLibraryInfoReqFactory);
public:

    virtual void Release() override {
        GetLibraryInfoReqFactory::Delete_GetLibraryInfoReqFactory(this);
    }

    static GetLibraryInfoReqFactory *CreateFactory() {
        return GetLibraryInfoReqFactory::New_GetLibraryInfoReqFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::GetLibraryInfoReq();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::GetLibraryInfoReq(*dynamic_cast<const ::CRYSTAL_NET::service::GetLibraryInfoReq *>(coder));
    }

};


class LibraryInfoNtyFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, LibraryInfoNtyFactory);
public:

    virtual void Release() override {
        LibraryInfoNtyFactory::Delete_LibraryInfoNtyFactory(this);
    }

    static LibraryInfoNtyFactory *CreateFactory() {
        return LibraryInfoNtyFactory::New_LibraryInfoNtyFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::LibraryInfoNty();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::LibraryInfoNty(*dynamic_cast<const ::CRYSTAL_NET::service::LibraryInfoNty *>(coder));
    }

};


class GetLibraryInfoResFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, GetLibraryInfoResFactory);
public:

    virtual void Release() override {
        GetLibraryInfoResFactory::Delete_GetLibraryInfoResFactory(this);
    }

    static GetLibraryInfoResFactory *CreateFactory() {
        return GetLibraryInfoResFactory::New_GetLibraryInfoResFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::GetLibraryInfoRes();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::GetLibraryInfoRes(*dynamic_cast<const ::CRYSTAL_NET::service::GetLibraryInfoRes *>(coder));
    }

};


class CreateLibraryReqFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, CreateLibraryReqFactory);
public:

    virtual void Release() override {
        CreateLibraryReqFactory::Delete_CreateLibraryReqFactory(this);
    }

    static CreateLibraryReqFactory *CreateFactory() {
        return CreateLibraryReqFactory::New_CreateLibraryReqFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::CreateLibraryReq();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::CreateLibraryReq(*dynamic_cast<const ::CRYSTAL_NET::service::CreateLibraryReq *>(coder));
    }

};


class CreateLibraryResFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, CreateLibraryResFactory);
public:

    virtual void Release() override {
        CreateLibraryResFactory::Delete_CreateLibraryResFactory(this);
    }

    static CreateLibraryResFactory *CreateFactory() {
        return CreateLibraryResFactory::New_CreateLibraryResFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::CreateLibraryRes();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::CreateLibraryRes(*dynamic_cast<const ::CRYSTAL_NET::service::CreateLibraryRes *>(coder));
    }

};


class JoinLibraryReqFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, JoinLibraryReqFactory);
public:

    virtual void Release() override {
        JoinLibraryReqFactory::Delete_JoinLibraryReqFactory(this);
    }

    static JoinLibraryReqFactory *CreateFactory() {
        return JoinLibraryReqFactory::New_JoinLibraryReqFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::JoinLibraryReq();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::JoinLibraryReq(*dynamic_cast<const ::CRYSTAL_NET::service::JoinLibraryReq *>(coder));
    }

};


class JoinLibraryResFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, JoinLibraryResFactory);
public:

    virtual void Release() override {
        JoinLibraryResFactory::Delete_JoinLibraryResFactory(this);
    }

    static JoinLibraryResFactory *CreateFactory() {
        return JoinLibraryResFactory::New_JoinLibraryResFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::JoinLibraryRes();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::JoinLibraryRes(*dynamic_cast<const ::CRYSTAL_NET::service::JoinLibraryRes *>(coder));
    }

};


class QuitLibraryReqFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, QuitLibraryReqFactory);
public:

    virtual void Release() override {
        QuitLibraryReqFactory::Delete_QuitLibraryReqFactory(this);
    }

    static QuitLibraryReqFactory *CreateFactory() {
        return QuitLibraryReqFactory::New_QuitLibraryReqFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::QuitLibraryReq();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::QuitLibraryReq(*dynamic_cast<const ::CRYSTAL_NET::service::QuitLibraryReq *>(coder));
    }

};


class QuitLibraryResFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, QuitLibraryResFactory);
public:

    virtual void Release() override {
        QuitLibraryResFactory::Delete_QuitLibraryResFactory(this);
    }

    static QuitLibraryResFactory *CreateFactory() {
        return QuitLibraryResFactory::New_QuitLibraryResFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::QuitLibraryRes();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::QuitLibraryRes(*dynamic_cast<const ::CRYSTAL_NET::service::QuitLibraryRes *>(coder));
    }

};


class GetLibraryListReqFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, GetLibraryListReqFactory);
public:

    virtual void Release() override {
        GetLibraryListReqFactory::Delete_GetLibraryListReqFactory(this);
    }

    static GetLibraryListReqFactory *CreateFactory() {
        return GetLibraryListReqFactory::New_GetLibraryListReqFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::GetLibraryListReq();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::GetLibraryListReq(*dynamic_cast<const ::CRYSTAL_NET::service::GetLibraryListReq *>(coder));
    }

};


class GetLibraryListResFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, GetLibraryListResFactory);
public:

    virtual void Release() override {
        GetLibraryListResFactory::Delete_GetLibraryListResFactory(this);
    }

    static GetLibraryListResFactory *CreateFactory() {
        return GetLibraryListResFactory::New_GetLibraryListResFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::GetLibraryListRes();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::GetLibraryListRes(*dynamic_cast<const ::CRYSTAL_NET::service::GetLibraryListRes *>(coder));
    }

};


class TransferLibraianReqFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, TransferLibraianReqFactory);
public:

    virtual void Release() override {
        TransferLibraianReqFactory::Delete_TransferLibraianReqFactory(this);
    }

    static TransferLibraianReqFactory *CreateFactory() {
        return TransferLibraianReqFactory::New_TransferLibraianReqFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::TransferLibraianReq();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::TransferLibraianReq(*dynamic_cast<const ::CRYSTAL_NET::service::TransferLibraianReq *>(coder));
    }

};


class TransferLibraianResFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, TransferLibraianResFactory);
public:

    virtual void Release() override {
        TransferLibraianResFactory::Delete_TransferLibraianResFactory(this);
    }

    static TransferLibraianResFactory *CreateFactory() {
        return TransferLibraianResFactory::New_TransferLibraianResFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::TransferLibraianRes();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::TransferLibraianRes(*dynamic_cast<const ::CRYSTAL_NET::service::TransferLibraianRes *>(coder));
    }

};


class ModifyMemberInfoReqFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, ModifyMemberInfoReqFactory);
public:

    virtual void Release() override {
        ModifyMemberInfoReqFactory::Delete_ModifyMemberInfoReqFactory(this);
    }

    static ModifyMemberInfoReqFactory *CreateFactory() {
        return ModifyMemberInfoReqFactory::New_ModifyMemberInfoReqFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::ModifyMemberInfoReq();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::ModifyMemberInfoReq(*dynamic_cast<const ::CRYSTAL_NET::service::ModifyMemberInfoReq *>(coder));
    }

};


class ModifyMemberInfoResFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, ModifyMemberInfoResFactory);
public:

    virtual void Release() override {
        ModifyMemberInfoResFactory::Delete_ModifyMemberInfoResFactory(this);
    }

    static ModifyMemberInfoResFactory *CreateFactory() {
        return ModifyMemberInfoResFactory::New_ModifyMemberInfoResFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::ModifyMemberInfoRes();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::ModifyMemberInfoRes(*dynamic_cast<const ::CRYSTAL_NET::service::ModifyMemberInfoRes *>(coder));
    }

};


class UserLibraryInfoNtyFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, UserLibraryInfoNtyFactory);
public:

    virtual void Release() override {
        UserLibraryInfoNtyFactory::Delete_UserLibraryInfoNtyFactory(this);
    }

    static UserLibraryInfoNtyFactory *CreateFactory() {
        return UserLibraryInfoNtyFactory::New_UserLibraryInfoNtyFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::UserLibraryInfoNty();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::UserLibraryInfoNty(*dynamic_cast<const ::CRYSTAL_NET::service::UserLibraryInfoNty *>(coder));
    }

};


class GetLibraryMemberSimpleInfoReqFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, GetLibraryMemberSimpleInfoReqFactory);
public:

    virtual void Release() override {
        GetLibraryMemberSimpleInfoReqFactory::Delete_GetLibraryMemberSimpleInfoReqFactory(this);
    }

    static GetLibraryMemberSimpleInfoReqFactory *CreateFactory() {
        return GetLibraryMemberSimpleInfoReqFactory::New_GetLibraryMemberSimpleInfoReqFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::GetLibraryMemberSimpleInfoReq();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::GetLibraryMemberSimpleInfoReq(*dynamic_cast<const ::CRYSTAL_NET::service::GetLibraryMemberSimpleInfoReq *>(coder));
    }

};


class GetLibraryMemberSimpleInfoResFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, GetLibraryMemberSimpleInfoResFactory);
public:

    virtual void Release() override {
        GetLibraryMemberSimpleInfoResFactory::Delete_GetLibraryMemberSimpleInfoResFactory(this);
    }

    static GetLibraryMemberSimpleInfoResFactory *CreateFactory() {
        return GetLibraryMemberSimpleInfoResFactory::New_GetLibraryMemberSimpleInfoResFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::GetLibraryMemberSimpleInfoRes();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::GetLibraryMemberSimpleInfoRes(*dynamic_cast<const ::CRYSTAL_NET::service::GetLibraryMemberSimpleInfoRes *>(coder));
    }

};


class AddLibraryBookReqFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, AddLibraryBookReqFactory);
public:

    virtual void Release() override {
        AddLibraryBookReqFactory::Delete_AddLibraryBookReqFactory(this);
    }

    static AddLibraryBookReqFactory *CreateFactory() {
        return AddLibraryBookReqFactory::New_AddLibraryBookReqFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::AddLibraryBookReq();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::AddLibraryBookReq(*dynamic_cast<const ::CRYSTAL_NET::service::AddLibraryBookReq *>(coder));
    }

};


class AddLibraryBookResFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, AddLibraryBookResFactory);
public:

    virtual void Release() override {
        AddLibraryBookResFactory::Delete_AddLibraryBookResFactory(this);
    }

    static AddLibraryBookResFactory *CreateFactory() {
        return AddLibraryBookResFactory::New_AddLibraryBookResFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::AddLibraryBookRes();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::AddLibraryBookRes(*dynamic_cast<const ::CRYSTAL_NET::service::AddLibraryBookRes *>(coder));
    }

};


class AddLibraryBookCountReqFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, AddLibraryBookCountReqFactory);
public:

    virtual void Release() override {
        AddLibraryBookCountReqFactory::Delete_AddLibraryBookCountReqFactory(this);
    }

    static AddLibraryBookCountReqFactory *CreateFactory() {
        return AddLibraryBookCountReqFactory::New_AddLibraryBookCountReqFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::AddLibraryBookCountReq();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::AddLibraryBookCountReq(*dynamic_cast<const ::CRYSTAL_NET::service::AddLibraryBookCountReq *>(coder));
    }

};


class AddLibraryBookCountResFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, AddLibraryBookCountResFactory);
public:

    virtual void Release() override {
        AddLibraryBookCountResFactory::Delete_AddLibraryBookCountResFactory(this);
    }

    static AddLibraryBookCountResFactory *CreateFactory() {
        return AddLibraryBookCountResFactory::New_AddLibraryBookCountResFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::AddLibraryBookCountRes();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::AddLibraryBookCountRes(*dynamic_cast<const ::CRYSTAL_NET::service::AddLibraryBookCountRes *>(coder));
    }

};


class GetBookListReqFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, GetBookListReqFactory);
public:

    virtual void Release() override {
        GetBookListReqFactory::Delete_GetBookListReqFactory(this);
    }

    static GetBookListReqFactory *CreateFactory() {
        return GetBookListReqFactory::New_GetBookListReqFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::GetBookListReq();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::GetBookListReq(*dynamic_cast<const ::CRYSTAL_NET::service::GetBookListReq *>(coder));
    }

};


class BookListNtyFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, BookListNtyFactory);
public:

    virtual void Release() override {
        BookListNtyFactory::Delete_BookListNtyFactory(this);
    }

    static BookListNtyFactory *CreateFactory() {
        return BookListNtyFactory::New_BookListNtyFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::BookListNty();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::BookListNty(*dynamic_cast<const ::CRYSTAL_NET::service::BookListNty *>(coder));
    }

};


class BooksChangeNtyFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, BooksChangeNtyFactory);
public:

    virtual void Release() override {
        BooksChangeNtyFactory::Delete_BooksChangeNtyFactory(this);
    }

    static BooksChangeNtyFactory *CreateFactory() {
        return BooksChangeNtyFactory::New_BooksChangeNtyFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::BooksChangeNty();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::BooksChangeNty(*dynamic_cast<const ::CRYSTAL_NET::service::BooksChangeNty *>(coder));
    }

};


class BookVariantInfoItemsNtyFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, BookVariantInfoItemsNtyFactory);
public:

    virtual void Release() override {
        BookVariantInfoItemsNtyFactory::Delete_BookVariantInfoItemsNtyFactory(this);
    }

    static BookVariantInfoItemsNtyFactory *CreateFactory() {
        return BookVariantInfoItemsNtyFactory::New_BookVariantInfoItemsNtyFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::BookVariantInfoItemsNty();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::BookVariantInfoItemsNty(*dynamic_cast<const ::CRYSTAL_NET::service::BookVariantInfoItemsNty *>(coder));
    }

};


class GetBookListResFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, GetBookListResFactory);
public:

    virtual void Release() override {
        GetBookListResFactory::Delete_GetBookListResFactory(this);
    }

    static GetBookListResFactory *CreateFactory() {
        return GetBookListResFactory::New_GetBookListResFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::GetBookListRes();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::GetBookListRes(*dynamic_cast<const ::CRYSTAL_NET::service::GetBookListRes *>(coder));
    }

};


class GetBookInfoReqFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, GetBookInfoReqFactory);
public:

    virtual void Release() override {
        GetBookInfoReqFactory::Delete_GetBookInfoReqFactory(this);
    }

    static GetBookInfoReqFactory *CreateFactory() {
        return GetBookInfoReqFactory::New_GetBookInfoReqFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::GetBookInfoReq();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::GetBookInfoReq(*dynamic_cast<const ::CRYSTAL_NET::service::GetBookInfoReq *>(coder));
    }

};


class GetBookInfoResFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, GetBookInfoResFactory);
public:

    virtual void Release() override {
        GetBookInfoResFactory::Delete_GetBookInfoResFactory(this);
    }

    static GetBookInfoResFactory *CreateFactory() {
        return GetBookInfoResFactory::New_GetBookInfoResFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::GetBookInfoRes();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::GetBookInfoRes(*dynamic_cast<const ::CRYSTAL_NET::service::GetBookInfoRes *>(coder));
    }

};


class GetBookByBookNameReqFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, GetBookByBookNameReqFactory);
public:

    virtual void Release() override {
        GetBookByBookNameReqFactory::Delete_GetBookByBookNameReqFactory(this);
    }

    static GetBookByBookNameReqFactory *CreateFactory() {
        return GetBookByBookNameReqFactory::New_GetBookByBookNameReqFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::GetBookByBookNameReq();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::GetBookByBookNameReq(*dynamic_cast<const ::CRYSTAL_NET::service::GetBookByBookNameReq *>(coder));
    }

};


class GetBookByBookNameResFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, GetBookByBookNameResFactory);
public:

    virtual void Release() override {
        GetBookByBookNameResFactory::Delete_GetBookByBookNameResFactory(this);
    }

    static GetBookByBookNameResFactory *CreateFactory() {
        return GetBookByBookNameResFactory::New_GetBookByBookNameResFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::GetBookByBookNameRes();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::GetBookByBookNameRes(*dynamic_cast<const ::CRYSTAL_NET::service::GetBookByBookNameRes *>(coder));
    }

};


class BorrowBookReqFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, BorrowBookReqFactory);
public:

    virtual void Release() override {
        BorrowBookReqFactory::Delete_BorrowBookReqFactory(this);
    }

    static BorrowBookReqFactory *CreateFactory() {
        return BorrowBookReqFactory::New_BorrowBookReqFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::BorrowBookReq();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::BorrowBookReq(*dynamic_cast<const ::CRYSTAL_NET::service::BorrowBookReq *>(coder));
    }

};


class BorrowBookResFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, BorrowBookResFactory);
public:

    virtual void Release() override {
        BorrowBookResFactory::Delete_BorrowBookResFactory(this);
    }

    static BorrowBookResFactory *CreateFactory() {
        return BorrowBookResFactory::New_BorrowBookResFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::BorrowBookRes();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::BorrowBookRes(*dynamic_cast<const ::CRYSTAL_NET::service::BorrowBookRes *>(coder));
    }

};

#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_library_2eproto
