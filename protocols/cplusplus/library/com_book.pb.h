// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com_book.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_com_5fbook_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_com_5fbook_2eproto

// KERNEL_INCLUDED
#include <kernel/kernel.h>
#include <service_common/ServiceCommon.h>
#include <google/protobuf/util/json_util.h>
#include <google/protobuf/text_format.h>

#ifdef GetMessage
 #undef GetMessage
#endif


#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_com_5fbook_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_com_5fbook_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_com_5fbook_2eproto;
namespace CRYSTAL_NET {
namespace service {
class BookInfo;
struct BookInfoDefaultTypeInternal;
extern BookInfoDefaultTypeInternal _BookInfo_default_instance_;
class BookType;
struct BookTypeDefaultTypeInternal;
extern BookTypeDefaultTypeInternal _BookType_default_instance_;
class BookVariantInfo;
struct BookVariantInfoDefaultTypeInternal;
extern BookVariantInfoDefaultTypeInternal _BookVariantInfo_default_instance_;
class BookVariantInfoItem;
struct BookVariantInfoItemDefaultTypeInternal;
extern BookVariantInfoItemDefaultTypeInternal _BookVariantInfoItem_default_instance_;
}  // namespace service
}  // namespace CRYSTAL_NET
PROTOBUF_NAMESPACE_OPEN
template<> ::CRYSTAL_NET::service::BookInfo* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::BookInfo>(Arena*);
template<> ::CRYSTAL_NET::service::BookType* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::BookType>(Arena*);
template<> ::CRYSTAL_NET::service::BookVariantInfo* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::BookVariantInfo>(Arena*);
template<> ::CRYSTAL_NET::service::BookVariantInfoItem* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::BookVariantInfoItem>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CRYSTAL_NET {
namespace service {

enum BookType_ENUMS : int {
  BookType_ENUMS_UNKNOWN = 0,
  BookType_ENUMS_BookType_ENUMS_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BookType_ENUMS_BookType_ENUMS_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BookType_ENUMS_IsValid(int value);
constexpr BookType_ENUMS BookType_ENUMS_ENUMS_MIN = BookType_ENUMS_UNKNOWN;
constexpr BookType_ENUMS BookType_ENUMS_ENUMS_MAX = BookType_ENUMS_UNKNOWN;
constexpr int BookType_ENUMS_ENUMS_ARRAYSIZE = BookType_ENUMS_ENUMS_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BookType_ENUMS_descriptor();
template<typename T>
inline const std::string& BookType_ENUMS_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BookType_ENUMS>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BookType_ENUMS_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BookType_ENUMS_descriptor(), enum_t_value);
}
inline bool BookType_ENUMS_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BookType_ENUMS* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BookType_ENUMS>(
    BookType_ENUMS_descriptor(), name, value);
}
// ===================================================================

// AnnotaionInfo[opcode(0), nolog(false), XorEncrypt(false), KeyBase64(false)]
class BookType final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.BookType) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message BookType failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message BookType failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message BookType failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message BookType failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message BookType failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message BookType failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline BookType() : BookType(nullptr) {}
  explicit PROTOBUF_CONSTEXPR BookType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BookType(const BookType& from);
  BookType(BookType&& from) noexcept
    : BookType() {
    *this = ::std::move(from);
  }

  inline BookType& operator=(const BookType& from) {
    CopyFrom(from);
    return *this;
  }
  inline BookType& operator=(BookType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BookType& default_instance() {
    return *internal_default_instance();
  }
  static inline const BookType* internal_default_instance() {
    return reinterpret_cast<const BookType*>(
               &_BookType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BookType& a, BookType& b) {
    a.Swap(&b);
  }
  inline void Swap(BookType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BookType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BookType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BookType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const BookType& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const BookType& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.BookType";
  }
  protected:
  explicit BookType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BookType_ENUMS ENUMS;
  static constexpr ENUMS UNKNOWN =
    BookType_ENUMS_UNKNOWN;
  static inline bool ENUMS_IsValid(int value) {
    return BookType_ENUMS_IsValid(value);
  }
  static constexpr ENUMS ENUMS_MIN =
    BookType_ENUMS_ENUMS_MIN;
  static constexpr ENUMS ENUMS_MAX =
    BookType_ENUMS_ENUMS_MAX;
  static constexpr int ENUMS_ARRAYSIZE =
    BookType_ENUMS_ENUMS_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ENUMS_descriptor() {
    return BookType_ENUMS_descriptor();
  }
  template<typename T>
  static inline const std::string& ENUMS_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ENUMS>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ENUMS_Name.");
    return BookType_ENUMS_Name(enum_t_value);
  }
  static inline bool ENUMS_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ENUMS* value) {
    return BookType_ENUMS_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.BookType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_com_5fbook_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(0), nolog(false), XorEncrypt(false), KeyBase64(false)]
class BookInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.BookInfo) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message BookInfo failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message BookInfo failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message BookInfo failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message BookInfo failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message BookInfo failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message BookInfo failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline BookInfo() : BookInfo(nullptr) {}
  ~BookInfo() override;
  explicit PROTOBUF_CONSTEXPR BookInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BookInfo(const BookInfo& from);
  BookInfo(BookInfo&& from) noexcept
    : BookInfo() {
    *this = ::std::move(from);
  }

  inline BookInfo& operator=(const BookInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BookInfo& operator=(BookInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BookInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BookInfo* internal_default_instance() {
    return reinterpret_cast<const BookInfo*>(
               &_BookInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BookInfo& a, BookInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BookInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BookInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BookInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BookInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BookInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BookInfo& from) {
    BookInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BookInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.BookInfo";
  }
  protected:
  explicit BookInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyWordsFieldNumber = 9,
    kSnapshotFieldNumber = 11,
    kBookNameFieldNumber = 3,
    kIsbnCodeFieldNumber = 4,
    kBookCoverImageFieldNumber = 5,
    kContentFieldNumber = 10,
    kCoverImagePathFieldNumber = 12,
    kVariantInfoFieldNumber = 7,
    kIdFieldNumber = 1,
    kBookTypeFieldNumber = 2,
    kIsOnShelvesFieldNumber = 6,
    kBorrowedCountFieldNumber = 8,
  };
  // repeated string KeyWords = 9;
  int keywords_size() const;
  private:
  int _internal_keywords_size() const;
  public:
  void clear_keywords();
  const std::string& keywords(int index) const;
  std::string* mutable_keywords(int index);
  void set_keywords(int index, const std::string& value);
  void set_keywords(int index, std::string&& value);
  void set_keywords(int index, const char* value);
  void set_keywords(int index, const char* value, size_t size);
  std::string* add_keywords();
  void add_keywords(const std::string& value);
  void add_keywords(std::string&& value);
  void add_keywords(const char* value);
  void add_keywords(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& keywords() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_keywords();
  private:
  const std::string& _internal_keywords(int index) const;
  std::string* _internal_add_keywords();
  public:

  // repeated string Snapshot = 11;
  int snapshot_size() const;
  private:
  int _internal_snapshot_size() const;
  public:
  void clear_snapshot();
  const std::string& snapshot(int index) const;
  std::string* mutable_snapshot(int index);
  void set_snapshot(int index, const std::string& value);
  void set_snapshot(int index, std::string&& value);
  void set_snapshot(int index, const char* value);
  void set_snapshot(int index, const char* value, size_t size);
  std::string* add_snapshot();
  void add_snapshot(const std::string& value);
  void add_snapshot(std::string&& value);
  void add_snapshot(const char* value);
  void add_snapshot(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& snapshot() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_snapshot();
  private:
  const std::string& _internal_snapshot(int index) const;
  std::string* _internal_add_snapshot();
  public:

  // string BookName = 3;
  void clear_bookname();
  const std::string& bookname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bookname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bookname();
  PROTOBUF_NODISCARD std::string* release_bookname();
  void set_allocated_bookname(std::string* bookname);
  private:
  const std::string& _internal_bookname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bookname(const std::string& value);
  std::string* _internal_mutable_bookname();
  public:

  // string IsbnCode = 4;
  void clear_isbncode();
  const std::string& isbncode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_isbncode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_isbncode();
  PROTOBUF_NODISCARD std::string* release_isbncode();
  void set_allocated_isbncode(std::string* isbncode);
  private:
  const std::string& _internal_isbncode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_isbncode(const std::string& value);
  std::string* _internal_mutable_isbncode();
  public:

  // string BookCoverImage = 5;
  void clear_bookcoverimage();
  const std::string& bookcoverimage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bookcoverimage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bookcoverimage();
  PROTOBUF_NODISCARD std::string* release_bookcoverimage();
  void set_allocated_bookcoverimage(std::string* bookcoverimage);
  private:
  const std::string& _internal_bookcoverimage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bookcoverimage(const std::string& value);
  std::string* _internal_mutable_bookcoverimage();
  public:

  // string Content = 10;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string CoverImagePath = 12;
  void clear_coverimagepath();
  const std::string& coverimagepath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_coverimagepath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_coverimagepath();
  PROTOBUF_NODISCARD std::string* release_coverimagepath();
  void set_allocated_coverimagepath(std::string* coverimagepath);
  private:
  const std::string& _internal_coverimagepath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_coverimagepath(const std::string& value);
  std::string* _internal_mutable_coverimagepath();
  public:

  // .CRYSTAL_NET.service.BookVariantInfo VariantInfo = 7;
  bool has_variantinfo() const;
  private:
  bool _internal_has_variantinfo() const;
  public:
  void clear_variantinfo();
  const ::CRYSTAL_NET::service::BookVariantInfo& variantinfo() const;
  PROTOBUF_NODISCARD ::CRYSTAL_NET::service::BookVariantInfo* release_variantinfo();
  ::CRYSTAL_NET::service::BookVariantInfo* mutable_variantinfo();
  void set_allocated_variantinfo(::CRYSTAL_NET::service::BookVariantInfo* variantinfo);
  private:
  const ::CRYSTAL_NET::service::BookVariantInfo& _internal_variantinfo() const;
  ::CRYSTAL_NET::service::BookVariantInfo* _internal_mutable_variantinfo();
  public:
  void unsafe_arena_set_allocated_variantinfo(
      ::CRYSTAL_NET::service::BookVariantInfo* variantinfo);
  ::CRYSTAL_NET::service::BookVariantInfo* unsafe_arena_release_variantinfo();

  // uint64 Id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // sint32 BookType = 2;
  void clear_booktype();
  int32_t booktype() const;
  void set_booktype(int32_t value);
  private:
  int32_t _internal_booktype() const;
  void _internal_set_booktype(int32_t value);
  public:

  // sint32 IsOnShelves = 6;
  void clear_isonshelves();
  int32_t isonshelves() const;
  void set_isonshelves(int32_t value);
  private:
  int32_t _internal_isonshelves() const;
  void _internal_set_isonshelves(int32_t value);
  public:

  // uint64 BorrowedCount = 8;
  void clear_borrowedcount();
  uint64_t borrowedcount() const;
  void set_borrowedcount(uint64_t value);
  private:
  uint64_t _internal_borrowedcount() const;
  void _internal_set_borrowedcount(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.BookInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> keywords_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> snapshot_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bookname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr isbncode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bookcoverimage_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr coverimagepath_;
    ::CRYSTAL_NET::service::BookVariantInfo* variantinfo_;
    uint64_t id_;
    int32_t booktype_;
    int32_t isonshelves_;
    uint64_t borrowedcount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_com_5fbook_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(0), nolog(false), XorEncrypt(false), KeyBase64(false)]
class BookVariantInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.BookVariantInfo) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message BookVariantInfo failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message BookVariantInfo failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message BookVariantInfo failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message BookVariantInfo failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message BookVariantInfo failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message BookVariantInfo failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline BookVariantInfo() : BookVariantInfo(nullptr) {}
  ~BookVariantInfo() override;
  explicit PROTOBUF_CONSTEXPR BookVariantInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BookVariantInfo(const BookVariantInfo& from);
  BookVariantInfo(BookVariantInfo&& from) noexcept
    : BookVariantInfo() {
    *this = ::std::move(from);
  }

  inline BookVariantInfo& operator=(const BookVariantInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BookVariantInfo& operator=(BookVariantInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BookVariantInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BookVariantInfo* internal_default_instance() {
    return reinterpret_cast<const BookVariantInfo*>(
               &_BookVariantInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BookVariantInfo& a, BookVariantInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BookVariantInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BookVariantInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BookVariantInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BookVariantInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BookVariantInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BookVariantInfo& from) {
    BookVariantInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BookVariantInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.BookVariantInfo";
  }
  protected:
  explicit BookVariantInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 1,
    kPriceFieldNumber = 2,
  };
  // sint64 Count = 1;
  void clear_count();
  int64_t count() const;
  void set_count(int64_t value);
  private:
  int64_t _internal_count() const;
  void _internal_set_count(int64_t value);
  public:

  // sint64 Price = 2;
  void clear_price();
  int64_t price() const;
  void set_price(int64_t value);
  private:
  int64_t _internal_price() const;
  void _internal_set_price(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.BookVariantInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t count_;
    int64_t price_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_com_5fbook_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(0), nolog(false), XorEncrypt(false), KeyBase64(false)]
class BookVariantInfoItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.BookVariantInfoItem) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message BookVariantInfoItem failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message BookVariantInfoItem failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message BookVariantInfoItem failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message BookVariantInfoItem failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message BookVariantInfoItem failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message BookVariantInfoItem failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline BookVariantInfoItem() : BookVariantInfoItem(nullptr) {}
  ~BookVariantInfoItem() override;
  explicit PROTOBUF_CONSTEXPR BookVariantInfoItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BookVariantInfoItem(const BookVariantInfoItem& from);
  BookVariantInfoItem(BookVariantInfoItem&& from) noexcept
    : BookVariantInfoItem() {
    *this = ::std::move(from);
  }

  inline BookVariantInfoItem& operator=(const BookVariantInfoItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline BookVariantInfoItem& operator=(BookVariantInfoItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BookVariantInfoItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const BookVariantInfoItem* internal_default_instance() {
    return reinterpret_cast<const BookVariantInfoItem*>(
               &_BookVariantInfoItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BookVariantInfoItem& a, BookVariantInfoItem& b) {
    a.Swap(&b);
  }
  inline void Swap(BookVariantInfoItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BookVariantInfoItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BookVariantInfoItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BookVariantInfoItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BookVariantInfoItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BookVariantInfoItem& from) {
    BookVariantInfoItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BookVariantInfoItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.BookVariantInfoItem";
  }
  protected:
  explicit BookVariantInfoItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBookVariantInfoFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // .CRYSTAL_NET.service.BookVariantInfo BookVariantInfo = 2;
  bool has_bookvariantinfo() const;
  private:
  bool _internal_has_bookvariantinfo() const;
  public:
  void clear_bookvariantinfo();
  const ::CRYSTAL_NET::service::BookVariantInfo& bookvariantinfo() const;
  PROTOBUF_NODISCARD ::CRYSTAL_NET::service::BookVariantInfo* release_bookvariantinfo();
  ::CRYSTAL_NET::service::BookVariantInfo* mutable_bookvariantinfo();
  void set_allocated_bookvariantinfo(::CRYSTAL_NET::service::BookVariantInfo* bookvariantinfo);
  private:
  const ::CRYSTAL_NET::service::BookVariantInfo& _internal_bookvariantinfo() const;
  ::CRYSTAL_NET::service::BookVariantInfo* _internal_mutable_bookvariantinfo();
  public:
  void unsafe_arena_set_allocated_bookvariantinfo(
      ::CRYSTAL_NET::service::BookVariantInfo* bookvariantinfo);
  ::CRYSTAL_NET::service::BookVariantInfo* unsafe_arena_release_bookvariantinfo();

  // uint64 Id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.BookVariantInfoItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::CRYSTAL_NET::service::BookVariantInfo* bookvariantinfo_;
    uint64_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_com_5fbook_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BookType

// -------------------------------------------------------------------

// BookInfo

// uint64 Id = 1;
inline void BookInfo::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t BookInfo::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t BookInfo::id() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.BookInfo.Id)
  return _internal_id();
}
inline void BookInfo::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void BookInfo::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.BookInfo.Id)
}

// sint32 BookType = 2;
inline void BookInfo::clear_booktype() {
  _impl_.booktype_ = 0;
}
inline int32_t BookInfo::_internal_booktype() const {
  return _impl_.booktype_;
}
inline int32_t BookInfo::booktype() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.BookInfo.BookType)
  return _internal_booktype();
}
inline void BookInfo::_internal_set_booktype(int32_t value) {
  
  _impl_.booktype_ = value;
}
inline void BookInfo::set_booktype(int32_t value) {
  _internal_set_booktype(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.BookInfo.BookType)
}

// string BookName = 3;
inline void BookInfo::clear_bookname() {
  _impl_.bookname_.ClearToEmpty();
}
inline const std::string& BookInfo::bookname() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.BookInfo.BookName)
  return _internal_bookname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BookInfo::set_bookname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bookname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.BookInfo.BookName)
}
inline std::string* BookInfo::mutable_bookname() {
  std::string* _s = _internal_mutable_bookname();
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.BookInfo.BookName)
  return _s;
}
inline const std::string& BookInfo::_internal_bookname() const {
  return _impl_.bookname_.Get();
}
inline void BookInfo::_internal_set_bookname(const std::string& value) {
  
  _impl_.bookname_.Set(value, GetArenaForAllocation());
}
inline std::string* BookInfo::_internal_mutable_bookname() {
  
  return _impl_.bookname_.Mutable(GetArenaForAllocation());
}
inline std::string* BookInfo::release_bookname() {
  // @@protoc_insertion_point(field_release:CRYSTAL_NET.service.BookInfo.BookName)
  return _impl_.bookname_.Release();
}
inline void BookInfo::set_allocated_bookname(std::string* bookname) {
  if (bookname != nullptr) {
    
  } else {
    
  }
  _impl_.bookname_.SetAllocated(bookname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bookname_.IsDefault()) {
    _impl_.bookname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRYSTAL_NET.service.BookInfo.BookName)
}

// string IsbnCode = 4;
inline void BookInfo::clear_isbncode() {
  _impl_.isbncode_.ClearToEmpty();
}
inline const std::string& BookInfo::isbncode() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.BookInfo.IsbnCode)
  return _internal_isbncode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BookInfo::set_isbncode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.isbncode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.BookInfo.IsbnCode)
}
inline std::string* BookInfo::mutable_isbncode() {
  std::string* _s = _internal_mutable_isbncode();
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.BookInfo.IsbnCode)
  return _s;
}
inline const std::string& BookInfo::_internal_isbncode() const {
  return _impl_.isbncode_.Get();
}
inline void BookInfo::_internal_set_isbncode(const std::string& value) {
  
  _impl_.isbncode_.Set(value, GetArenaForAllocation());
}
inline std::string* BookInfo::_internal_mutable_isbncode() {
  
  return _impl_.isbncode_.Mutable(GetArenaForAllocation());
}
inline std::string* BookInfo::release_isbncode() {
  // @@protoc_insertion_point(field_release:CRYSTAL_NET.service.BookInfo.IsbnCode)
  return _impl_.isbncode_.Release();
}
inline void BookInfo::set_allocated_isbncode(std::string* isbncode) {
  if (isbncode != nullptr) {
    
  } else {
    
  }
  _impl_.isbncode_.SetAllocated(isbncode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.isbncode_.IsDefault()) {
    _impl_.isbncode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRYSTAL_NET.service.BookInfo.IsbnCode)
}

// string BookCoverImage = 5;
inline void BookInfo::clear_bookcoverimage() {
  _impl_.bookcoverimage_.ClearToEmpty();
}
inline const std::string& BookInfo::bookcoverimage() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.BookInfo.BookCoverImage)
  return _internal_bookcoverimage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BookInfo::set_bookcoverimage(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bookcoverimage_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.BookInfo.BookCoverImage)
}
inline std::string* BookInfo::mutable_bookcoverimage() {
  std::string* _s = _internal_mutable_bookcoverimage();
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.BookInfo.BookCoverImage)
  return _s;
}
inline const std::string& BookInfo::_internal_bookcoverimage() const {
  return _impl_.bookcoverimage_.Get();
}
inline void BookInfo::_internal_set_bookcoverimage(const std::string& value) {
  
  _impl_.bookcoverimage_.Set(value, GetArenaForAllocation());
}
inline std::string* BookInfo::_internal_mutable_bookcoverimage() {
  
  return _impl_.bookcoverimage_.Mutable(GetArenaForAllocation());
}
inline std::string* BookInfo::release_bookcoverimage() {
  // @@protoc_insertion_point(field_release:CRYSTAL_NET.service.BookInfo.BookCoverImage)
  return _impl_.bookcoverimage_.Release();
}
inline void BookInfo::set_allocated_bookcoverimage(std::string* bookcoverimage) {
  if (bookcoverimage != nullptr) {
    
  } else {
    
  }
  _impl_.bookcoverimage_.SetAllocated(bookcoverimage, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bookcoverimage_.IsDefault()) {
    _impl_.bookcoverimage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRYSTAL_NET.service.BookInfo.BookCoverImage)
}

// sint32 IsOnShelves = 6;
inline void BookInfo::clear_isonshelves() {
  _impl_.isonshelves_ = 0;
}
inline int32_t BookInfo::_internal_isonshelves() const {
  return _impl_.isonshelves_;
}
inline int32_t BookInfo::isonshelves() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.BookInfo.IsOnShelves)
  return _internal_isonshelves();
}
inline void BookInfo::_internal_set_isonshelves(int32_t value) {
  
  _impl_.isonshelves_ = value;
}
inline void BookInfo::set_isonshelves(int32_t value) {
  _internal_set_isonshelves(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.BookInfo.IsOnShelves)
}

// .CRYSTAL_NET.service.BookVariantInfo VariantInfo = 7;
inline bool BookInfo::_internal_has_variantinfo() const {
  return this != internal_default_instance() && _impl_.variantinfo_ != nullptr;
}
inline bool BookInfo::has_variantinfo() const {
  return _internal_has_variantinfo();
}
inline void BookInfo::clear_variantinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.variantinfo_ != nullptr) {
    delete _impl_.variantinfo_;
  }
  _impl_.variantinfo_ = nullptr;
}
inline const ::CRYSTAL_NET::service::BookVariantInfo& BookInfo::_internal_variantinfo() const {
  const ::CRYSTAL_NET::service::BookVariantInfo* p = _impl_.variantinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::CRYSTAL_NET::service::BookVariantInfo&>(
      ::CRYSTAL_NET::service::_BookVariantInfo_default_instance_);
}
inline const ::CRYSTAL_NET::service::BookVariantInfo& BookInfo::variantinfo() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.BookInfo.VariantInfo)
  return _internal_variantinfo();
}
inline void BookInfo::unsafe_arena_set_allocated_variantinfo(
    ::CRYSTAL_NET::service::BookVariantInfo* variantinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.variantinfo_);
  }
  _impl_.variantinfo_ = variantinfo;
  if (variantinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CRYSTAL_NET.service.BookInfo.VariantInfo)
}
inline ::CRYSTAL_NET::service::BookVariantInfo* BookInfo::release_variantinfo() {
  
  ::CRYSTAL_NET::service::BookVariantInfo* temp = _impl_.variantinfo_;
  _impl_.variantinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CRYSTAL_NET::service::BookVariantInfo* BookInfo::unsafe_arena_release_variantinfo() {
  // @@protoc_insertion_point(field_release:CRYSTAL_NET.service.BookInfo.VariantInfo)
  
  ::CRYSTAL_NET::service::BookVariantInfo* temp = _impl_.variantinfo_;
  _impl_.variantinfo_ = nullptr;
  return temp;
}
inline ::CRYSTAL_NET::service::BookVariantInfo* BookInfo::_internal_mutable_variantinfo() {
  
  if (_impl_.variantinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::CRYSTAL_NET::service::BookVariantInfo>(GetArenaForAllocation());
    _impl_.variantinfo_ = p;
  }
  return _impl_.variantinfo_;
}
inline ::CRYSTAL_NET::service::BookVariantInfo* BookInfo::mutable_variantinfo() {
  ::CRYSTAL_NET::service::BookVariantInfo* _msg = _internal_mutable_variantinfo();
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.BookInfo.VariantInfo)
  return _msg;
}
inline void BookInfo::set_allocated_variantinfo(::CRYSTAL_NET::service::BookVariantInfo* variantinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.variantinfo_;
  }
  if (variantinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(variantinfo);
    if (message_arena != submessage_arena) {
      variantinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, variantinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.variantinfo_ = variantinfo;
  // @@protoc_insertion_point(field_set_allocated:CRYSTAL_NET.service.BookInfo.VariantInfo)
}

// uint64 BorrowedCount = 8;
inline void BookInfo::clear_borrowedcount() {
  _impl_.borrowedcount_ = uint64_t{0u};
}
inline uint64_t BookInfo::_internal_borrowedcount() const {
  return _impl_.borrowedcount_;
}
inline uint64_t BookInfo::borrowedcount() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.BookInfo.BorrowedCount)
  return _internal_borrowedcount();
}
inline void BookInfo::_internal_set_borrowedcount(uint64_t value) {
  
  _impl_.borrowedcount_ = value;
}
inline void BookInfo::set_borrowedcount(uint64_t value) {
  _internal_set_borrowedcount(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.BookInfo.BorrowedCount)
}

// repeated string KeyWords = 9;
inline int BookInfo::_internal_keywords_size() const {
  return _impl_.keywords_.size();
}
inline int BookInfo::keywords_size() const {
  return _internal_keywords_size();
}
inline void BookInfo::clear_keywords() {
  _impl_.keywords_.Clear();
}
inline std::string* BookInfo::add_keywords() {
  std::string* _s = _internal_add_keywords();
  // @@protoc_insertion_point(field_add_mutable:CRYSTAL_NET.service.BookInfo.KeyWords)
  return _s;
}
inline const std::string& BookInfo::_internal_keywords(int index) const {
  return _impl_.keywords_.Get(index);
}
inline const std::string& BookInfo::keywords(int index) const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.BookInfo.KeyWords)
  return _internal_keywords(index);
}
inline std::string* BookInfo::mutable_keywords(int index) {
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.BookInfo.KeyWords)
  return _impl_.keywords_.Mutable(index);
}
inline void BookInfo::set_keywords(int index, const std::string& value) {
  _impl_.keywords_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.BookInfo.KeyWords)
}
inline void BookInfo::set_keywords(int index, std::string&& value) {
  _impl_.keywords_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.BookInfo.KeyWords)
}
inline void BookInfo::set_keywords(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.keywords_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CRYSTAL_NET.service.BookInfo.KeyWords)
}
inline void BookInfo::set_keywords(int index, const char* value, size_t size) {
  _impl_.keywords_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CRYSTAL_NET.service.BookInfo.KeyWords)
}
inline std::string* BookInfo::_internal_add_keywords() {
  return _impl_.keywords_.Add();
}
inline void BookInfo::add_keywords(const std::string& value) {
  _impl_.keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CRYSTAL_NET.service.BookInfo.KeyWords)
}
inline void BookInfo::add_keywords(std::string&& value) {
  _impl_.keywords_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CRYSTAL_NET.service.BookInfo.KeyWords)
}
inline void BookInfo::add_keywords(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CRYSTAL_NET.service.BookInfo.KeyWords)
}
inline void BookInfo::add_keywords(const char* value, size_t size) {
  _impl_.keywords_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CRYSTAL_NET.service.BookInfo.KeyWords)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BookInfo::keywords() const {
  // @@protoc_insertion_point(field_list:CRYSTAL_NET.service.BookInfo.KeyWords)
  return _impl_.keywords_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BookInfo::mutable_keywords() {
  // @@protoc_insertion_point(field_mutable_list:CRYSTAL_NET.service.BookInfo.KeyWords)
  return &_impl_.keywords_;
}

// string Content = 10;
inline void BookInfo::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& BookInfo::content() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.BookInfo.Content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BookInfo::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.BookInfo.Content)
}
inline std::string* BookInfo::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.BookInfo.Content)
  return _s;
}
inline const std::string& BookInfo::_internal_content() const {
  return _impl_.content_.Get();
}
inline void BookInfo::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* BookInfo::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* BookInfo::release_content() {
  // @@protoc_insertion_point(field_release:CRYSTAL_NET.service.BookInfo.Content)
  return _impl_.content_.Release();
}
inline void BookInfo::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRYSTAL_NET.service.BookInfo.Content)
}

// repeated string Snapshot = 11;
inline int BookInfo::_internal_snapshot_size() const {
  return _impl_.snapshot_.size();
}
inline int BookInfo::snapshot_size() const {
  return _internal_snapshot_size();
}
inline void BookInfo::clear_snapshot() {
  _impl_.snapshot_.Clear();
}
inline std::string* BookInfo::add_snapshot() {
  std::string* _s = _internal_add_snapshot();
  // @@protoc_insertion_point(field_add_mutable:CRYSTAL_NET.service.BookInfo.Snapshot)
  return _s;
}
inline const std::string& BookInfo::_internal_snapshot(int index) const {
  return _impl_.snapshot_.Get(index);
}
inline const std::string& BookInfo::snapshot(int index) const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.BookInfo.Snapshot)
  return _internal_snapshot(index);
}
inline std::string* BookInfo::mutable_snapshot(int index) {
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.BookInfo.Snapshot)
  return _impl_.snapshot_.Mutable(index);
}
inline void BookInfo::set_snapshot(int index, const std::string& value) {
  _impl_.snapshot_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.BookInfo.Snapshot)
}
inline void BookInfo::set_snapshot(int index, std::string&& value) {
  _impl_.snapshot_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.BookInfo.Snapshot)
}
inline void BookInfo::set_snapshot(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.snapshot_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CRYSTAL_NET.service.BookInfo.Snapshot)
}
inline void BookInfo::set_snapshot(int index, const char* value, size_t size) {
  _impl_.snapshot_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CRYSTAL_NET.service.BookInfo.Snapshot)
}
inline std::string* BookInfo::_internal_add_snapshot() {
  return _impl_.snapshot_.Add();
}
inline void BookInfo::add_snapshot(const std::string& value) {
  _impl_.snapshot_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CRYSTAL_NET.service.BookInfo.Snapshot)
}
inline void BookInfo::add_snapshot(std::string&& value) {
  _impl_.snapshot_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CRYSTAL_NET.service.BookInfo.Snapshot)
}
inline void BookInfo::add_snapshot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.snapshot_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CRYSTAL_NET.service.BookInfo.Snapshot)
}
inline void BookInfo::add_snapshot(const char* value, size_t size) {
  _impl_.snapshot_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CRYSTAL_NET.service.BookInfo.Snapshot)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BookInfo::snapshot() const {
  // @@protoc_insertion_point(field_list:CRYSTAL_NET.service.BookInfo.Snapshot)
  return _impl_.snapshot_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BookInfo::mutable_snapshot() {
  // @@protoc_insertion_point(field_mutable_list:CRYSTAL_NET.service.BookInfo.Snapshot)
  return &_impl_.snapshot_;
}

// string CoverImagePath = 12;
inline void BookInfo::clear_coverimagepath() {
  _impl_.coverimagepath_.ClearToEmpty();
}
inline const std::string& BookInfo::coverimagepath() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.BookInfo.CoverImagePath)
  return _internal_coverimagepath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BookInfo::set_coverimagepath(ArgT0&& arg0, ArgT... args) {
 
 _impl_.coverimagepath_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.BookInfo.CoverImagePath)
}
inline std::string* BookInfo::mutable_coverimagepath() {
  std::string* _s = _internal_mutable_coverimagepath();
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.BookInfo.CoverImagePath)
  return _s;
}
inline const std::string& BookInfo::_internal_coverimagepath() const {
  return _impl_.coverimagepath_.Get();
}
inline void BookInfo::_internal_set_coverimagepath(const std::string& value) {
  
  _impl_.coverimagepath_.Set(value, GetArenaForAllocation());
}
inline std::string* BookInfo::_internal_mutable_coverimagepath() {
  
  return _impl_.coverimagepath_.Mutable(GetArenaForAllocation());
}
inline std::string* BookInfo::release_coverimagepath() {
  // @@protoc_insertion_point(field_release:CRYSTAL_NET.service.BookInfo.CoverImagePath)
  return _impl_.coverimagepath_.Release();
}
inline void BookInfo::set_allocated_coverimagepath(std::string* coverimagepath) {
  if (coverimagepath != nullptr) {
    
  } else {
    
  }
  _impl_.coverimagepath_.SetAllocated(coverimagepath, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.coverimagepath_.IsDefault()) {
    _impl_.coverimagepath_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRYSTAL_NET.service.BookInfo.CoverImagePath)
}

// -------------------------------------------------------------------

// BookVariantInfo

// sint64 Count = 1;
inline void BookVariantInfo::clear_count() {
  _impl_.count_ = int64_t{0};
}
inline int64_t BookVariantInfo::_internal_count() const {
  return _impl_.count_;
}
inline int64_t BookVariantInfo::count() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.BookVariantInfo.Count)
  return _internal_count();
}
inline void BookVariantInfo::_internal_set_count(int64_t value) {
  
  _impl_.count_ = value;
}
inline void BookVariantInfo::set_count(int64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.BookVariantInfo.Count)
}

// sint64 Price = 2;
inline void BookVariantInfo::clear_price() {
  _impl_.price_ = int64_t{0};
}
inline int64_t BookVariantInfo::_internal_price() const {
  return _impl_.price_;
}
inline int64_t BookVariantInfo::price() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.BookVariantInfo.Price)
  return _internal_price();
}
inline void BookVariantInfo::_internal_set_price(int64_t value) {
  
  _impl_.price_ = value;
}
inline void BookVariantInfo::set_price(int64_t value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.BookVariantInfo.Price)
}

// -------------------------------------------------------------------

// BookVariantInfoItem

// uint64 Id = 1;
inline void BookVariantInfoItem::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t BookVariantInfoItem::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t BookVariantInfoItem::id() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.BookVariantInfoItem.Id)
  return _internal_id();
}
inline void BookVariantInfoItem::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void BookVariantInfoItem::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.BookVariantInfoItem.Id)
}

// .CRYSTAL_NET.service.BookVariantInfo BookVariantInfo = 2;
inline bool BookVariantInfoItem::_internal_has_bookvariantinfo() const {
  return this != internal_default_instance() && _impl_.bookvariantinfo_ != nullptr;
}
inline bool BookVariantInfoItem::has_bookvariantinfo() const {
  return _internal_has_bookvariantinfo();
}
inline void BookVariantInfoItem::clear_bookvariantinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.bookvariantinfo_ != nullptr) {
    delete _impl_.bookvariantinfo_;
  }
  _impl_.bookvariantinfo_ = nullptr;
}
inline const ::CRYSTAL_NET::service::BookVariantInfo& BookVariantInfoItem::_internal_bookvariantinfo() const {
  const ::CRYSTAL_NET::service::BookVariantInfo* p = _impl_.bookvariantinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::CRYSTAL_NET::service::BookVariantInfo&>(
      ::CRYSTAL_NET::service::_BookVariantInfo_default_instance_);
}
inline const ::CRYSTAL_NET::service::BookVariantInfo& BookVariantInfoItem::bookvariantinfo() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.BookVariantInfoItem.BookVariantInfo)
  return _internal_bookvariantinfo();
}
inline void BookVariantInfoItem::unsafe_arena_set_allocated_bookvariantinfo(
    ::CRYSTAL_NET::service::BookVariantInfo* bookvariantinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bookvariantinfo_);
  }
  _impl_.bookvariantinfo_ = bookvariantinfo;
  if (bookvariantinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CRYSTAL_NET.service.BookVariantInfoItem.BookVariantInfo)
}
inline ::CRYSTAL_NET::service::BookVariantInfo* BookVariantInfoItem::release_bookvariantinfo() {
  
  ::CRYSTAL_NET::service::BookVariantInfo* temp = _impl_.bookvariantinfo_;
  _impl_.bookvariantinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CRYSTAL_NET::service::BookVariantInfo* BookVariantInfoItem::unsafe_arena_release_bookvariantinfo() {
  // @@protoc_insertion_point(field_release:CRYSTAL_NET.service.BookVariantInfoItem.BookVariantInfo)
  
  ::CRYSTAL_NET::service::BookVariantInfo* temp = _impl_.bookvariantinfo_;
  _impl_.bookvariantinfo_ = nullptr;
  return temp;
}
inline ::CRYSTAL_NET::service::BookVariantInfo* BookVariantInfoItem::_internal_mutable_bookvariantinfo() {
  
  if (_impl_.bookvariantinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::CRYSTAL_NET::service::BookVariantInfo>(GetArenaForAllocation());
    _impl_.bookvariantinfo_ = p;
  }
  return _impl_.bookvariantinfo_;
}
inline ::CRYSTAL_NET::service::BookVariantInfo* BookVariantInfoItem::mutable_bookvariantinfo() {
  ::CRYSTAL_NET::service::BookVariantInfo* _msg = _internal_mutable_bookvariantinfo();
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.BookVariantInfoItem.BookVariantInfo)
  return _msg;
}
inline void BookVariantInfoItem::set_allocated_bookvariantinfo(::CRYSTAL_NET::service::BookVariantInfo* bookvariantinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bookvariantinfo_;
  }
  if (bookvariantinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bookvariantinfo);
    if (message_arena != submessage_arena) {
      bookvariantinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bookvariantinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bookvariantinfo_ = bookvariantinfo;
  // @@protoc_insertion_point(field_set_allocated:CRYSTAL_NET.service.BookVariantInfoItem.BookVariantInfo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service
}  // namespace CRYSTAL_NET

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CRYSTAL_NET::service::BookType_ENUMS> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CRYSTAL_NET::service::BookType_ENUMS>() {
  return ::CRYSTAL_NET::service::BookType_ENUMS_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>

class BookTypeFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, BookTypeFactory);
public:

    virtual void Release() override {
        BookTypeFactory::Delete_BookTypeFactory(this);
    }

    static BookTypeFactory *CreateFactory() {
        return BookTypeFactory::New_BookTypeFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::BookType();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::BookType(*dynamic_cast<const ::CRYSTAL_NET::service::BookType *>(coder));
    }

};


class BookInfoFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, BookInfoFactory);
public:

    virtual void Release() override {
        BookInfoFactory::Delete_BookInfoFactory(this);
    }

    static BookInfoFactory *CreateFactory() {
        return BookInfoFactory::New_BookInfoFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::BookInfo();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::BookInfo(*dynamic_cast<const ::CRYSTAL_NET::service::BookInfo *>(coder));
    }

};


class BookVariantInfoFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, BookVariantInfoFactory);
public:

    virtual void Release() override {
        BookVariantInfoFactory::Delete_BookVariantInfoFactory(this);
    }

    static BookVariantInfoFactory *CreateFactory() {
        return BookVariantInfoFactory::New_BookVariantInfoFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::BookVariantInfo();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::BookVariantInfo(*dynamic_cast<const ::CRYSTAL_NET::service::BookVariantInfo *>(coder));
    }

};


class BookVariantInfoItemFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, BookVariantInfoItemFactory);
public:

    virtual void Release() override {
        BookVariantInfoItemFactory::Delete_BookVariantInfoItemFactory(this);
    }

    static BookVariantInfoItemFactory *CreateFactory() {
        return BookVariantInfoItemFactory::New_BookVariantInfoItemFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::BookVariantInfoItem();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::BookVariantInfoItem(*dynamic_cast<const ::CRYSTAL_NET::service::BookVariantInfoItem *>(coder));
    }

};

#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_com_5fbook_2eproto
