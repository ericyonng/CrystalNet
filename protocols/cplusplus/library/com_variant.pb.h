// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com_variant.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_com_5fvariant_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_com_5fvariant_2eproto

// KERNEL_INCLUDED
#include <kernel/kernel.h>
#include <google/protobuf/util/json_util.h>
#include <google/protobuf/text_format.h>

#ifdef GetMessage
 #undef GetMessage
#endif


#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_com_5fvariant_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_com_5fvariant_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_com_5fvariant_2eproto;
namespace CRYSTAL_NET {
namespace service {
class VariantParam;
struct VariantParamDefaultTypeInternal;
extern VariantParamDefaultTypeInternal _VariantParam_default_instance_;
class VariantParamType;
struct VariantParamTypeDefaultTypeInternal;
extern VariantParamTypeDefaultTypeInternal _VariantParamType_default_instance_;
}  // namespace service
}  // namespace CRYSTAL_NET
PROTOBUF_NAMESPACE_OPEN
template<> ::CRYSTAL_NET::service::VariantParam* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::VariantParam>(Arena*);
template<> ::CRYSTAL_NET::service::VariantParamType* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::VariantParamType>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CRYSTAL_NET {
namespace service {

enum VariantParamType_ENUMS : int {
  VariantParamType_ENUMS_UNKNOWN = 0,
  VariantParamType_ENUMS_STRING = 1,
  VariantParamType_ENUMS_VALUE = 2,
  VariantParamType_ENUMS_UNSIGNED_VALUE = 3,
  VariantParamType_ENUMS_DOUBLE_VALUE = 4,
  VariantParamType_ENUMS_VariantParamType_ENUMS_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  VariantParamType_ENUMS_VariantParamType_ENUMS_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool VariantParamType_ENUMS_IsValid(int value);
constexpr VariantParamType_ENUMS VariantParamType_ENUMS_ENUMS_MIN = VariantParamType_ENUMS_UNKNOWN;
constexpr VariantParamType_ENUMS VariantParamType_ENUMS_ENUMS_MAX = VariantParamType_ENUMS_DOUBLE_VALUE;
constexpr int VariantParamType_ENUMS_ENUMS_ARRAYSIZE = VariantParamType_ENUMS_ENUMS_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VariantParamType_ENUMS_descriptor();
template<typename T>
inline const std::string& VariantParamType_ENUMS_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VariantParamType_ENUMS>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VariantParamType_ENUMS_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VariantParamType_ENUMS_descriptor(), enum_t_value);
}
inline bool VariantParamType_ENUMS_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VariantParamType_ENUMS* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VariantParamType_ENUMS>(
    VariantParamType_ENUMS_descriptor(), name, value);
}
// ===================================================================

// AnnotaionInfo[opcode(0), nolog(false), XorEncrypt(false), KeyBase64(false), EnableStorage:(false)]
class VariantParamType final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.VariantParamType) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) const override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message VariantParamType failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message VariantParamType failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) const override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message VariantParamType failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message VariantParamType failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message VariantParamType failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message VariantParamType failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline VariantParamType() : VariantParamType(nullptr) {}
  explicit PROTOBUF_CONSTEXPR VariantParamType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VariantParamType(const VariantParamType& from);
  VariantParamType(VariantParamType&& from) noexcept
    : VariantParamType() {
    *this = ::std::move(from);
  }

  inline VariantParamType& operator=(const VariantParamType& from) {
    CopyFrom(from);
    return *this;
  }
  inline VariantParamType& operator=(VariantParamType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VariantParamType& default_instance() {
    return *internal_default_instance();
  }
  static inline const VariantParamType* internal_default_instance() {
    return reinterpret_cast<const VariantParamType*>(
               &_VariantParamType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VariantParamType& a, VariantParamType& b) {
    a.Swap(&b);
  }
  inline void Swap(VariantParamType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VariantParamType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VariantParamType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VariantParamType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const VariantParamType& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const VariantParamType& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.VariantParamType";
  }
  protected:
  explicit VariantParamType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef VariantParamType_ENUMS ENUMS;
  static constexpr ENUMS UNKNOWN =
    VariantParamType_ENUMS_UNKNOWN;
  static constexpr ENUMS STRING =
    VariantParamType_ENUMS_STRING;
  static constexpr ENUMS VALUE =
    VariantParamType_ENUMS_VALUE;
  static constexpr ENUMS UNSIGNED_VALUE =
    VariantParamType_ENUMS_UNSIGNED_VALUE;
  static constexpr ENUMS DOUBLE_VALUE =
    VariantParamType_ENUMS_DOUBLE_VALUE;
  static inline bool ENUMS_IsValid(int value) {
    return VariantParamType_ENUMS_IsValid(value);
  }
  static constexpr ENUMS ENUMS_MIN =
    VariantParamType_ENUMS_ENUMS_MIN;
  static constexpr ENUMS ENUMS_MAX =
    VariantParamType_ENUMS_ENUMS_MAX;
  static constexpr int ENUMS_ARRAYSIZE =
    VariantParamType_ENUMS_ENUMS_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ENUMS_descriptor() {
    return VariantParamType_ENUMS_descriptor();
  }
  template<typename T>
  static inline const std::string& ENUMS_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ENUMS>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ENUMS_Name.");
    return VariantParamType_ENUMS_Name(enum_t_value);
  }
  static inline bool ENUMS_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ENUMS* value) {
    return VariantParamType_ENUMS_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.VariantParamType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_com_5fvariant_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(0), nolog(false), XorEncrypt(false), KeyBase64(false), EnableStorage:(false)]
class VariantParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.VariantParam) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) const override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message VariantParam failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message VariantParam failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) const override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message VariantParam failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message VariantParam failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message VariantParam failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message VariantParam failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline VariantParam() : VariantParam(nullptr) {}
  ~VariantParam() override;
  explicit PROTOBUF_CONSTEXPR VariantParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VariantParam(const VariantParam& from);
  VariantParam(VariantParam&& from) noexcept
    : VariantParam() {
    *this = ::std::move(from);
  }

  inline VariantParam& operator=(const VariantParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline VariantParam& operator=(VariantParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VariantParam& default_instance() {
    return *internal_default_instance();
  }
  enum VariantValueCase {
    kStrValue = 2,
    kIntValue = 3,
    kUnSignedValue = 4,
    kDoubleValue = 5,
    VARIANTVALUE_NOT_SET = 0,
  };

  static inline const VariantParam* internal_default_instance() {
    return reinterpret_cast<const VariantParam*>(
               &_VariantParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VariantParam& a, VariantParam& b) {
    a.Swap(&b);
  }
  inline void Swap(VariantParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VariantParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VariantParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VariantParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VariantParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VariantParam& from) {
    VariantParam::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VariantParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.VariantParam";
  }
  protected:
  explicit VariantParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVariantTypeFieldNumber = 1,
    kStrValueFieldNumber = 2,
    kIntValueFieldNumber = 3,
    kUnSignedValueFieldNumber = 4,
    kDoubleValueFieldNumber = 5,
  };
  // sint32 VariantType = 1;
  void clear_varianttype();
  int32_t varianttype() const;
  void set_varianttype(int32_t value);
  private:
  int32_t _internal_varianttype() const;
  void _internal_set_varianttype(int32_t value);
  public:

  // bytes StrValue = 2;
  bool has_strvalue() const;
  private:
  bool _internal_has_strvalue() const;
  public:
  void clear_strvalue();
  const std::string& strvalue() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strvalue(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strvalue();
  PROTOBUF_NODISCARD std::string* release_strvalue();
  void set_allocated_strvalue(std::string* strvalue);
  private:
  const std::string& _internal_strvalue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strvalue(const std::string& value);
  std::string* _internal_mutable_strvalue();
  public:

  // sint64 IntValue = 3;
  bool has_intvalue() const;
  private:
  bool _internal_has_intvalue() const;
  public:
  void clear_intvalue();
  int64_t intvalue() const;
  void set_intvalue(int64_t value);
  private:
  int64_t _internal_intvalue() const;
  void _internal_set_intvalue(int64_t value);
  public:

  // uint64 UnSignedValue = 4;
  bool has_unsignedvalue() const;
  private:
  bool _internal_has_unsignedvalue() const;
  public:
  void clear_unsignedvalue();
  uint64_t unsignedvalue() const;
  void set_unsignedvalue(uint64_t value);
  private:
  uint64_t _internal_unsignedvalue() const;
  void _internal_set_unsignedvalue(uint64_t value);
  public:

  // double DoubleValue = 5;
  bool has_doublevalue() const;
  private:
  bool _internal_has_doublevalue() const;
  public:
  void clear_doublevalue();
  double doublevalue() const;
  void set_doublevalue(double value);
  private:
  double _internal_doublevalue() const;
  void _internal_set_doublevalue(double value);
  public:

  void clear_VariantValue();
  VariantValueCase VariantValue_case() const;
  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.VariantParam)
 private:
  class _Internal;
  void set_has_strvalue();
  void set_has_intvalue();
  void set_has_unsignedvalue();
  void set_has_doublevalue();

  inline bool has_VariantValue() const;
  inline void clear_has_VariantValue();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t varianttype_;
    union VariantValueUnion {
      constexpr VariantValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strvalue_;
      int64_t intvalue_;
      uint64_t unsignedvalue_;
      double doublevalue_;
    } VariantValue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_com_5fvariant_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VariantParamType

// -------------------------------------------------------------------

// VariantParam

// sint32 VariantType = 1;
inline void VariantParam::clear_varianttype() {
  _impl_.varianttype_ = 0;
}
inline int32_t VariantParam::_internal_varianttype() const {
  return _impl_.varianttype_;
}
inline int32_t VariantParam::varianttype() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.VariantParam.VariantType)
  return _internal_varianttype();
}
inline void VariantParam::_internal_set_varianttype(int32_t value) {
  
  _impl_.varianttype_ = value;
}
inline void VariantParam::set_varianttype(int32_t value) {
  _internal_set_varianttype(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.VariantParam.VariantType)
}

// bytes StrValue = 2;
inline bool VariantParam::_internal_has_strvalue() const {
  return VariantValue_case() == kStrValue;
}
inline bool VariantParam::has_strvalue() const {
  return _internal_has_strvalue();
}
inline void VariantParam::set_has_strvalue() {
  _impl_._oneof_case_[0] = kStrValue;
}
inline void VariantParam::clear_strvalue() {
  if (_internal_has_strvalue()) {
    _impl_.VariantValue_.strvalue_.Destroy();
    clear_has_VariantValue();
  }
}
inline const std::string& VariantParam::strvalue() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.VariantParam.StrValue)
  return _internal_strvalue();
}
template <typename ArgT0, typename... ArgT>
inline void VariantParam::set_strvalue(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_strvalue()) {
    clear_VariantValue();
    set_has_strvalue();
    _impl_.VariantValue_.strvalue_.InitDefault();
  }
  _impl_.VariantValue_.strvalue_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.VariantParam.StrValue)
}
inline std::string* VariantParam::mutable_strvalue() {
  std::string* _s = _internal_mutable_strvalue();
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.VariantParam.StrValue)
  return _s;
}
inline const std::string& VariantParam::_internal_strvalue() const {
  if (_internal_has_strvalue()) {
    return _impl_.VariantValue_.strvalue_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void VariantParam::_internal_set_strvalue(const std::string& value) {
  if (!_internal_has_strvalue()) {
    clear_VariantValue();
    set_has_strvalue();
    _impl_.VariantValue_.strvalue_.InitDefault();
  }
  _impl_.VariantValue_.strvalue_.Set(value, GetArenaForAllocation());
}
inline std::string* VariantParam::_internal_mutable_strvalue() {
  if (!_internal_has_strvalue()) {
    clear_VariantValue();
    set_has_strvalue();
    _impl_.VariantValue_.strvalue_.InitDefault();
  }
  return _impl_.VariantValue_.strvalue_.Mutable(      GetArenaForAllocation());
}
inline std::string* VariantParam::release_strvalue() {
  // @@protoc_insertion_point(field_release:CRYSTAL_NET.service.VariantParam.StrValue)
  if (_internal_has_strvalue()) {
    clear_has_VariantValue();
    return _impl_.VariantValue_.strvalue_.Release();
  } else {
    return nullptr;
  }
}
inline void VariantParam::set_allocated_strvalue(std::string* strvalue) {
  if (has_VariantValue()) {
    clear_VariantValue();
  }
  if (strvalue != nullptr) {
    set_has_strvalue();
    _impl_.VariantValue_.strvalue_.InitAllocated(strvalue, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:CRYSTAL_NET.service.VariantParam.StrValue)
}

// sint64 IntValue = 3;
inline bool VariantParam::_internal_has_intvalue() const {
  return VariantValue_case() == kIntValue;
}
inline bool VariantParam::has_intvalue() const {
  return _internal_has_intvalue();
}
inline void VariantParam::set_has_intvalue() {
  _impl_._oneof_case_[0] = kIntValue;
}
inline void VariantParam::clear_intvalue() {
  if (_internal_has_intvalue()) {
    _impl_.VariantValue_.intvalue_ = int64_t{0};
    clear_has_VariantValue();
  }
}
inline int64_t VariantParam::_internal_intvalue() const {
  if (_internal_has_intvalue()) {
    return _impl_.VariantValue_.intvalue_;
  }
  return int64_t{0};
}
inline void VariantParam::_internal_set_intvalue(int64_t value) {
  if (!_internal_has_intvalue()) {
    clear_VariantValue();
    set_has_intvalue();
  }
  _impl_.VariantValue_.intvalue_ = value;
}
inline int64_t VariantParam::intvalue() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.VariantParam.IntValue)
  return _internal_intvalue();
}
inline void VariantParam::set_intvalue(int64_t value) {
  _internal_set_intvalue(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.VariantParam.IntValue)
}

// uint64 UnSignedValue = 4;
inline bool VariantParam::_internal_has_unsignedvalue() const {
  return VariantValue_case() == kUnSignedValue;
}
inline bool VariantParam::has_unsignedvalue() const {
  return _internal_has_unsignedvalue();
}
inline void VariantParam::set_has_unsignedvalue() {
  _impl_._oneof_case_[0] = kUnSignedValue;
}
inline void VariantParam::clear_unsignedvalue() {
  if (_internal_has_unsignedvalue()) {
    _impl_.VariantValue_.unsignedvalue_ = uint64_t{0u};
    clear_has_VariantValue();
  }
}
inline uint64_t VariantParam::_internal_unsignedvalue() const {
  if (_internal_has_unsignedvalue()) {
    return _impl_.VariantValue_.unsignedvalue_;
  }
  return uint64_t{0u};
}
inline void VariantParam::_internal_set_unsignedvalue(uint64_t value) {
  if (!_internal_has_unsignedvalue()) {
    clear_VariantValue();
    set_has_unsignedvalue();
  }
  _impl_.VariantValue_.unsignedvalue_ = value;
}
inline uint64_t VariantParam::unsignedvalue() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.VariantParam.UnSignedValue)
  return _internal_unsignedvalue();
}
inline void VariantParam::set_unsignedvalue(uint64_t value) {
  _internal_set_unsignedvalue(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.VariantParam.UnSignedValue)
}

// double DoubleValue = 5;
inline bool VariantParam::_internal_has_doublevalue() const {
  return VariantValue_case() == kDoubleValue;
}
inline bool VariantParam::has_doublevalue() const {
  return _internal_has_doublevalue();
}
inline void VariantParam::set_has_doublevalue() {
  _impl_._oneof_case_[0] = kDoubleValue;
}
inline void VariantParam::clear_doublevalue() {
  if (_internal_has_doublevalue()) {
    _impl_.VariantValue_.doublevalue_ = 0;
    clear_has_VariantValue();
  }
}
inline double VariantParam::_internal_doublevalue() const {
  if (_internal_has_doublevalue()) {
    return _impl_.VariantValue_.doublevalue_;
  }
  return 0;
}
inline void VariantParam::_internal_set_doublevalue(double value) {
  if (!_internal_has_doublevalue()) {
    clear_VariantValue();
    set_has_doublevalue();
  }
  _impl_.VariantValue_.doublevalue_ = value;
}
inline double VariantParam::doublevalue() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.VariantParam.DoubleValue)
  return _internal_doublevalue();
}
inline void VariantParam::set_doublevalue(double value) {
  _internal_set_doublevalue(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.VariantParam.DoubleValue)
}

inline bool VariantParam::has_VariantValue() const {
  return VariantValue_case() != VARIANTVALUE_NOT_SET;
}
inline void VariantParam::clear_has_VariantValue() {
  _impl_._oneof_case_[0] = VARIANTVALUE_NOT_SET;
}
inline VariantParam::VariantValueCase VariantParam::VariantValue_case() const {
  return VariantParam::VariantValueCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service
}  // namespace CRYSTAL_NET

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CRYSTAL_NET::service::VariantParamType_ENUMS> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CRYSTAL_NET::service::VariantParamType_ENUMS>() {
  return ::CRYSTAL_NET::service::VariantParamType_ENUMS_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>

class VariantParamTypeFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, VariantParamTypeFactory);
public:

    virtual void Release() override {
        VariantParamTypeFactory::Delete_VariantParamTypeFactory(this);
    }

    static VariantParamTypeFactory *CreateFactory() {
        return VariantParamTypeFactory::New_VariantParamTypeFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::VariantParamType();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::VariantParamType(*dynamic_cast<const ::CRYSTAL_NET::service::VariantParamType *>(coder));
    }

};


class VariantParamFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, VariantParamFactory);
public:

    virtual void Release() override {
        VariantParamFactory::Delete_VariantParamFactory(this);
    }

    static VariantParamFactory *CreateFactory() {
        return VariantParamFactory::New_VariantParamFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::VariantParam();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::VariantParam(*dynamic_cast<const ::CRYSTAL_NET::service::VariantParam *>(coder));
    }

};

#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_com_5fvariant_2eproto
