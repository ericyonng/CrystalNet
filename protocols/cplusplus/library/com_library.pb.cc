#include <pch.h>
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com_library.proto

#include <protocols/cplusplus/library/com_library.pb.h>
POOL_CREATE_OBJ_DEFAULT_IMPL(RoleTypeFactory);
POOL_CREATE_OBJ_DEFAULT_IMPL(LibararyManagerInfoFactory);
POOL_CREATE_OBJ_DEFAULT_IMPL(BorrowBookInfoFactory);
POOL_CREATE_OBJ_DEFAULT_IMPL(BorrowOrderInfoFactory);
POOL_CREATE_OBJ_DEFAULT_IMPL(MemberInfoFactory);
POOL_CREATE_OBJ_DEFAULT_IMPL(VariantParamTypeFactory);
POOL_CREATE_OBJ_DEFAULT_IMPL(VariantParamFactory);
POOL_CREATE_OBJ_DEFAULT_IMPL(OperationTypeFactory);
POOL_CREATE_OBJ_DEFAULT_IMPL(OperationLogInfoFactory);
POOL_CREATE_OBJ_DEFAULT_IMPL(LibraryInfoFactory);
POOL_CREATE_OBJ_DEFAULT_IMPL(UserLibraryInfoFactory);
POOL_CREATE_OBJ_DEFAULT_IMPL(LibraryPreviewInfoFactory);

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace CRYSTAL_NET {
namespace service {
PROTOBUF_CONSTEXPR RoleType::RoleType(
    ::_pbi::ConstantInitialized) {}
struct RoleTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleTypeDefaultTypeInternal() {}
  union {
    RoleType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleTypeDefaultTypeInternal _RoleType_default_instance_;
PROTOBUF_CONSTEXPR LibararyManagerInfo::LibararyManagerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.userid_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LibararyManagerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LibararyManagerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LibararyManagerInfoDefaultTypeInternal() {}
  union {
    LibararyManagerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LibararyManagerInfoDefaultTypeInternal _LibararyManagerInfo_default_instance_;
PROTOBUF_CONSTEXPR BorrowBookInfo::BorrowBookInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.isbncode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bookid_)*/uint64_t{0u}
  , /*decltype(_impl_.borrowcount_)*/uint64_t{0u}
  , /*decltype(_impl_.borrowtime_)*/uint64_t{0u}
  , /*decltype(_impl_.plangivebacktime_)*/uint64_t{0u}
  , /*decltype(_impl_.realgivebacktime_)*/uint64_t{0u}
  , /*decltype(_impl_.returnbackcount_)*/uint64_t{0u}
  , /*decltype(_impl_.suborderid_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BorrowBookInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BorrowBookInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BorrowBookInfoDefaultTypeInternal() {}
  union {
    BorrowBookInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BorrowBookInfoDefaultTypeInternal _BorrowBookInfo_default_instance_;
PROTOBUF_CONSTEXPR BorrowOrderInfo::BorrowOrderInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.borrowbooklist_)*/{}
  , /*decltype(_impl_.orderid_)*/uint64_t{0u}
  , /*decltype(_impl_.createordertime_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BorrowOrderInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BorrowOrderInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BorrowOrderInfoDefaultTypeInternal() {}
  union {
    BorrowOrderInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BorrowOrderInfoDefaultTypeInternal _BorrowOrderInfo_default_instance_;
PROTOBUF_CONSTEXPR MemberInfo::MemberInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.borrowlist_)*/{}
  , /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.userid_)*/uint64_t{0u}
  , /*decltype(_impl_.locktimestampms_)*/int64_t{0}
  , /*decltype(_impl_.role_)*/0
  , /*decltype(_impl_.MemberBindPhone_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct MemberInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemberInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemberInfoDefaultTypeInternal() {}
  union {
    MemberInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemberInfoDefaultTypeInternal _MemberInfo_default_instance_;
PROTOBUF_CONSTEXPR VariantParamType::VariantParamType(
    ::_pbi::ConstantInitialized) {}
struct VariantParamTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VariantParamTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VariantParamTypeDefaultTypeInternal() {}
  union {
    VariantParamType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VariantParamTypeDefaultTypeInternal _VariantParamType_default_instance_;
PROTOBUF_CONSTEXPR VariantParam::VariantParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.paramtype_)*/0
  , /*decltype(_impl_.ParamValue_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct VariantParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VariantParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VariantParamDefaultTypeInternal() {}
  union {
    VariantParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VariantParamDefaultTypeInternal _VariantParam_default_instance_;
PROTOBUF_CONSTEXPR OperationType::OperationType(
    ::_pbi::ConstantInitialized) {}
struct OperationTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperationTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperationTypeDefaultTypeInternal() {}
  union {
    OperationType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperationTypeDefaultTypeInternal _OperationType_default_instance_;
PROTOBUF_CONSTEXPR OperationLogInfo::OperationLogInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.params_)*/{}
  , /*decltype(_impl_.opnickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.opuserid_)*/uint64_t{0u}
  , /*decltype(_impl_.optype_)*/0
  , /*decltype(_impl_.role_)*/0
  , /*decltype(_impl_.optimems_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OperationLogInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperationLogInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperationLogInfoDefaultTypeInternal() {}
  union {
    OperationLogInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperationLogInfoDefaultTypeInternal _OperationLogInfo_default_instance_;
PROTOBUF_CONSTEXPR LibraryInfo::LibraryInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.managerinfolist_)*/{}
  , /*decltype(_impl_.memberlist_)*/{}
  , /*decltype(_impl_.booklist_)*/{}
  , /*decltype(_impl_.loginfolist_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.opentime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.telphonenumber_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.librarianusernickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.librarianuserid_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LibraryInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LibraryInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LibraryInfoDefaultTypeInternal() {}
  union {
    LibraryInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LibraryInfoDefaultTypeInternal _LibraryInfo_default_instance_;
PROTOBUF_CONSTEXPR UserLibraryInfo::UserLibraryInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.libraryid_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserLibraryInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserLibraryInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserLibraryInfoDefaultTypeInternal() {}
  union {
    UserLibraryInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserLibraryInfoDefaultTypeInternal _UserLibraryInfo_default_instance_;
PROTOBUF_CONSTEXPR LibraryPreviewInfo::LibraryPreviewInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.librariannickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.librarianuserid_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LibraryPreviewInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LibraryPreviewInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LibraryPreviewInfoDefaultTypeInternal() {}
  union {
    LibraryPreviewInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LibraryPreviewInfoDefaultTypeInternal _LibraryPreviewInfo_default_instance_;
}  // namespace service
}  // namespace CRYSTAL_NET
static ::_pb::Metadata file_level_metadata_com_5flibrary_2eproto[12];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_com_5flibrary_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_com_5flibrary_2eproto = nullptr;

const uint32_t TableStruct_com_5flibrary_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::RoleType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::LibararyManagerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::LibararyManagerInfo, _impl_.userid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::BorrowBookInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::BorrowBookInfo, _impl_.bookid_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::BorrowBookInfo, _impl_.isbncode_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::BorrowBookInfo, _impl_.borrowcount_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::BorrowBookInfo, _impl_.borrowtime_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::BorrowBookInfo, _impl_.plangivebacktime_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::BorrowBookInfo, _impl_.realgivebacktime_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::BorrowBookInfo, _impl_.returnbackcount_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::BorrowBookInfo, _impl_.suborderid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::BorrowOrderInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::BorrowOrderInfo, _impl_.orderid_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::BorrowOrderInfo, _impl_.borrowbooklist_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::BorrowOrderInfo, _impl_.createordertime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::MemberInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::MemberInfo, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::MemberInfo, _impl_.userid_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::MemberInfo, _impl_.role_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::MemberInfo, _impl_.nickname_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::MemberInfo, _impl_.borrowlist_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::MemberInfo, _impl_.locktimestampms_),
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::MemberInfo, _impl_.MemberBindPhone_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::VariantParamType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::VariantParam, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::VariantParam, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::VariantParam, _impl_.paramtype_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::VariantParam, _impl_.ParamValue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::OperationType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::OperationLogInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::OperationLogInfo, _impl_.optype_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::OperationLogInfo, _impl_.opuserid_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::OperationLogInfo, _impl_.opnickname_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::OperationLogInfo, _impl_.role_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::OperationLogInfo, _impl_.optimems_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::OperationLogInfo, _impl_.params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::LibraryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::LibraryInfo, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::LibraryInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::LibraryInfo, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::LibraryInfo, _impl_.opentime_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::LibraryInfo, _impl_.telphonenumber_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::LibraryInfo, _impl_.librarianuserid_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::LibraryInfo, _impl_.librarianusernickname_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::LibraryInfo, _impl_.managerinfolist_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::LibraryInfo, _impl_.memberlist_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::LibraryInfo, _impl_.booklist_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::LibraryInfo, _impl_.loginfolist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::UserLibraryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::UserLibraryInfo, _impl_.libraryid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::LibraryPreviewInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::LibraryPreviewInfo, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::LibraryPreviewInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::LibraryPreviewInfo, _impl_.librarianuserid_),
  PROTOBUF_FIELD_OFFSET(::CRYSTAL_NET::service::LibraryPreviewInfo, _impl_.librariannickname_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::CRYSTAL_NET::service::RoleType)},
  { 6, -1, -1, sizeof(::CRYSTAL_NET::service::LibararyManagerInfo)},
  { 13, -1, -1, sizeof(::CRYSTAL_NET::service::BorrowBookInfo)},
  { 27, -1, -1, sizeof(::CRYSTAL_NET::service::BorrowOrderInfo)},
  { 36, -1, -1, sizeof(::CRYSTAL_NET::service::MemberInfo)},
  { 49, -1, -1, sizeof(::CRYSTAL_NET::service::VariantParamType)},
  { 55, -1, -1, sizeof(::CRYSTAL_NET::service::VariantParam)},
  { 65, -1, -1, sizeof(::CRYSTAL_NET::service::OperationType)},
  { 71, -1, -1, sizeof(::CRYSTAL_NET::service::OperationLogInfo)},
  { 83, -1, -1, sizeof(::CRYSTAL_NET::service::LibraryInfo)},
  { 100, -1, -1, sizeof(::CRYSTAL_NET::service::UserLibraryInfo)},
  { 107, -1, -1, sizeof(::CRYSTAL_NET::service::LibraryPreviewInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::CRYSTAL_NET::service::_RoleType_default_instance_._instance,
  &::CRYSTAL_NET::service::_LibararyManagerInfo_default_instance_._instance,
  &::CRYSTAL_NET::service::_BorrowBookInfo_default_instance_._instance,
  &::CRYSTAL_NET::service::_BorrowOrderInfo_default_instance_._instance,
  &::CRYSTAL_NET::service::_MemberInfo_default_instance_._instance,
  &::CRYSTAL_NET::service::_VariantParamType_default_instance_._instance,
  &::CRYSTAL_NET::service::_VariantParam_default_instance_._instance,
  &::CRYSTAL_NET::service::_OperationType_default_instance_._instance,
  &::CRYSTAL_NET::service::_OperationLogInfo_default_instance_._instance,
  &::CRYSTAL_NET::service::_LibraryInfo_default_instance_._instance,
  &::CRYSTAL_NET::service::_UserLibraryInfo_default_instance_._instance,
  &::CRYSTAL_NET::service::_LibraryPreviewInfo_default_instance_._instance,
};

const char descriptor_table_protodef_com_5flibrary_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021com_library.proto\022\023CRYSTAL_NET.service"
  "\032\016com_book.proto\"M\n\010RoleType\"A\n\005ENUMS\022\n\n"
  "\006NoAuth\020\000\022\020\n\014NormalMember\020\001\022\013\n\007Manager\020\002"
  "\022\r\n\tLibrarian\020\003\"%\n\023LibararyManagerInfo\022\016"
  "\n\006UserId\030\001 \001(\004\"\274\001\n\016BorrowBookInfo\022\016\n\006Boo"
  "kId\030\001 \001(\004\022\020\n\010IsbnCode\030\002 \001(\t\022\023\n\013BorrowCou"
  "nt\030\003 \001(\004\022\022\n\nBorrowTime\030\004 \001(\004\022\030\n\020PlanGive"
  "BackTime\030\005 \001(\004\022\030\n\020RealGiveBackTime\030\006 \001(\004"
  "\022\027\n\017ReturnBackCount\030\007 \001(\004\022\022\n\nSubOrderId\030"
  "\010 \001(\004\"x\n\017BorrowOrderInfo\022\017\n\007OrderId\030\001 \001("
  "\004\022;\n\016BorrowBookList\030\002 \003(\0132#.CRYSTAL_NET."
  "service.BorrowBookInfo\022\027\n\017CreateOrderTim"
  "e\030\003 \001(\004\"\267\001\n\nMemberInfo\022\016\n\006UserId\030\001 \001(\004\022\014"
  "\n\004Role\030\002 \001(\021\022\020\n\010Nickname\030\003 \001(\t\0228\n\nBorrow"
  "List\030\004 \003(\0132$.CRYSTAL_NET.service.BorrowO"
  "rderInfo\022\027\n\017LockTimestampMs\030\005 \001(\022\022\023\n\tBin"
  "dPhone\030\006 \001(\004H\000B\021\n\017MemberBindPhone\"=\n\020Var"
  "iantParamType\")\n\005ENUMS\022\013\n\007UNKNOWN\020\000\022\007\n\003N"
  "UM\020\001\022\n\n\006STRING\020\002\"P\n\014VariantParam\022\021\n\tPara"
  "mType\030\001 \001(\021\022\020\n\006Number\030\002 \001(\022H\000\022\r\n\003Str\030\003 \001"
  "(\tH\000B\014\n\nParamValue\"%\n\rOperationType\"\024\n\005E"
  "NUMS\022\013\n\007UNKNOWN\020\000\"\233\001\n\020OperationLogInfo\022\016"
  "\n\006OpType\030\001 \001(\021\022\020\n\010OpUserId\030\002 \001(\004\022\022\n\nOpNi"
  "ckname\030\003 \001(\t\022\014\n\004Role\030\004 \001(\021\022\020\n\010OpTimeMs\030\005"
  " \001(\022\0221\n\006Params\030\006 \003(\0132!.CRYSTAL_NET.servi"
  "ce.VariantParam\"\377\002\n\013LibraryInfo\022\n\n\002Id\030\001 "
  "\001(\004\022\014\n\004Name\030\002 \001(\t\022\017\n\007Address\030\003 \001(\t\022\020\n\010Op"
  "enTime\030\004 \001(\t\022\026\n\016TelphoneNumber\030\005 \001(\t\022\027\n\017"
  "LibrarianUserId\030\006 \001(\004\022\035\n\025LibrarianUserNi"
  "ckname\030\007 \001(\t\022A\n\017ManagerInfoList\030\010 \003(\0132(."
  "CRYSTAL_NET.service.LibararyManagerInfo\022"
  "3\n\nMemberList\030\t \003(\0132\037.CRYSTAL_NET.servic"
  "e.MemberInfo\022/\n\010BookList\030\n \003(\0132\035.CRYSTAL"
  "_NET.service.BookInfo\022:\n\013LogInfoList\030\013 \003"
  "(\0132%.CRYSTAL_NET.service.OperationLogInf"
  "o\"$\n\017UserLibraryInfo\022\021\n\tLibraryId\030\001 \001(\004\""
  "b\n\022LibraryPreviewInfo\022\n\n\002Id\030\001 \001(\004\022\014\n\004Nam"
  "e\030\002 \001(\t\022\027\n\017LibrarianUserId\030\003 \001(\004\022\031\n\021Libr"
  "arianNickname\030\004 \001(\tb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_com_5flibrary_2eproto_deps[1] = {
  &::descriptor_table_com_5fbook_2eproto,
};
static ::_pbi::once_flag descriptor_table_com_5flibrary_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_com_5flibrary_2eproto = {
    false, false, 1547, descriptor_table_protodef_com_5flibrary_2eproto,
    "com_library.proto",
    &descriptor_table_com_5flibrary_2eproto_once, descriptor_table_com_5flibrary_2eproto_deps, 1, 12,
    schemas, file_default_instances, TableStruct_com_5flibrary_2eproto::offsets,
    file_level_metadata_com_5flibrary_2eproto, file_level_enum_descriptors_com_5flibrary_2eproto,
    file_level_service_descriptors_com_5flibrary_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_com_5flibrary_2eproto_getter() {
  return &descriptor_table_com_5flibrary_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_com_5flibrary_2eproto(&descriptor_table_com_5flibrary_2eproto);
namespace CRYSTAL_NET {
namespace service {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoleType_ENUMS_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_com_5flibrary_2eproto);
  return file_level_enum_descriptors_com_5flibrary_2eproto[0];
}
bool RoleType_ENUMS_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RoleType_ENUMS RoleType::NoAuth;
constexpr RoleType_ENUMS RoleType::NormalMember;
constexpr RoleType_ENUMS RoleType::Manager;
constexpr RoleType_ENUMS RoleType::Librarian;
constexpr RoleType_ENUMS RoleType::ENUMS_MIN;
constexpr RoleType_ENUMS RoleType::ENUMS_MAX;
constexpr int RoleType::ENUMS_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VariantParamType_ENUMS_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_com_5flibrary_2eproto);
  return file_level_enum_descriptors_com_5flibrary_2eproto[1];
}
bool VariantParamType_ENUMS_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr VariantParamType_ENUMS VariantParamType::UNKNOWN;
constexpr VariantParamType_ENUMS VariantParamType::NUM;
constexpr VariantParamType_ENUMS VariantParamType::STRING;
constexpr VariantParamType_ENUMS VariantParamType::ENUMS_MIN;
constexpr VariantParamType_ENUMS VariantParamType::ENUMS_MAX;
constexpr int VariantParamType::ENUMS_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OperationType_ENUMS_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_com_5flibrary_2eproto);
  return file_level_enum_descriptors_com_5flibrary_2eproto[2];
}
bool OperationType_ENUMS_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr OperationType_ENUMS OperationType::UNKNOWN;
constexpr OperationType_ENUMS OperationType::ENUMS_MIN;
constexpr OperationType_ENUMS OperationType::ENUMS_MAX;
constexpr int OperationType::ENUMS_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class RoleType::_Internal {
 public:
};

RoleType::RoleType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CRYSTAL_NET.service.RoleType)
}
RoleType::RoleType(const RoleType& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  RoleType* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CRYSTAL_NET.service.RoleType)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleType::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RoleType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_com_5flibrary_2eproto_getter, &descriptor_table_com_5flibrary_2eproto_once,
      file_level_metadata_com_5flibrary_2eproto[0]);
}

// ===================================================================

class LibararyManagerInfo::_Internal {
 public:
};

LibararyManagerInfo::LibararyManagerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CRYSTAL_NET.service.LibararyManagerInfo)
}
LibararyManagerInfo::LibararyManagerInfo(const LibararyManagerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LibararyManagerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.userid_ = from._impl_.userid_;
  // @@protoc_insertion_point(copy_constructor:CRYSTAL_NET.service.LibararyManagerInfo)
}

inline void LibararyManagerInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.userid_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LibararyManagerInfo::~LibararyManagerInfo() {
  // @@protoc_insertion_point(destructor:CRYSTAL_NET.service.LibararyManagerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LibararyManagerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LibararyManagerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LibararyManagerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CRYSTAL_NET.service.LibararyManagerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.userid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LibararyManagerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 UserId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LibararyManagerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRYSTAL_NET.service.LibararyManagerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 UserId = 1;
  if (this->_internal_userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRYSTAL_NET.service.LibararyManagerInfo)
  return target;
}

size_t LibararyManagerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRYSTAL_NET.service.LibararyManagerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 UserId = 1;
  if (this->_internal_userid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_userid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LibararyManagerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LibararyManagerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LibararyManagerInfo::GetClassData() const { return &_class_data_; }


void LibararyManagerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LibararyManagerInfo*>(&to_msg);
  auto& from = static_cast<const LibararyManagerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CRYSTAL_NET.service.LibararyManagerInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_userid() != 0) {
    _this->_internal_set_userid(from._internal_userid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LibararyManagerInfo::CopyFrom(const LibararyManagerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRYSTAL_NET.service.LibararyManagerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LibararyManagerInfo::IsInitialized() const {
  return true;
}

void LibararyManagerInfo::InternalSwap(LibararyManagerInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.userid_, other->_impl_.userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LibararyManagerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_com_5flibrary_2eproto_getter, &descriptor_table_com_5flibrary_2eproto_once,
      file_level_metadata_com_5flibrary_2eproto[1]);
}

// ===================================================================

class BorrowBookInfo::_Internal {
 public:
};

BorrowBookInfo::BorrowBookInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CRYSTAL_NET.service.BorrowBookInfo)
}
BorrowBookInfo::BorrowBookInfo(const BorrowBookInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BorrowBookInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.isbncode_){}
    , decltype(_impl_.bookid_){}
    , decltype(_impl_.borrowcount_){}
    , decltype(_impl_.borrowtime_){}
    , decltype(_impl_.plangivebacktime_){}
    , decltype(_impl_.realgivebacktime_){}
    , decltype(_impl_.returnbackcount_){}
    , decltype(_impl_.suborderid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.isbncode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.isbncode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_isbncode().empty()) {
    _this->_impl_.isbncode_.Set(from._internal_isbncode(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.bookid_, &from._impl_.bookid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.suborderid_) -
    reinterpret_cast<char*>(&_impl_.bookid_)) + sizeof(_impl_.suborderid_));
  // @@protoc_insertion_point(copy_constructor:CRYSTAL_NET.service.BorrowBookInfo)
}

inline void BorrowBookInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.isbncode_){}
    , decltype(_impl_.bookid_){uint64_t{0u}}
    , decltype(_impl_.borrowcount_){uint64_t{0u}}
    , decltype(_impl_.borrowtime_){uint64_t{0u}}
    , decltype(_impl_.plangivebacktime_){uint64_t{0u}}
    , decltype(_impl_.realgivebacktime_){uint64_t{0u}}
    , decltype(_impl_.returnbackcount_){uint64_t{0u}}
    , decltype(_impl_.suborderid_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.isbncode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.isbncode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BorrowBookInfo::~BorrowBookInfo() {
  // @@protoc_insertion_point(destructor:CRYSTAL_NET.service.BorrowBookInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BorrowBookInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.isbncode_.Destroy();
}

void BorrowBookInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BorrowBookInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CRYSTAL_NET.service.BorrowBookInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.isbncode_.ClearToEmpty();
  ::memset(&_impl_.bookid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.suborderid_) -
      reinterpret_cast<char*>(&_impl_.bookid_)) + sizeof(_impl_.suborderid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BorrowBookInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 BookId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.bookid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string IsbnCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_isbncode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CRYSTAL_NET.service.BorrowBookInfo.IsbnCode"));
        } else
          goto handle_unusual;
        continue;
      // uint64 BorrowCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.borrowcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 BorrowTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.borrowtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 PlanGiveBackTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.plangivebacktime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 RealGiveBackTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.realgivebacktime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ReturnBackCount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.returnbackcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 SubOrderId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.suborderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BorrowBookInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRYSTAL_NET.service.BorrowBookInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 BookId = 1;
  if (this->_internal_bookid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_bookid(), target);
  }

  // string IsbnCode = 2;
  if (!this->_internal_isbncode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_isbncode().data(), static_cast<int>(this->_internal_isbncode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CRYSTAL_NET.service.BorrowBookInfo.IsbnCode");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_isbncode(), target);
  }

  // uint64 BorrowCount = 3;
  if (this->_internal_borrowcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_borrowcount(), target);
  }

  // uint64 BorrowTime = 4;
  if (this->_internal_borrowtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_borrowtime(), target);
  }

  // uint64 PlanGiveBackTime = 5;
  if (this->_internal_plangivebacktime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_plangivebacktime(), target);
  }

  // uint64 RealGiveBackTime = 6;
  if (this->_internal_realgivebacktime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_realgivebacktime(), target);
  }

  // uint64 ReturnBackCount = 7;
  if (this->_internal_returnbackcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_returnbackcount(), target);
  }

  // uint64 SubOrderId = 8;
  if (this->_internal_suborderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_suborderid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRYSTAL_NET.service.BorrowBookInfo)
  return target;
}

size_t BorrowBookInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRYSTAL_NET.service.BorrowBookInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string IsbnCode = 2;
  if (!this->_internal_isbncode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_isbncode());
  }

  // uint64 BookId = 1;
  if (this->_internal_bookid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bookid());
  }

  // uint64 BorrowCount = 3;
  if (this->_internal_borrowcount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_borrowcount());
  }

  // uint64 BorrowTime = 4;
  if (this->_internal_borrowtime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_borrowtime());
  }

  // uint64 PlanGiveBackTime = 5;
  if (this->_internal_plangivebacktime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_plangivebacktime());
  }

  // uint64 RealGiveBackTime = 6;
  if (this->_internal_realgivebacktime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_realgivebacktime());
  }

  // uint64 ReturnBackCount = 7;
  if (this->_internal_returnbackcount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_returnbackcount());
  }

  // uint64 SubOrderId = 8;
  if (this->_internal_suborderid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_suborderid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BorrowBookInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BorrowBookInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BorrowBookInfo::GetClassData() const { return &_class_data_; }


void BorrowBookInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BorrowBookInfo*>(&to_msg);
  auto& from = static_cast<const BorrowBookInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CRYSTAL_NET.service.BorrowBookInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_isbncode().empty()) {
    _this->_internal_set_isbncode(from._internal_isbncode());
  }
  if (from._internal_bookid() != 0) {
    _this->_internal_set_bookid(from._internal_bookid());
  }
  if (from._internal_borrowcount() != 0) {
    _this->_internal_set_borrowcount(from._internal_borrowcount());
  }
  if (from._internal_borrowtime() != 0) {
    _this->_internal_set_borrowtime(from._internal_borrowtime());
  }
  if (from._internal_plangivebacktime() != 0) {
    _this->_internal_set_plangivebacktime(from._internal_plangivebacktime());
  }
  if (from._internal_realgivebacktime() != 0) {
    _this->_internal_set_realgivebacktime(from._internal_realgivebacktime());
  }
  if (from._internal_returnbackcount() != 0) {
    _this->_internal_set_returnbackcount(from._internal_returnbackcount());
  }
  if (from._internal_suborderid() != 0) {
    _this->_internal_set_suborderid(from._internal_suborderid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BorrowBookInfo::CopyFrom(const BorrowBookInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRYSTAL_NET.service.BorrowBookInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BorrowBookInfo::IsInitialized() const {
  return true;
}

void BorrowBookInfo::InternalSwap(BorrowBookInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.isbncode_, lhs_arena,
      &other->_impl_.isbncode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BorrowBookInfo, _impl_.suborderid_)
      + sizeof(BorrowBookInfo::_impl_.suborderid_)
      - PROTOBUF_FIELD_OFFSET(BorrowBookInfo, _impl_.bookid_)>(
          reinterpret_cast<char*>(&_impl_.bookid_),
          reinterpret_cast<char*>(&other->_impl_.bookid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BorrowBookInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_com_5flibrary_2eproto_getter, &descriptor_table_com_5flibrary_2eproto_once,
      file_level_metadata_com_5flibrary_2eproto[2]);
}

// ===================================================================

class BorrowOrderInfo::_Internal {
 public:
};

BorrowOrderInfo::BorrowOrderInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CRYSTAL_NET.service.BorrowOrderInfo)
}
BorrowOrderInfo::BorrowOrderInfo(const BorrowOrderInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BorrowOrderInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.borrowbooklist_){from._impl_.borrowbooklist_}
    , decltype(_impl_.orderid_){}
    , decltype(_impl_.createordertime_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.orderid_, &from._impl_.orderid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.createordertime_) -
    reinterpret_cast<char*>(&_impl_.orderid_)) + sizeof(_impl_.createordertime_));
  // @@protoc_insertion_point(copy_constructor:CRYSTAL_NET.service.BorrowOrderInfo)
}

inline void BorrowOrderInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.borrowbooklist_){arena}
    , decltype(_impl_.orderid_){uint64_t{0u}}
    , decltype(_impl_.createordertime_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BorrowOrderInfo::~BorrowOrderInfo() {
  // @@protoc_insertion_point(destructor:CRYSTAL_NET.service.BorrowOrderInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BorrowOrderInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.borrowbooklist_.~RepeatedPtrField();
}

void BorrowOrderInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BorrowOrderInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CRYSTAL_NET.service.BorrowOrderInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.borrowbooklist_.Clear();
  ::memset(&_impl_.orderid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.createordertime_) -
      reinterpret_cast<char*>(&_impl_.orderid_)) + sizeof(_impl_.createordertime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BorrowOrderInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 OrderId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.orderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CRYSTAL_NET.service.BorrowBookInfo BorrowBookList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_borrowbooklist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 CreateOrderTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.createordertime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BorrowOrderInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRYSTAL_NET.service.BorrowOrderInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 OrderId = 1;
  if (this->_internal_orderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_orderid(), target);
  }

  // repeated .CRYSTAL_NET.service.BorrowBookInfo BorrowBookList = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_borrowbooklist_size()); i < n; i++) {
    const auto& repfield = this->_internal_borrowbooklist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 CreateOrderTime = 3;
  if (this->_internal_createordertime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_createordertime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRYSTAL_NET.service.BorrowOrderInfo)
  return target;
}

size_t BorrowOrderInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRYSTAL_NET.service.BorrowOrderInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CRYSTAL_NET.service.BorrowBookInfo BorrowBookList = 2;
  total_size += 1UL * this->_internal_borrowbooklist_size();
  for (const auto& msg : this->_impl_.borrowbooklist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 OrderId = 1;
  if (this->_internal_orderid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_orderid());
  }

  // uint64 CreateOrderTime = 3;
  if (this->_internal_createordertime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_createordertime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BorrowOrderInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BorrowOrderInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BorrowOrderInfo::GetClassData() const { return &_class_data_; }


void BorrowOrderInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BorrowOrderInfo*>(&to_msg);
  auto& from = static_cast<const BorrowOrderInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CRYSTAL_NET.service.BorrowOrderInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.borrowbooklist_.MergeFrom(from._impl_.borrowbooklist_);
  if (from._internal_orderid() != 0) {
    _this->_internal_set_orderid(from._internal_orderid());
  }
  if (from._internal_createordertime() != 0) {
    _this->_internal_set_createordertime(from._internal_createordertime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BorrowOrderInfo::CopyFrom(const BorrowOrderInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRYSTAL_NET.service.BorrowOrderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BorrowOrderInfo::IsInitialized() const {
  return true;
}

void BorrowOrderInfo::InternalSwap(BorrowOrderInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.borrowbooklist_.InternalSwap(&other->_impl_.borrowbooklist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BorrowOrderInfo, _impl_.createordertime_)
      + sizeof(BorrowOrderInfo::_impl_.createordertime_)
      - PROTOBUF_FIELD_OFFSET(BorrowOrderInfo, _impl_.orderid_)>(
          reinterpret_cast<char*>(&_impl_.orderid_),
          reinterpret_cast<char*>(&other->_impl_.orderid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BorrowOrderInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_com_5flibrary_2eproto_getter, &descriptor_table_com_5flibrary_2eproto_once,
      file_level_metadata_com_5flibrary_2eproto[3]);
}

// ===================================================================

class MemberInfo::_Internal {
 public:
};

MemberInfo::MemberInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CRYSTAL_NET.service.MemberInfo)
}
MemberInfo::MemberInfo(const MemberInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MemberInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.borrowlist_){from._impl_.borrowlist_}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.userid_){}
    , decltype(_impl_.locktimestampms_){}
    , decltype(_impl_.role_){}
    , decltype(_impl_.MemberBindPhone_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.userid_, &from._impl_.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.role_) -
    reinterpret_cast<char*>(&_impl_.userid_)) + sizeof(_impl_.role_));
  clear_has_MemberBindPhone();
  switch (from.MemberBindPhone_case()) {
    case kBindPhone: {
      _this->_internal_set_bindphone(from._internal_bindphone());
      break;
    }
    case MEMBERBINDPHONE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CRYSTAL_NET.service.MemberInfo)
}

inline void MemberInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.borrowlist_){arena}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.userid_){uint64_t{0u}}
    , decltype(_impl_.locktimestampms_){int64_t{0}}
    , decltype(_impl_.role_){0}
    , decltype(_impl_.MemberBindPhone_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_MemberBindPhone();
}

MemberInfo::~MemberInfo() {
  // @@protoc_insertion_point(destructor:CRYSTAL_NET.service.MemberInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MemberInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.borrowlist_.~RepeatedPtrField();
  _impl_.nickname_.Destroy();
  if (has_MemberBindPhone()) {
    clear_MemberBindPhone();
  }
}

void MemberInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MemberInfo::clear_MemberBindPhone() {
// @@protoc_insertion_point(one_of_clear_start:CRYSTAL_NET.service.MemberInfo)
  switch (MemberBindPhone_case()) {
    case kBindPhone: {
      // No need to clear
      break;
    }
    case MEMBERBINDPHONE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MEMBERBINDPHONE_NOT_SET;
}


void MemberInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CRYSTAL_NET.service.MemberInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.borrowlist_.Clear();
  _impl_.nickname_.ClearToEmpty();
  ::memset(&_impl_.userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.role_) -
      reinterpret_cast<char*>(&_impl_.userid_)) + sizeof(_impl_.role_));
  clear_MemberBindPhone();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemberInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 UserId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 Role = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.role_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Nickname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CRYSTAL_NET.service.MemberInfo.Nickname"));
        } else
          goto handle_unusual;
        continue;
      // repeated .CRYSTAL_NET.service.BorrowOrderInfo BorrowList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_borrowlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // sint64 LockTimestampMs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.locktimestampms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 BindPhone = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _internal_set_bindphone(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MemberInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRYSTAL_NET.service.MemberInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 UserId = 1;
  if (this->_internal_userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_userid(), target);
  }

  // sint32 Role = 2;
  if (this->_internal_role() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_role(), target);
  }

  // string Nickname = 3;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CRYSTAL_NET.service.MemberInfo.Nickname");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_nickname(), target);
  }

  // repeated .CRYSTAL_NET.service.BorrowOrderInfo BorrowList = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_borrowlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_borrowlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // sint64 LockTimestampMs = 5;
  if (this->_internal_locktimestampms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(5, this->_internal_locktimestampms(), target);
  }

  // uint64 BindPhone = 6;
  if (_internal_has_bindphone()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_bindphone(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRYSTAL_NET.service.MemberInfo)
  return target;
}

size_t MemberInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRYSTAL_NET.service.MemberInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CRYSTAL_NET.service.BorrowOrderInfo BorrowList = 4;
  total_size += 1UL * this->_internal_borrowlist_size();
  for (const auto& msg : this->_impl_.borrowlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string Nickname = 3;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // uint64 UserId = 1;
  if (this->_internal_userid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_userid());
  }

  // sint64 LockTimestampMs = 5;
  if (this->_internal_locktimestampms() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_locktimestampms());
  }

  // sint32 Role = 2;
  if (this->_internal_role() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_role());
  }

  switch (MemberBindPhone_case()) {
    // uint64 BindPhone = 6;
    case kBindPhone: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bindphone());
      break;
    }
    case MEMBERBINDPHONE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MemberInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MemberInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MemberInfo::GetClassData() const { return &_class_data_; }


void MemberInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MemberInfo*>(&to_msg);
  auto& from = static_cast<const MemberInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CRYSTAL_NET.service.MemberInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.borrowlist_.MergeFrom(from._impl_.borrowlist_);
  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  if (from._internal_userid() != 0) {
    _this->_internal_set_userid(from._internal_userid());
  }
  if (from._internal_locktimestampms() != 0) {
    _this->_internal_set_locktimestampms(from._internal_locktimestampms());
  }
  if (from._internal_role() != 0) {
    _this->_internal_set_role(from._internal_role());
  }
  switch (from.MemberBindPhone_case()) {
    case kBindPhone: {
      _this->_internal_set_bindphone(from._internal_bindphone());
      break;
    }
    case MEMBERBINDPHONE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MemberInfo::CopyFrom(const MemberInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRYSTAL_NET.service.MemberInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberInfo::IsInitialized() const {
  return true;
}

void MemberInfo::InternalSwap(MemberInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.borrowlist_.InternalSwap(&other->_impl_.borrowlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemberInfo, _impl_.role_)
      + sizeof(MemberInfo::_impl_.role_)
      - PROTOBUF_FIELD_OFFSET(MemberInfo, _impl_.userid_)>(
          reinterpret_cast<char*>(&_impl_.userid_),
          reinterpret_cast<char*>(&other->_impl_.userid_));
  swap(_impl_.MemberBindPhone_, other->_impl_.MemberBindPhone_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemberInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_com_5flibrary_2eproto_getter, &descriptor_table_com_5flibrary_2eproto_once,
      file_level_metadata_com_5flibrary_2eproto[4]);
}

// ===================================================================

class VariantParamType::_Internal {
 public:
};

VariantParamType::VariantParamType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CRYSTAL_NET.service.VariantParamType)
}
VariantParamType::VariantParamType(const VariantParamType& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  VariantParamType* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CRYSTAL_NET.service.VariantParamType)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VariantParamType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VariantParamType::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata VariantParamType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_com_5flibrary_2eproto_getter, &descriptor_table_com_5flibrary_2eproto_once,
      file_level_metadata_com_5flibrary_2eproto[5]);
}

// ===================================================================

class VariantParam::_Internal {
 public:
};

VariantParam::VariantParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CRYSTAL_NET.service.VariantParam)
}
VariantParam::VariantParam(const VariantParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VariantParam* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.paramtype_){}
    , decltype(_impl_.ParamValue_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.paramtype_ = from._impl_.paramtype_;
  clear_has_ParamValue();
  switch (from.ParamValue_case()) {
    case kNumber: {
      _this->_internal_set_number(from._internal_number());
      break;
    }
    case kStr: {
      _this->_internal_set_str(from._internal_str());
      break;
    }
    case PARAMVALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CRYSTAL_NET.service.VariantParam)
}

inline void VariantParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.paramtype_){0}
    , decltype(_impl_.ParamValue_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_ParamValue();
}

VariantParam::~VariantParam() {
  // @@protoc_insertion_point(destructor:CRYSTAL_NET.service.VariantParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VariantParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_ParamValue()) {
    clear_ParamValue();
  }
}

void VariantParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VariantParam::clear_ParamValue() {
// @@protoc_insertion_point(one_of_clear_start:CRYSTAL_NET.service.VariantParam)
  switch (ParamValue_case()) {
    case kNumber: {
      // No need to clear
      break;
    }
    case kStr: {
      _impl_.ParamValue_.str_.Destroy();
      break;
    }
    case PARAMVALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PARAMVALUE_NOT_SET;
}


void VariantParam::Clear() {
// @@protoc_insertion_point(message_clear_start:CRYSTAL_NET.service.VariantParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.paramtype_ = 0;
  clear_ParamValue();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VariantParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 ParamType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.paramtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 Number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_number(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Str = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CRYSTAL_NET.service.VariantParam.Str"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VariantParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRYSTAL_NET.service.VariantParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 ParamType = 1;
  if (this->_internal_paramtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_paramtype(), target);
  }

  // sint64 Number = 2;
  if (_internal_has_number()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(2, this->_internal_number(), target);
  }

  // string Str = 3;
  if (_internal_has_str()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str().data(), static_cast<int>(this->_internal_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CRYSTAL_NET.service.VariantParam.Str");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRYSTAL_NET.service.VariantParam)
  return target;
}

size_t VariantParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRYSTAL_NET.service.VariantParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 ParamType = 1;
  if (this->_internal_paramtype() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_paramtype());
  }

  switch (ParamValue_case()) {
    // sint64 Number = 2;
    case kNumber: {
      total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_number());
      break;
    }
    // string Str = 3;
    case kStr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str());
      break;
    }
    case PARAMVALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VariantParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VariantParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VariantParam::GetClassData() const { return &_class_data_; }


void VariantParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VariantParam*>(&to_msg);
  auto& from = static_cast<const VariantParam&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CRYSTAL_NET.service.VariantParam)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_paramtype() != 0) {
    _this->_internal_set_paramtype(from._internal_paramtype());
  }
  switch (from.ParamValue_case()) {
    case kNumber: {
      _this->_internal_set_number(from._internal_number());
      break;
    }
    case kStr: {
      _this->_internal_set_str(from._internal_str());
      break;
    }
    case PARAMVALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VariantParam::CopyFrom(const VariantParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRYSTAL_NET.service.VariantParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariantParam::IsInitialized() const {
  return true;
}

void VariantParam::InternalSwap(VariantParam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.paramtype_, other->_impl_.paramtype_);
  swap(_impl_.ParamValue_, other->_impl_.ParamValue_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata VariantParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_com_5flibrary_2eproto_getter, &descriptor_table_com_5flibrary_2eproto_once,
      file_level_metadata_com_5flibrary_2eproto[6]);
}

// ===================================================================

class OperationType::_Internal {
 public:
};

OperationType::OperationType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CRYSTAL_NET.service.OperationType)
}
OperationType::OperationType(const OperationType& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  OperationType* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CRYSTAL_NET.service.OperationType)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationType::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata OperationType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_com_5flibrary_2eproto_getter, &descriptor_table_com_5flibrary_2eproto_once,
      file_level_metadata_com_5flibrary_2eproto[7]);
}

// ===================================================================

class OperationLogInfo::_Internal {
 public:
};

OperationLogInfo::OperationLogInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CRYSTAL_NET.service.OperationLogInfo)
}
OperationLogInfo::OperationLogInfo(const OperationLogInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OperationLogInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.params_){from._impl_.params_}
    , decltype(_impl_.opnickname_){}
    , decltype(_impl_.opuserid_){}
    , decltype(_impl_.optype_){}
    , decltype(_impl_.role_){}
    , decltype(_impl_.optimems_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.opnickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.opnickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_opnickname().empty()) {
    _this->_impl_.opnickname_.Set(from._internal_opnickname(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.opuserid_, &from._impl_.opuserid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.optimems_) -
    reinterpret_cast<char*>(&_impl_.opuserid_)) + sizeof(_impl_.optimems_));
  // @@protoc_insertion_point(copy_constructor:CRYSTAL_NET.service.OperationLogInfo)
}

inline void OperationLogInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.params_){arena}
    , decltype(_impl_.opnickname_){}
    , decltype(_impl_.opuserid_){uint64_t{0u}}
    , decltype(_impl_.optype_){0}
    , decltype(_impl_.role_){0}
    , decltype(_impl_.optimems_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.opnickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.opnickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OperationLogInfo::~OperationLogInfo() {
  // @@protoc_insertion_point(destructor:CRYSTAL_NET.service.OperationLogInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OperationLogInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.params_.~RepeatedPtrField();
  _impl_.opnickname_.Destroy();
}

void OperationLogInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OperationLogInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CRYSTAL_NET.service.OperationLogInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.params_.Clear();
  _impl_.opnickname_.ClearToEmpty();
  ::memset(&_impl_.opuserid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.optimems_) -
      reinterpret_cast<char*>(&_impl_.opuserid_)) + sizeof(_impl_.optimems_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationLogInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 OpType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.optype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 OpUserId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.opuserid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string OpNickname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_opnickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CRYSTAL_NET.service.OperationLogInfo.OpNickname"));
        } else
          goto handle_unusual;
        continue;
      // sint32 Role = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.role_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 OpTimeMs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.optimems_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CRYSTAL_NET.service.VariantParam Params = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperationLogInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRYSTAL_NET.service.OperationLogInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 OpType = 1;
  if (this->_internal_optype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_optype(), target);
  }

  // uint64 OpUserId = 2;
  if (this->_internal_opuserid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_opuserid(), target);
  }

  // string OpNickname = 3;
  if (!this->_internal_opnickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_opnickname().data(), static_cast<int>(this->_internal_opnickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CRYSTAL_NET.service.OperationLogInfo.OpNickname");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_opnickname(), target);
  }

  // sint32 Role = 4;
  if (this->_internal_role() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(4, this->_internal_role(), target);
  }

  // sint64 OpTimeMs = 5;
  if (this->_internal_optimems() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(5, this->_internal_optimems(), target);
  }

  // repeated .CRYSTAL_NET.service.VariantParam Params = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_params_size()); i < n; i++) {
    const auto& repfield = this->_internal_params(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRYSTAL_NET.service.OperationLogInfo)
  return target;
}

size_t OperationLogInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRYSTAL_NET.service.OperationLogInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CRYSTAL_NET.service.VariantParam Params = 6;
  total_size += 1UL * this->_internal_params_size();
  for (const auto& msg : this->_impl_.params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string OpNickname = 3;
  if (!this->_internal_opnickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_opnickname());
  }

  // uint64 OpUserId = 2;
  if (this->_internal_opuserid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_opuserid());
  }

  // sint32 OpType = 1;
  if (this->_internal_optype() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_optype());
  }

  // sint32 Role = 4;
  if (this->_internal_role() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_role());
  }

  // sint64 OpTimeMs = 5;
  if (this->_internal_optimems() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_optimems());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationLogInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OperationLogInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationLogInfo::GetClassData() const { return &_class_data_; }


void OperationLogInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OperationLogInfo*>(&to_msg);
  auto& from = static_cast<const OperationLogInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CRYSTAL_NET.service.OperationLogInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.params_.MergeFrom(from._impl_.params_);
  if (!from._internal_opnickname().empty()) {
    _this->_internal_set_opnickname(from._internal_opnickname());
  }
  if (from._internal_opuserid() != 0) {
    _this->_internal_set_opuserid(from._internal_opuserid());
  }
  if (from._internal_optype() != 0) {
    _this->_internal_set_optype(from._internal_optype());
  }
  if (from._internal_role() != 0) {
    _this->_internal_set_role(from._internal_role());
  }
  if (from._internal_optimems() != 0) {
    _this->_internal_set_optimems(from._internal_optimems());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationLogInfo::CopyFrom(const OperationLogInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRYSTAL_NET.service.OperationLogInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationLogInfo::IsInitialized() const {
  return true;
}

void OperationLogInfo::InternalSwap(OperationLogInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.params_.InternalSwap(&other->_impl_.params_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.opnickname_, lhs_arena,
      &other->_impl_.opnickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OperationLogInfo, _impl_.optimems_)
      + sizeof(OperationLogInfo::_impl_.optimems_)
      - PROTOBUF_FIELD_OFFSET(OperationLogInfo, _impl_.opuserid_)>(
          reinterpret_cast<char*>(&_impl_.opuserid_),
          reinterpret_cast<char*>(&other->_impl_.opuserid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationLogInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_com_5flibrary_2eproto_getter, &descriptor_table_com_5flibrary_2eproto_once,
      file_level_metadata_com_5flibrary_2eproto[8]);
}

// ===================================================================

class LibraryInfo::_Internal {
 public:
};

void LibraryInfo::clear_booklist() {
  _impl_.booklist_.Clear();
}
LibraryInfo::LibraryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CRYSTAL_NET.service.LibraryInfo)
}
LibraryInfo::LibraryInfo(const LibraryInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LibraryInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.managerinfolist_){from._impl_.managerinfolist_}
    , decltype(_impl_.memberlist_){from._impl_.memberlist_}
    , decltype(_impl_.booklist_){from._impl_.booklist_}
    , decltype(_impl_.loginfolist_){from._impl_.loginfolist_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.address_){}
    , decltype(_impl_.opentime_){}
    , decltype(_impl_.telphonenumber_){}
    , decltype(_impl_.librarianusernickname_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.librarianuserid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.opentime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.opentime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_opentime().empty()) {
    _this->_impl_.opentime_.Set(from._internal_opentime(), 
      _this->GetArenaForAllocation());
  }
  _impl_.telphonenumber_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.telphonenumber_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_telphonenumber().empty()) {
    _this->_impl_.telphonenumber_.Set(from._internal_telphonenumber(), 
      _this->GetArenaForAllocation());
  }
  _impl_.librarianusernickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.librarianusernickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_librarianusernickname().empty()) {
    _this->_impl_.librarianusernickname_.Set(from._internal_librarianusernickname(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.librarianuserid_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.librarianuserid_));
  // @@protoc_insertion_point(copy_constructor:CRYSTAL_NET.service.LibraryInfo)
}

inline void LibraryInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.managerinfolist_){arena}
    , decltype(_impl_.memberlist_){arena}
    , decltype(_impl_.booklist_){arena}
    , decltype(_impl_.loginfolist_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.address_){}
    , decltype(_impl_.opentime_){}
    , decltype(_impl_.telphonenumber_){}
    , decltype(_impl_.librarianusernickname_){}
    , decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.librarianuserid_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.opentime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.opentime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.telphonenumber_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.telphonenumber_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.librarianusernickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.librarianusernickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LibraryInfo::~LibraryInfo() {
  // @@protoc_insertion_point(destructor:CRYSTAL_NET.service.LibraryInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LibraryInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.managerinfolist_.~RepeatedPtrField();
  _impl_.memberlist_.~RepeatedPtrField();
  _impl_.booklist_.~RepeatedPtrField();
  _impl_.loginfolist_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.address_.Destroy();
  _impl_.opentime_.Destroy();
  _impl_.telphonenumber_.Destroy();
  _impl_.librarianusernickname_.Destroy();
}

void LibraryInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LibraryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CRYSTAL_NET.service.LibraryInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.managerinfolist_.Clear();
  _impl_.memberlist_.Clear();
  _impl_.booklist_.Clear();
  _impl_.loginfolist_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.address_.ClearToEmpty();
  _impl_.opentime_.ClearToEmpty();
  _impl_.telphonenumber_.ClearToEmpty();
  _impl_.librarianusernickname_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.librarianuserid_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.librarianuserid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LibraryInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CRYSTAL_NET.service.LibraryInfo.Name"));
        } else
          goto handle_unusual;
        continue;
      // string Address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CRYSTAL_NET.service.LibraryInfo.Address"));
        } else
          goto handle_unusual;
        continue;
      // string OpenTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_opentime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CRYSTAL_NET.service.LibraryInfo.OpenTime"));
        } else
          goto handle_unusual;
        continue;
      // string TelphoneNumber = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_telphonenumber();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CRYSTAL_NET.service.LibraryInfo.TelphoneNumber"));
        } else
          goto handle_unusual;
        continue;
      // uint64 LibrarianUserId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.librarianuserid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string LibrarianUserNickname = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_librarianusernickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CRYSTAL_NET.service.LibraryInfo.LibrarianUserNickname"));
        } else
          goto handle_unusual;
        continue;
      // repeated .CRYSTAL_NET.service.LibararyManagerInfo ManagerInfoList = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_managerinfolist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CRYSTAL_NET.service.MemberInfo MemberList = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_memberlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CRYSTAL_NET.service.BookInfo BookList = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_booklist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CRYSTAL_NET.service.OperationLogInfo LogInfoList = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_loginfolist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LibraryInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRYSTAL_NET.service.LibraryInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // string Name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CRYSTAL_NET.service.LibraryInfo.Name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string Address = 3;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CRYSTAL_NET.service.LibraryInfo.Address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_address(), target);
  }

  // string OpenTime = 4;
  if (!this->_internal_opentime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_opentime().data(), static_cast<int>(this->_internal_opentime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CRYSTAL_NET.service.LibraryInfo.OpenTime");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_opentime(), target);
  }

  // string TelphoneNumber = 5;
  if (!this->_internal_telphonenumber().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_telphonenumber().data(), static_cast<int>(this->_internal_telphonenumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CRYSTAL_NET.service.LibraryInfo.TelphoneNumber");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_telphonenumber(), target);
  }

  // uint64 LibrarianUserId = 6;
  if (this->_internal_librarianuserid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_librarianuserid(), target);
  }

  // string LibrarianUserNickname = 7;
  if (!this->_internal_librarianusernickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_librarianusernickname().data(), static_cast<int>(this->_internal_librarianusernickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CRYSTAL_NET.service.LibraryInfo.LibrarianUserNickname");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_librarianusernickname(), target);
  }

  // repeated .CRYSTAL_NET.service.LibararyManagerInfo ManagerInfoList = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_managerinfolist_size()); i < n; i++) {
    const auto& repfield = this->_internal_managerinfolist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CRYSTAL_NET.service.MemberInfo MemberList = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_memberlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_memberlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CRYSTAL_NET.service.BookInfo BookList = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_booklist_size()); i < n; i++) {
    const auto& repfield = this->_internal_booklist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CRYSTAL_NET.service.OperationLogInfo LogInfoList = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_loginfolist_size()); i < n; i++) {
    const auto& repfield = this->_internal_loginfolist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRYSTAL_NET.service.LibraryInfo)
  return target;
}

size_t LibraryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRYSTAL_NET.service.LibraryInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CRYSTAL_NET.service.LibararyManagerInfo ManagerInfoList = 8;
  total_size += 1UL * this->_internal_managerinfolist_size();
  for (const auto& msg : this->_impl_.managerinfolist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CRYSTAL_NET.service.MemberInfo MemberList = 9;
  total_size += 1UL * this->_internal_memberlist_size();
  for (const auto& msg : this->_impl_.memberlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CRYSTAL_NET.service.BookInfo BookList = 10;
  total_size += 1UL * this->_internal_booklist_size();
  for (const auto& msg : this->_impl_.booklist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CRYSTAL_NET.service.OperationLogInfo LogInfoList = 11;
  total_size += 1UL * this->_internal_loginfolist_size();
  for (const auto& msg : this->_impl_.loginfolist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string Name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string Address = 3;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string OpenTime = 4;
  if (!this->_internal_opentime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_opentime());
  }

  // string TelphoneNumber = 5;
  if (!this->_internal_telphonenumber().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_telphonenumber());
  }

  // string LibrarianUserNickname = 7;
  if (!this->_internal_librarianusernickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_librarianusernickname());
  }

  // uint64 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  // uint64 LibrarianUserId = 6;
  if (this->_internal_librarianuserid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_librarianuserid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LibraryInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LibraryInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LibraryInfo::GetClassData() const { return &_class_data_; }


void LibraryInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LibraryInfo*>(&to_msg);
  auto& from = static_cast<const LibraryInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CRYSTAL_NET.service.LibraryInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.managerinfolist_.MergeFrom(from._impl_.managerinfolist_);
  _this->_impl_.memberlist_.MergeFrom(from._impl_.memberlist_);
  _this->_impl_.booklist_.MergeFrom(from._impl_.booklist_);
  _this->_impl_.loginfolist_.MergeFrom(from._impl_.loginfolist_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (!from._internal_opentime().empty()) {
    _this->_internal_set_opentime(from._internal_opentime());
  }
  if (!from._internal_telphonenumber().empty()) {
    _this->_internal_set_telphonenumber(from._internal_telphonenumber());
  }
  if (!from._internal_librarianusernickname().empty()) {
    _this->_internal_set_librarianusernickname(from._internal_librarianusernickname());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_librarianuserid() != 0) {
    _this->_internal_set_librarianuserid(from._internal_librarianuserid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LibraryInfo::CopyFrom(const LibraryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRYSTAL_NET.service.LibraryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LibraryInfo::IsInitialized() const {
  return true;
}

void LibraryInfo::InternalSwap(LibraryInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.managerinfolist_.InternalSwap(&other->_impl_.managerinfolist_);
  _impl_.memberlist_.InternalSwap(&other->_impl_.memberlist_);
  _impl_.booklist_.InternalSwap(&other->_impl_.booklist_);
  _impl_.loginfolist_.InternalSwap(&other->_impl_.loginfolist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.opentime_, lhs_arena,
      &other->_impl_.opentime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.telphonenumber_, lhs_arena,
      &other->_impl_.telphonenumber_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.librarianusernickname_, lhs_arena,
      &other->_impl_.librarianusernickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LibraryInfo, _impl_.librarianuserid_)
      + sizeof(LibraryInfo::_impl_.librarianuserid_)
      - PROTOBUF_FIELD_OFFSET(LibraryInfo, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LibraryInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_com_5flibrary_2eproto_getter, &descriptor_table_com_5flibrary_2eproto_once,
      file_level_metadata_com_5flibrary_2eproto[9]);
}

// ===================================================================

class UserLibraryInfo::_Internal {
 public:
};

UserLibraryInfo::UserLibraryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CRYSTAL_NET.service.UserLibraryInfo)
}
UserLibraryInfo::UserLibraryInfo(const UserLibraryInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserLibraryInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.libraryid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.libraryid_ = from._impl_.libraryid_;
  // @@protoc_insertion_point(copy_constructor:CRYSTAL_NET.service.UserLibraryInfo)
}

inline void UserLibraryInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.libraryid_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UserLibraryInfo::~UserLibraryInfo() {
  // @@protoc_insertion_point(destructor:CRYSTAL_NET.service.UserLibraryInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserLibraryInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UserLibraryInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserLibraryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CRYSTAL_NET.service.UserLibraryInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.libraryid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserLibraryInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 LibraryId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.libraryid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserLibraryInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRYSTAL_NET.service.UserLibraryInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 LibraryId = 1;
  if (this->_internal_libraryid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_libraryid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRYSTAL_NET.service.UserLibraryInfo)
  return target;
}

size_t UserLibraryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRYSTAL_NET.service.UserLibraryInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 LibraryId = 1;
  if (this->_internal_libraryid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_libraryid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserLibraryInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserLibraryInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserLibraryInfo::GetClassData() const { return &_class_data_; }


void UserLibraryInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserLibraryInfo*>(&to_msg);
  auto& from = static_cast<const UserLibraryInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CRYSTAL_NET.service.UserLibraryInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_libraryid() != 0) {
    _this->_internal_set_libraryid(from._internal_libraryid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserLibraryInfo::CopyFrom(const UserLibraryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRYSTAL_NET.service.UserLibraryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLibraryInfo::IsInitialized() const {
  return true;
}

void UserLibraryInfo::InternalSwap(UserLibraryInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.libraryid_, other->_impl_.libraryid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserLibraryInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_com_5flibrary_2eproto_getter, &descriptor_table_com_5flibrary_2eproto_once,
      file_level_metadata_com_5flibrary_2eproto[10]);
}

// ===================================================================

class LibraryPreviewInfo::_Internal {
 public:
};

LibraryPreviewInfo::LibraryPreviewInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CRYSTAL_NET.service.LibraryPreviewInfo)
}
LibraryPreviewInfo::LibraryPreviewInfo(const LibraryPreviewInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LibraryPreviewInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.librariannickname_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.librarianuserid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.librariannickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.librariannickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_librariannickname().empty()) {
    _this->_impl_.librariannickname_.Set(from._internal_librariannickname(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.librarianuserid_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.librarianuserid_));
  // @@protoc_insertion_point(copy_constructor:CRYSTAL_NET.service.LibraryPreviewInfo)
}

inline void LibraryPreviewInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.librariannickname_){}
    , decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.librarianuserid_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.librariannickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.librariannickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LibraryPreviewInfo::~LibraryPreviewInfo() {
  // @@protoc_insertion_point(destructor:CRYSTAL_NET.service.LibraryPreviewInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LibraryPreviewInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.librariannickname_.Destroy();
}

void LibraryPreviewInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LibraryPreviewInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CRYSTAL_NET.service.LibraryPreviewInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.librariannickname_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.librarianuserid_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.librarianuserid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LibraryPreviewInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CRYSTAL_NET.service.LibraryPreviewInfo.Name"));
        } else
          goto handle_unusual;
        continue;
      // uint64 LibrarianUserId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.librarianuserid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string LibrarianNickname = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_librariannickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CRYSTAL_NET.service.LibraryPreviewInfo.LibrarianNickname"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LibraryPreviewInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CRYSTAL_NET.service.LibraryPreviewInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // string Name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CRYSTAL_NET.service.LibraryPreviewInfo.Name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint64 LibrarianUserId = 3;
  if (this->_internal_librarianuserid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_librarianuserid(), target);
  }

  // string LibrarianNickname = 4;
  if (!this->_internal_librariannickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_librariannickname().data(), static_cast<int>(this->_internal_librariannickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CRYSTAL_NET.service.LibraryPreviewInfo.LibrarianNickname");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_librariannickname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CRYSTAL_NET.service.LibraryPreviewInfo)
  return target;
}

size_t LibraryPreviewInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CRYSTAL_NET.service.LibraryPreviewInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string LibrarianNickname = 4;
  if (!this->_internal_librariannickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_librariannickname());
  }

  // uint64 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  // uint64 LibrarianUserId = 3;
  if (this->_internal_librarianuserid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_librarianuserid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LibraryPreviewInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LibraryPreviewInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LibraryPreviewInfo::GetClassData() const { return &_class_data_; }


void LibraryPreviewInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LibraryPreviewInfo*>(&to_msg);
  auto& from = static_cast<const LibraryPreviewInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CRYSTAL_NET.service.LibraryPreviewInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_librariannickname().empty()) {
    _this->_internal_set_librariannickname(from._internal_librariannickname());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_librarianuserid() != 0) {
    _this->_internal_set_librarianuserid(from._internal_librarianuserid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LibraryPreviewInfo::CopyFrom(const LibraryPreviewInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CRYSTAL_NET.service.LibraryPreviewInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LibraryPreviewInfo::IsInitialized() const {
  return true;
}

void LibraryPreviewInfo::InternalSwap(LibraryPreviewInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.librariannickname_, lhs_arena,
      &other->_impl_.librariannickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LibraryPreviewInfo, _impl_.librarianuserid_)
      + sizeof(LibraryPreviewInfo::_impl_.librarianuserid_)
      - PROTOBUF_FIELD_OFFSET(LibraryPreviewInfo, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LibraryPreviewInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_com_5flibrary_2eproto_getter, &descriptor_table_com_5flibrary_2eproto_once,
      file_level_metadata_com_5flibrary_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace service
}  // namespace CRYSTAL_NET
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CRYSTAL_NET::service::RoleType*
Arena::CreateMaybeMessage< ::CRYSTAL_NET::service::RoleType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRYSTAL_NET::service::RoleType >(arena);
}
template<> PROTOBUF_NOINLINE ::CRYSTAL_NET::service::LibararyManagerInfo*
Arena::CreateMaybeMessage< ::CRYSTAL_NET::service::LibararyManagerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRYSTAL_NET::service::LibararyManagerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CRYSTAL_NET::service::BorrowBookInfo*
Arena::CreateMaybeMessage< ::CRYSTAL_NET::service::BorrowBookInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRYSTAL_NET::service::BorrowBookInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CRYSTAL_NET::service::BorrowOrderInfo*
Arena::CreateMaybeMessage< ::CRYSTAL_NET::service::BorrowOrderInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRYSTAL_NET::service::BorrowOrderInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CRYSTAL_NET::service::MemberInfo*
Arena::CreateMaybeMessage< ::CRYSTAL_NET::service::MemberInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRYSTAL_NET::service::MemberInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CRYSTAL_NET::service::VariantParamType*
Arena::CreateMaybeMessage< ::CRYSTAL_NET::service::VariantParamType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRYSTAL_NET::service::VariantParamType >(arena);
}
template<> PROTOBUF_NOINLINE ::CRYSTAL_NET::service::VariantParam*
Arena::CreateMaybeMessage< ::CRYSTAL_NET::service::VariantParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRYSTAL_NET::service::VariantParam >(arena);
}
template<> PROTOBUF_NOINLINE ::CRYSTAL_NET::service::OperationType*
Arena::CreateMaybeMessage< ::CRYSTAL_NET::service::OperationType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRYSTAL_NET::service::OperationType >(arena);
}
template<> PROTOBUF_NOINLINE ::CRYSTAL_NET::service::OperationLogInfo*
Arena::CreateMaybeMessage< ::CRYSTAL_NET::service::OperationLogInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRYSTAL_NET::service::OperationLogInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CRYSTAL_NET::service::LibraryInfo*
Arena::CreateMaybeMessage< ::CRYSTAL_NET::service::LibraryInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRYSTAL_NET::service::LibraryInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CRYSTAL_NET::service::UserLibraryInfo*
Arena::CreateMaybeMessage< ::CRYSTAL_NET::service::UserLibraryInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRYSTAL_NET::service::UserLibraryInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CRYSTAL_NET::service::LibraryPreviewInfo*
Arena::CreateMaybeMessage< ::CRYSTAL_NET::service::LibraryPreviewInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CRYSTAL_NET::service::LibraryPreviewInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
