// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bookbag.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bookbag_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bookbag_2eproto

// KERNEL_INCLUDED
#include <kernel/kernel.h>
#include <service_common/ServiceCommon.h>
#include <google/protobuf/util/json_util.h>
#include <google/protobuf/text_format.h>

#ifdef GetMessage
 #undef GetMessage
#endif


#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "com_bookbag.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bookbag_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bookbag_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bookbag_2eproto;
namespace CRYSTAL_NET {
namespace service {
class BookBagInfoNty;
struct BookBagInfoNtyDefaultTypeInternal;
extern BookBagInfoNtyDefaultTypeInternal _BookBagInfoNty_default_instance_;
class BookBagInfoReq;
struct BookBagInfoReqDefaultTypeInternal;
extern BookBagInfoReqDefaultTypeInternal _BookBagInfoReq_default_instance_;
class BookBagInfoRes;
struct BookBagInfoResDefaultTypeInternal;
extern BookBagInfoResDefaultTypeInternal _BookBagInfoRes_default_instance_;
class BookInfoItemChangeNty;
struct BookInfoItemChangeNtyDefaultTypeInternal;
extern BookInfoItemChangeNtyDefaultTypeInternal _BookInfoItemChangeNty_default_instance_;
class SetBookBagInfoReq;
struct SetBookBagInfoReqDefaultTypeInternal;
extern SetBookBagInfoReqDefaultTypeInternal _SetBookBagInfoReq_default_instance_;
class SetBookBagInfoRes;
struct SetBookBagInfoResDefaultTypeInternal;
extern SetBookBagInfoResDefaultTypeInternal _SetBookBagInfoRes_default_instance_;
}  // namespace service
}  // namespace CRYSTAL_NET
PROTOBUF_NAMESPACE_OPEN
template<> ::CRYSTAL_NET::service::BookBagInfoNty* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::BookBagInfoNty>(Arena*);
template<> ::CRYSTAL_NET::service::BookBagInfoReq* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::BookBagInfoReq>(Arena*);
template<> ::CRYSTAL_NET::service::BookBagInfoRes* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::BookBagInfoRes>(Arena*);
template<> ::CRYSTAL_NET::service::BookInfoItemChangeNty* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::BookInfoItemChangeNty>(Arena*);
template<> ::CRYSTAL_NET::service::SetBookBagInfoReq* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::SetBookBagInfoReq>(Arena*);
template<> ::CRYSTAL_NET::service::SetBookBagInfoRes* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::SetBookBagInfoRes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CRYSTAL_NET {
namespace service {

// ===================================================================

// AnnotaionInfo[opcode(80), nolog(false), XorEncrypt(false), KeyBase64(false)]
class BookBagInfoReq final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.BookBagInfoReq) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message BookBagInfoReq failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message BookBagInfoReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message BookBagInfoReq failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message BookBagInfoReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message BookBagInfoReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message BookBagInfoReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline BookBagInfoReq() : BookBagInfoReq(nullptr) {}
  explicit PROTOBUF_CONSTEXPR BookBagInfoReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BookBagInfoReq(const BookBagInfoReq& from);
  BookBagInfoReq(BookBagInfoReq&& from) noexcept
    : BookBagInfoReq() {
    *this = ::std::move(from);
  }

  inline BookBagInfoReq& operator=(const BookBagInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline BookBagInfoReq& operator=(BookBagInfoReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BookBagInfoReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const BookBagInfoReq* internal_default_instance() {
    return reinterpret_cast<const BookBagInfoReq*>(
               &_BookBagInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BookBagInfoReq& a, BookBagInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(BookBagInfoReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BookBagInfoReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BookBagInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BookBagInfoReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const BookBagInfoReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const BookBagInfoReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.BookBagInfoReq";
  }
  protected:
  explicit BookBagInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.BookBagInfoReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_bookbag_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(81), nolog(false), XorEncrypt(false), KeyBase64(false)]
class BookBagInfoNty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.BookBagInfoNty) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message BookBagInfoNty failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message BookBagInfoNty failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message BookBagInfoNty failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message BookBagInfoNty failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message BookBagInfoNty failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message BookBagInfoNty failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline BookBagInfoNty() : BookBagInfoNty(nullptr) {}
  ~BookBagInfoNty() override;
  explicit PROTOBUF_CONSTEXPR BookBagInfoNty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BookBagInfoNty(const BookBagInfoNty& from);
  BookBagInfoNty(BookBagInfoNty&& from) noexcept
    : BookBagInfoNty() {
    *this = ::std::move(from);
  }

  inline BookBagInfoNty& operator=(const BookBagInfoNty& from) {
    CopyFrom(from);
    return *this;
  }
  inline BookBagInfoNty& operator=(BookBagInfoNty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BookBagInfoNty& default_instance() {
    return *internal_default_instance();
  }
  static inline const BookBagInfoNty* internal_default_instance() {
    return reinterpret_cast<const BookBagInfoNty*>(
               &_BookBagInfoNty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BookBagInfoNty& a, BookBagInfoNty& b) {
    a.Swap(&b);
  }
  inline void Swap(BookBagInfoNty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BookBagInfoNty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BookBagInfoNty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BookBagInfoNty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BookBagInfoNty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BookBagInfoNty& from) {
    BookBagInfoNty::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BookBagInfoNty* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.BookBagInfoNty";
  }
  protected:
  explicit BookBagInfoNty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBookBagInfoFieldNumber = 1,
  };
  // .CRYSTAL_NET.service.BookBagInfo BookBagInfo = 1;
  bool has_bookbaginfo() const;
  private:
  bool _internal_has_bookbaginfo() const;
  public:
  void clear_bookbaginfo();
  const ::CRYSTAL_NET::service::BookBagInfo& bookbaginfo() const;
  PROTOBUF_NODISCARD ::CRYSTAL_NET::service::BookBagInfo* release_bookbaginfo();
  ::CRYSTAL_NET::service::BookBagInfo* mutable_bookbaginfo();
  void set_allocated_bookbaginfo(::CRYSTAL_NET::service::BookBagInfo* bookbaginfo);
  private:
  const ::CRYSTAL_NET::service::BookBagInfo& _internal_bookbaginfo() const;
  ::CRYSTAL_NET::service::BookBagInfo* _internal_mutable_bookbaginfo();
  public:
  void unsafe_arena_set_allocated_bookbaginfo(
      ::CRYSTAL_NET::service::BookBagInfo* bookbaginfo);
  ::CRYSTAL_NET::service::BookBagInfo* unsafe_arena_release_bookbaginfo();

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.BookBagInfoNty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::CRYSTAL_NET::service::BookBagInfo* bookbaginfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bookbag_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(82), nolog(false), XorEncrypt(false), KeyBase64(false)]
class BookBagInfoRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.BookBagInfoRes) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message BookBagInfoRes failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message BookBagInfoRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message BookBagInfoRes failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message BookBagInfoRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message BookBagInfoRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message BookBagInfoRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline BookBagInfoRes() : BookBagInfoRes(nullptr) {}
  ~BookBagInfoRes() override;
  explicit PROTOBUF_CONSTEXPR BookBagInfoRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BookBagInfoRes(const BookBagInfoRes& from);
  BookBagInfoRes(BookBagInfoRes&& from) noexcept
    : BookBagInfoRes() {
    *this = ::std::move(from);
  }

  inline BookBagInfoRes& operator=(const BookBagInfoRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline BookBagInfoRes& operator=(BookBagInfoRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BookBagInfoRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const BookBagInfoRes* internal_default_instance() {
    return reinterpret_cast<const BookBagInfoRes*>(
               &_BookBagInfoRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BookBagInfoRes& a, BookBagInfoRes& b) {
    a.Swap(&b);
  }
  inline void Swap(BookBagInfoRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BookBagInfoRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BookBagInfoRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BookBagInfoRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BookBagInfoRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BookBagInfoRes& from) {
    BookBagInfoRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BookBagInfoRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.BookBagInfoRes";
  }
  protected:
  explicit BookBagInfoRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrCodeFieldNumber = 1,
  };
  // sint32 ErrCode = 1;
  void clear_errcode();
  int32_t errcode() const;
  void set_errcode(int32_t value);
  private:
  int32_t _internal_errcode() const;
  void _internal_set_errcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.BookBagInfoRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t errcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bookbag_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(83), nolog(false), XorEncrypt(false), KeyBase64(false)]
class SetBookBagInfoReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.SetBookBagInfoReq) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message SetBookBagInfoReq failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message SetBookBagInfoReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message SetBookBagInfoReq failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message SetBookBagInfoReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message SetBookBagInfoReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message SetBookBagInfoReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline SetBookBagInfoReq() : SetBookBagInfoReq(nullptr) {}
  ~SetBookBagInfoReq() override;
  explicit PROTOBUF_CONSTEXPR SetBookBagInfoReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetBookBagInfoReq(const SetBookBagInfoReq& from);
  SetBookBagInfoReq(SetBookBagInfoReq&& from) noexcept
    : SetBookBagInfoReq() {
    *this = ::std::move(from);
  }

  inline SetBookBagInfoReq& operator=(const SetBookBagInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetBookBagInfoReq& operator=(SetBookBagInfoReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetBookBagInfoReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetBookBagInfoReq* internal_default_instance() {
    return reinterpret_cast<const SetBookBagInfoReq*>(
               &_SetBookBagInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SetBookBagInfoReq& a, SetBookBagInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SetBookBagInfoReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetBookBagInfoReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetBookBagInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetBookBagInfoReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetBookBagInfoReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetBookBagInfoReq& from) {
    SetBookBagInfoReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetBookBagInfoReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.SetBookBagInfoReq";
  }
  protected:
  explicit SetBookBagInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBookInfoItemFieldNumber = 1,
  };
  // .CRYSTAL_NET.service.BookInfoItem BookInfoItem = 1;
  bool has_bookinfoitem() const;
  private:
  bool _internal_has_bookinfoitem() const;
  public:
  void clear_bookinfoitem();
  const ::CRYSTAL_NET::service::BookInfoItem& bookinfoitem() const;
  PROTOBUF_NODISCARD ::CRYSTAL_NET::service::BookInfoItem* release_bookinfoitem();
  ::CRYSTAL_NET::service::BookInfoItem* mutable_bookinfoitem();
  void set_allocated_bookinfoitem(::CRYSTAL_NET::service::BookInfoItem* bookinfoitem);
  private:
  const ::CRYSTAL_NET::service::BookInfoItem& _internal_bookinfoitem() const;
  ::CRYSTAL_NET::service::BookInfoItem* _internal_mutable_bookinfoitem();
  public:
  void unsafe_arena_set_allocated_bookinfoitem(
      ::CRYSTAL_NET::service::BookInfoItem* bookinfoitem);
  ::CRYSTAL_NET::service::BookInfoItem* unsafe_arena_release_bookinfoitem();

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.SetBookBagInfoReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::CRYSTAL_NET::service::BookInfoItem* bookinfoitem_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bookbag_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(84), nolog(false), XorEncrypt(false), KeyBase64(false)]
class SetBookBagInfoRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.SetBookBagInfoRes) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message SetBookBagInfoRes failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message SetBookBagInfoRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message SetBookBagInfoRes failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message SetBookBagInfoRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message SetBookBagInfoRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message SetBookBagInfoRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline SetBookBagInfoRes() : SetBookBagInfoRes(nullptr) {}
  ~SetBookBagInfoRes() override;
  explicit PROTOBUF_CONSTEXPR SetBookBagInfoRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetBookBagInfoRes(const SetBookBagInfoRes& from);
  SetBookBagInfoRes(SetBookBagInfoRes&& from) noexcept
    : SetBookBagInfoRes() {
    *this = ::std::move(from);
  }

  inline SetBookBagInfoRes& operator=(const SetBookBagInfoRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetBookBagInfoRes& operator=(SetBookBagInfoRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetBookBagInfoRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetBookBagInfoRes* internal_default_instance() {
    return reinterpret_cast<const SetBookBagInfoRes*>(
               &_SetBookBagInfoRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SetBookBagInfoRes& a, SetBookBagInfoRes& b) {
    a.Swap(&b);
  }
  inline void Swap(SetBookBagInfoRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetBookBagInfoRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetBookBagInfoRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetBookBagInfoRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetBookBagInfoRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetBookBagInfoRes& from) {
    SetBookBagInfoRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetBookBagInfoRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.SetBookBagInfoRes";
  }
  protected:
  explicit SetBookBagInfoRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrCodeFieldNumber = 1,
  };
  // sint32 ErrCode = 1;
  void clear_errcode();
  int32_t errcode() const;
  void set_errcode(int32_t value);
  private:
  int32_t _internal_errcode() const;
  void _internal_set_errcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.SetBookBagInfoRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t errcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bookbag_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(85), nolog(false), XorEncrypt(false), KeyBase64(false)]
class BookInfoItemChangeNty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.BookInfoItemChangeNty) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message BookInfoItemChangeNty failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message BookInfoItemChangeNty failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message BookInfoItemChangeNty failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message BookInfoItemChangeNty failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message BookInfoItemChangeNty failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message BookInfoItemChangeNty failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline BookInfoItemChangeNty() : BookInfoItemChangeNty(nullptr) {}
  ~BookInfoItemChangeNty() override;
  explicit PROTOBUF_CONSTEXPR BookInfoItemChangeNty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BookInfoItemChangeNty(const BookInfoItemChangeNty& from);
  BookInfoItemChangeNty(BookInfoItemChangeNty&& from) noexcept
    : BookInfoItemChangeNty() {
    *this = ::std::move(from);
  }

  inline BookInfoItemChangeNty& operator=(const BookInfoItemChangeNty& from) {
    CopyFrom(from);
    return *this;
  }
  inline BookInfoItemChangeNty& operator=(BookInfoItemChangeNty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BookInfoItemChangeNty& default_instance() {
    return *internal_default_instance();
  }
  static inline const BookInfoItemChangeNty* internal_default_instance() {
    return reinterpret_cast<const BookInfoItemChangeNty*>(
               &_BookInfoItemChangeNty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BookInfoItemChangeNty& a, BookInfoItemChangeNty& b) {
    a.Swap(&b);
  }
  inline void Swap(BookInfoItemChangeNty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BookInfoItemChangeNty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BookInfoItemChangeNty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BookInfoItemChangeNty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BookInfoItemChangeNty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BookInfoItemChangeNty& from) {
    BookInfoItemChangeNty::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BookInfoItemChangeNty* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.BookInfoItemChangeNty";
  }
  protected:
  explicit BookInfoItemChangeNty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBookInfoItemFieldNumber = 1,
  };
  // .CRYSTAL_NET.service.BookInfoItem BookInfoItem = 1;
  bool has_bookinfoitem() const;
  private:
  bool _internal_has_bookinfoitem() const;
  public:
  void clear_bookinfoitem();
  const ::CRYSTAL_NET::service::BookInfoItem& bookinfoitem() const;
  PROTOBUF_NODISCARD ::CRYSTAL_NET::service::BookInfoItem* release_bookinfoitem();
  ::CRYSTAL_NET::service::BookInfoItem* mutable_bookinfoitem();
  void set_allocated_bookinfoitem(::CRYSTAL_NET::service::BookInfoItem* bookinfoitem);
  private:
  const ::CRYSTAL_NET::service::BookInfoItem& _internal_bookinfoitem() const;
  ::CRYSTAL_NET::service::BookInfoItem* _internal_mutable_bookinfoitem();
  public:
  void unsafe_arena_set_allocated_bookinfoitem(
      ::CRYSTAL_NET::service::BookInfoItem* bookinfoitem);
  ::CRYSTAL_NET::service::BookInfoItem* unsafe_arena_release_bookinfoitem();

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.BookInfoItemChangeNty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::CRYSTAL_NET::service::BookInfoItem* bookinfoitem_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bookbag_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BookBagInfoReq

// -------------------------------------------------------------------

// BookBagInfoNty

// .CRYSTAL_NET.service.BookBagInfo BookBagInfo = 1;
inline bool BookBagInfoNty::_internal_has_bookbaginfo() const {
  return this != internal_default_instance() && _impl_.bookbaginfo_ != nullptr;
}
inline bool BookBagInfoNty::has_bookbaginfo() const {
  return _internal_has_bookbaginfo();
}
inline const ::CRYSTAL_NET::service::BookBagInfo& BookBagInfoNty::_internal_bookbaginfo() const {
  const ::CRYSTAL_NET::service::BookBagInfo* p = _impl_.bookbaginfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::CRYSTAL_NET::service::BookBagInfo&>(
      ::CRYSTAL_NET::service::_BookBagInfo_default_instance_);
}
inline const ::CRYSTAL_NET::service::BookBagInfo& BookBagInfoNty::bookbaginfo() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.BookBagInfoNty.BookBagInfo)
  return _internal_bookbaginfo();
}
inline void BookBagInfoNty::unsafe_arena_set_allocated_bookbaginfo(
    ::CRYSTAL_NET::service::BookBagInfo* bookbaginfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bookbaginfo_);
  }
  _impl_.bookbaginfo_ = bookbaginfo;
  if (bookbaginfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CRYSTAL_NET.service.BookBagInfoNty.BookBagInfo)
}
inline ::CRYSTAL_NET::service::BookBagInfo* BookBagInfoNty::release_bookbaginfo() {
  
  ::CRYSTAL_NET::service::BookBagInfo* temp = _impl_.bookbaginfo_;
  _impl_.bookbaginfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CRYSTAL_NET::service::BookBagInfo* BookBagInfoNty::unsafe_arena_release_bookbaginfo() {
  // @@protoc_insertion_point(field_release:CRYSTAL_NET.service.BookBagInfoNty.BookBagInfo)
  
  ::CRYSTAL_NET::service::BookBagInfo* temp = _impl_.bookbaginfo_;
  _impl_.bookbaginfo_ = nullptr;
  return temp;
}
inline ::CRYSTAL_NET::service::BookBagInfo* BookBagInfoNty::_internal_mutable_bookbaginfo() {
  
  if (_impl_.bookbaginfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::CRYSTAL_NET::service::BookBagInfo>(GetArenaForAllocation());
    _impl_.bookbaginfo_ = p;
  }
  return _impl_.bookbaginfo_;
}
inline ::CRYSTAL_NET::service::BookBagInfo* BookBagInfoNty::mutable_bookbaginfo() {
  ::CRYSTAL_NET::service::BookBagInfo* _msg = _internal_mutable_bookbaginfo();
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.BookBagInfoNty.BookBagInfo)
  return _msg;
}
inline void BookBagInfoNty::set_allocated_bookbaginfo(::CRYSTAL_NET::service::BookBagInfo* bookbaginfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bookbaginfo_);
  }
  if (bookbaginfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bookbaginfo));
    if (message_arena != submessage_arena) {
      bookbaginfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bookbaginfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bookbaginfo_ = bookbaginfo;
  // @@protoc_insertion_point(field_set_allocated:CRYSTAL_NET.service.BookBagInfoNty.BookBagInfo)
}

// -------------------------------------------------------------------

// BookBagInfoRes

// sint32 ErrCode = 1;
inline void BookBagInfoRes::clear_errcode() {
  _impl_.errcode_ = 0;
}
inline int32_t BookBagInfoRes::_internal_errcode() const {
  return _impl_.errcode_;
}
inline int32_t BookBagInfoRes::errcode() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.BookBagInfoRes.ErrCode)
  return _internal_errcode();
}
inline void BookBagInfoRes::_internal_set_errcode(int32_t value) {
  
  _impl_.errcode_ = value;
}
inline void BookBagInfoRes::set_errcode(int32_t value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.BookBagInfoRes.ErrCode)
}

// -------------------------------------------------------------------

// SetBookBagInfoReq

// .CRYSTAL_NET.service.BookInfoItem BookInfoItem = 1;
inline bool SetBookBagInfoReq::_internal_has_bookinfoitem() const {
  return this != internal_default_instance() && _impl_.bookinfoitem_ != nullptr;
}
inline bool SetBookBagInfoReq::has_bookinfoitem() const {
  return _internal_has_bookinfoitem();
}
inline const ::CRYSTAL_NET::service::BookInfoItem& SetBookBagInfoReq::_internal_bookinfoitem() const {
  const ::CRYSTAL_NET::service::BookInfoItem* p = _impl_.bookinfoitem_;
  return p != nullptr ? *p : reinterpret_cast<const ::CRYSTAL_NET::service::BookInfoItem&>(
      ::CRYSTAL_NET::service::_BookInfoItem_default_instance_);
}
inline const ::CRYSTAL_NET::service::BookInfoItem& SetBookBagInfoReq::bookinfoitem() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.SetBookBagInfoReq.BookInfoItem)
  return _internal_bookinfoitem();
}
inline void SetBookBagInfoReq::unsafe_arena_set_allocated_bookinfoitem(
    ::CRYSTAL_NET::service::BookInfoItem* bookinfoitem) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bookinfoitem_);
  }
  _impl_.bookinfoitem_ = bookinfoitem;
  if (bookinfoitem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CRYSTAL_NET.service.SetBookBagInfoReq.BookInfoItem)
}
inline ::CRYSTAL_NET::service::BookInfoItem* SetBookBagInfoReq::release_bookinfoitem() {
  
  ::CRYSTAL_NET::service::BookInfoItem* temp = _impl_.bookinfoitem_;
  _impl_.bookinfoitem_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CRYSTAL_NET::service::BookInfoItem* SetBookBagInfoReq::unsafe_arena_release_bookinfoitem() {
  // @@protoc_insertion_point(field_release:CRYSTAL_NET.service.SetBookBagInfoReq.BookInfoItem)
  
  ::CRYSTAL_NET::service::BookInfoItem* temp = _impl_.bookinfoitem_;
  _impl_.bookinfoitem_ = nullptr;
  return temp;
}
inline ::CRYSTAL_NET::service::BookInfoItem* SetBookBagInfoReq::_internal_mutable_bookinfoitem() {
  
  if (_impl_.bookinfoitem_ == nullptr) {
    auto* p = CreateMaybeMessage<::CRYSTAL_NET::service::BookInfoItem>(GetArenaForAllocation());
    _impl_.bookinfoitem_ = p;
  }
  return _impl_.bookinfoitem_;
}
inline ::CRYSTAL_NET::service::BookInfoItem* SetBookBagInfoReq::mutable_bookinfoitem() {
  ::CRYSTAL_NET::service::BookInfoItem* _msg = _internal_mutable_bookinfoitem();
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.SetBookBagInfoReq.BookInfoItem)
  return _msg;
}
inline void SetBookBagInfoReq::set_allocated_bookinfoitem(::CRYSTAL_NET::service::BookInfoItem* bookinfoitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bookinfoitem_);
  }
  if (bookinfoitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bookinfoitem));
    if (message_arena != submessage_arena) {
      bookinfoitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bookinfoitem, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bookinfoitem_ = bookinfoitem;
  // @@protoc_insertion_point(field_set_allocated:CRYSTAL_NET.service.SetBookBagInfoReq.BookInfoItem)
}

// -------------------------------------------------------------------

// SetBookBagInfoRes

// sint32 ErrCode = 1;
inline void SetBookBagInfoRes::clear_errcode() {
  _impl_.errcode_ = 0;
}
inline int32_t SetBookBagInfoRes::_internal_errcode() const {
  return _impl_.errcode_;
}
inline int32_t SetBookBagInfoRes::errcode() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.SetBookBagInfoRes.ErrCode)
  return _internal_errcode();
}
inline void SetBookBagInfoRes::_internal_set_errcode(int32_t value) {
  
  _impl_.errcode_ = value;
}
inline void SetBookBagInfoRes::set_errcode(int32_t value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.SetBookBagInfoRes.ErrCode)
}

// -------------------------------------------------------------------

// BookInfoItemChangeNty

// .CRYSTAL_NET.service.BookInfoItem BookInfoItem = 1;
inline bool BookInfoItemChangeNty::_internal_has_bookinfoitem() const {
  return this != internal_default_instance() && _impl_.bookinfoitem_ != nullptr;
}
inline bool BookInfoItemChangeNty::has_bookinfoitem() const {
  return _internal_has_bookinfoitem();
}
inline const ::CRYSTAL_NET::service::BookInfoItem& BookInfoItemChangeNty::_internal_bookinfoitem() const {
  const ::CRYSTAL_NET::service::BookInfoItem* p = _impl_.bookinfoitem_;
  return p != nullptr ? *p : reinterpret_cast<const ::CRYSTAL_NET::service::BookInfoItem&>(
      ::CRYSTAL_NET::service::_BookInfoItem_default_instance_);
}
inline const ::CRYSTAL_NET::service::BookInfoItem& BookInfoItemChangeNty::bookinfoitem() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.BookInfoItemChangeNty.BookInfoItem)
  return _internal_bookinfoitem();
}
inline void BookInfoItemChangeNty::unsafe_arena_set_allocated_bookinfoitem(
    ::CRYSTAL_NET::service::BookInfoItem* bookinfoitem) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bookinfoitem_);
  }
  _impl_.bookinfoitem_ = bookinfoitem;
  if (bookinfoitem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CRYSTAL_NET.service.BookInfoItemChangeNty.BookInfoItem)
}
inline ::CRYSTAL_NET::service::BookInfoItem* BookInfoItemChangeNty::release_bookinfoitem() {
  
  ::CRYSTAL_NET::service::BookInfoItem* temp = _impl_.bookinfoitem_;
  _impl_.bookinfoitem_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CRYSTAL_NET::service::BookInfoItem* BookInfoItemChangeNty::unsafe_arena_release_bookinfoitem() {
  // @@protoc_insertion_point(field_release:CRYSTAL_NET.service.BookInfoItemChangeNty.BookInfoItem)
  
  ::CRYSTAL_NET::service::BookInfoItem* temp = _impl_.bookinfoitem_;
  _impl_.bookinfoitem_ = nullptr;
  return temp;
}
inline ::CRYSTAL_NET::service::BookInfoItem* BookInfoItemChangeNty::_internal_mutable_bookinfoitem() {
  
  if (_impl_.bookinfoitem_ == nullptr) {
    auto* p = CreateMaybeMessage<::CRYSTAL_NET::service::BookInfoItem>(GetArenaForAllocation());
    _impl_.bookinfoitem_ = p;
  }
  return _impl_.bookinfoitem_;
}
inline ::CRYSTAL_NET::service::BookInfoItem* BookInfoItemChangeNty::mutable_bookinfoitem() {
  ::CRYSTAL_NET::service::BookInfoItem* _msg = _internal_mutable_bookinfoitem();
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.BookInfoItemChangeNty.BookInfoItem)
  return _msg;
}
inline void BookInfoItemChangeNty::set_allocated_bookinfoitem(::CRYSTAL_NET::service::BookInfoItem* bookinfoitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bookinfoitem_);
  }
  if (bookinfoitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bookinfoitem));
    if (message_arena != submessage_arena) {
      bookinfoitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bookinfoitem, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bookinfoitem_ = bookinfoitem;
  // @@protoc_insertion_point(field_set_allocated:CRYSTAL_NET.service.BookInfoItemChangeNty.BookInfoItem)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service
}  // namespace CRYSTAL_NET

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>

class BookBagInfoReqFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, BookBagInfoReqFactory);
public:

    virtual void Release() override {
        BookBagInfoReqFactory::Delete_BookBagInfoReqFactory(this);
    }

    static BookBagInfoReqFactory *CreateFactory() {
        return BookBagInfoReqFactory::New_BookBagInfoReqFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::BookBagInfoReq();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::BookBagInfoReq(*dynamic_cast<const ::CRYSTAL_NET::service::BookBagInfoReq *>(coder));
    }

};


class BookBagInfoNtyFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, BookBagInfoNtyFactory);
public:

    virtual void Release() override {
        BookBagInfoNtyFactory::Delete_BookBagInfoNtyFactory(this);
    }

    static BookBagInfoNtyFactory *CreateFactory() {
        return BookBagInfoNtyFactory::New_BookBagInfoNtyFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::BookBagInfoNty();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::BookBagInfoNty(*dynamic_cast<const ::CRYSTAL_NET::service::BookBagInfoNty *>(coder));
    }

};


class BookBagInfoResFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, BookBagInfoResFactory);
public:

    virtual void Release() override {
        BookBagInfoResFactory::Delete_BookBagInfoResFactory(this);
    }

    static BookBagInfoResFactory *CreateFactory() {
        return BookBagInfoResFactory::New_BookBagInfoResFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::BookBagInfoRes();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::BookBagInfoRes(*dynamic_cast<const ::CRYSTAL_NET::service::BookBagInfoRes *>(coder));
    }

};


class SetBookBagInfoReqFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, SetBookBagInfoReqFactory);
public:

    virtual void Release() override {
        SetBookBagInfoReqFactory::Delete_SetBookBagInfoReqFactory(this);
    }

    static SetBookBagInfoReqFactory *CreateFactory() {
        return SetBookBagInfoReqFactory::New_SetBookBagInfoReqFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::SetBookBagInfoReq();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::SetBookBagInfoReq(*dynamic_cast<const ::CRYSTAL_NET::service::SetBookBagInfoReq *>(coder));
    }

};


class SetBookBagInfoResFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, SetBookBagInfoResFactory);
public:

    virtual void Release() override {
        SetBookBagInfoResFactory::Delete_SetBookBagInfoResFactory(this);
    }

    static SetBookBagInfoResFactory *CreateFactory() {
        return SetBookBagInfoResFactory::New_SetBookBagInfoResFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::SetBookBagInfoRes();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::SetBookBagInfoRes(*dynamic_cast<const ::CRYSTAL_NET::service::SetBookBagInfoRes *>(coder));
    }

};


class BookInfoItemChangeNtyFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, BookInfoItemChangeNtyFactory);
public:

    virtual void Release() override {
        BookInfoItemChangeNtyFactory::Delete_BookInfoItemChangeNtyFactory(this);
    }

    static BookInfoItemChangeNtyFactory *CreateFactory() {
        return BookInfoItemChangeNtyFactory::New_BookInfoItemChangeNtyFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::BookInfoItemChangeNty();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::BookInfoItemChangeNty(*dynamic_cast<const ::CRYSTAL_NET::service::BookInfoItemChangeNty *>(coder));
    }

};

#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bookbag_2eproto
