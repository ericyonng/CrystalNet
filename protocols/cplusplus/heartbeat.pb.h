// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: heartbeat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_heartbeat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_heartbeat_2eproto

// KERNEL_INCLUDED
#include <kernel/kernel.h>
#include <service_common/ServiceCommon.h>
#include <google/protobuf/util/json_util.h>
#include <google/protobuf/text_format.h>

#ifdef GetMessage
 #undef GetMessage
#endif


#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "com_heartbeat.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_heartbeat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_heartbeat_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_heartbeat_2eproto;
namespace CRYSTAL_NET {
namespace service {
class ClientHeartbeatReq;
struct ClientHeartbeatReqDefaultTypeInternal;
extern ClientHeartbeatReqDefaultTypeInternal _ClientHeartbeatReq_default_instance_;
class ClientHeartbeatRes;
struct ClientHeartbeatResDefaultTypeInternal;
extern ClientHeartbeatResDefaultTypeInternal _ClientHeartbeatRes_default_instance_;
class GetNodeListReq;
struct GetNodeListReqDefaultTypeInternal;
extern GetNodeListReqDefaultTypeInternal _GetNodeListReq_default_instance_;
class GetNodeListRes;
struct GetNodeListResDefaultTypeInternal;
extern GetNodeListResDefaultTypeInternal _GetNodeListRes_default_instance_;
class NodeHeartbeatReq;
struct NodeHeartbeatReqDefaultTypeInternal;
extern NodeHeartbeatReqDefaultTypeInternal _NodeHeartbeatReq_default_instance_;
class NodeHeartbeatRes;
struct NodeHeartbeatResDefaultTypeInternal;
extern NodeHeartbeatResDefaultTypeInternal _NodeHeartbeatRes_default_instance_;
class RegisterNodeReq;
struct RegisterNodeReqDefaultTypeInternal;
extern RegisterNodeReqDefaultTypeInternal _RegisterNodeReq_default_instance_;
class RegisterNodeRes;
struct RegisterNodeResDefaultTypeInternal;
extern RegisterNodeResDefaultTypeInternal _RegisterNodeRes_default_instance_;
}  // namespace service
}  // namespace CRYSTAL_NET
PROTOBUF_NAMESPACE_OPEN
template<> ::CRYSTAL_NET::service::ClientHeartbeatReq* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::ClientHeartbeatReq>(Arena*);
template<> ::CRYSTAL_NET::service::ClientHeartbeatRes* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::ClientHeartbeatRes>(Arena*);
template<> ::CRYSTAL_NET::service::GetNodeListReq* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::GetNodeListReq>(Arena*);
template<> ::CRYSTAL_NET::service::GetNodeListRes* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::GetNodeListRes>(Arena*);
template<> ::CRYSTAL_NET::service::NodeHeartbeatReq* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::NodeHeartbeatReq>(Arena*);
template<> ::CRYSTAL_NET::service::NodeHeartbeatRes* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::NodeHeartbeatRes>(Arena*);
template<> ::CRYSTAL_NET::service::RegisterNodeReq* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::RegisterNodeReq>(Arena*);
template<> ::CRYSTAL_NET::service::RegisterNodeRes* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::RegisterNodeRes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CRYSTAL_NET {
namespace service {

// ===================================================================

// AnnotaionInfo[opcode(23), nolog(true)]
class NodeHeartbeatReq final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.NodeHeartbeatReq) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message NodeHeartbeatReq failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message NodeHeartbeatReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message NodeHeartbeatReq failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message NodeHeartbeatReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message NodeHeartbeatReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message NodeHeartbeatReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString CoderToString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}


 public:
  inline NodeHeartbeatReq() : NodeHeartbeatReq(nullptr) {}
  explicit PROTOBUF_CONSTEXPR NodeHeartbeatReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeHeartbeatReq(const NodeHeartbeatReq& from);
  NodeHeartbeatReq(NodeHeartbeatReq&& from) noexcept
    : NodeHeartbeatReq() {
    *this = ::std::move(from);
  }

  inline NodeHeartbeatReq& operator=(const NodeHeartbeatReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeHeartbeatReq& operator=(NodeHeartbeatReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeHeartbeatReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeHeartbeatReq* internal_default_instance() {
    return reinterpret_cast<const NodeHeartbeatReq*>(
               &_NodeHeartbeatReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NodeHeartbeatReq& a, NodeHeartbeatReq& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeHeartbeatReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeHeartbeatReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeHeartbeatReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NodeHeartbeatReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const NodeHeartbeatReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const NodeHeartbeatReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.NodeHeartbeatReq";
  }
  protected:
  explicit NodeHeartbeatReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.NodeHeartbeatReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_heartbeat_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(24), nolog(true)]
class NodeHeartbeatRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.NodeHeartbeatRes) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message NodeHeartbeatRes failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message NodeHeartbeatRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message NodeHeartbeatRes failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message NodeHeartbeatRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message NodeHeartbeatRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message NodeHeartbeatRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString CoderToString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}


 public:
  inline NodeHeartbeatRes() : NodeHeartbeatRes(nullptr) {}
  ~NodeHeartbeatRes() override;
  explicit PROTOBUF_CONSTEXPR NodeHeartbeatRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeHeartbeatRes(const NodeHeartbeatRes& from);
  NodeHeartbeatRes(NodeHeartbeatRes&& from) noexcept
    : NodeHeartbeatRes() {
    *this = ::std::move(from);
  }

  inline NodeHeartbeatRes& operator=(const NodeHeartbeatRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeHeartbeatRes& operator=(NodeHeartbeatRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeHeartbeatRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeHeartbeatRes* internal_default_instance() {
    return reinterpret_cast<const NodeHeartbeatRes*>(
               &_NodeHeartbeatRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NodeHeartbeatRes& a, NodeHeartbeatRes& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeHeartbeatRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeHeartbeatRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeHeartbeatRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NodeHeartbeatRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NodeHeartbeatRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NodeHeartbeatRes& from) {
    NodeHeartbeatRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeHeartbeatRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.NodeHeartbeatRes";
  }
  protected:
  explicit NodeHeartbeatRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNowTimeNanosecondsFieldNumber = 1,
  };
  // sint64 NowTimeNanoseconds = 1;
  void clear_nowtimenanoseconds();
  int64_t nowtimenanoseconds() const;
  void set_nowtimenanoseconds(int64_t value);
  private:
  int64_t _internal_nowtimenanoseconds() const;
  void _internal_set_nowtimenanoseconds(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.NodeHeartbeatRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t nowtimenanoseconds_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_heartbeat_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(25), nolog(false)]
class RegisterNodeReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.RegisterNodeReq) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message RegisterNodeReq failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message RegisterNodeReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message RegisterNodeReq failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message RegisterNodeReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message RegisterNodeReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message RegisterNodeReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString CoderToString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}


 public:
  inline RegisterNodeReq() : RegisterNodeReq(nullptr) {}
  ~RegisterNodeReq() override;
  explicit PROTOBUF_CONSTEXPR RegisterNodeReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterNodeReq(const RegisterNodeReq& from);
  RegisterNodeReq(RegisterNodeReq&& from) noexcept
    : RegisterNodeReq() {
    *this = ::std::move(from);
  }

  inline RegisterNodeReq& operator=(const RegisterNodeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterNodeReq& operator=(RegisterNodeReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterNodeReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterNodeReq* internal_default_instance() {
    return reinterpret_cast<const RegisterNodeReq*>(
               &_RegisterNodeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RegisterNodeReq& a, RegisterNodeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterNodeReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterNodeReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterNodeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterNodeReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterNodeReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RegisterNodeReq& from) {
    RegisterNodeReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterNodeReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.RegisterNodeReq";
  }
  protected:
  explicit RegisterNodeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeInfoFieldNumber = 1,
  };
  // .CRYSTAL_NET.service.NodeHeartbeatInfo NodeInfo = 1;
  bool has_nodeinfo() const;
  private:
  bool _internal_has_nodeinfo() const;
  public:
  void clear_nodeinfo();
  const ::CRYSTAL_NET::service::NodeHeartbeatInfo& nodeinfo() const;
  PROTOBUF_NODISCARD ::CRYSTAL_NET::service::NodeHeartbeatInfo* release_nodeinfo();
  ::CRYSTAL_NET::service::NodeHeartbeatInfo* mutable_nodeinfo();
  void set_allocated_nodeinfo(::CRYSTAL_NET::service::NodeHeartbeatInfo* nodeinfo);
  private:
  const ::CRYSTAL_NET::service::NodeHeartbeatInfo& _internal_nodeinfo() const;
  ::CRYSTAL_NET::service::NodeHeartbeatInfo* _internal_mutable_nodeinfo();
  public:
  void unsafe_arena_set_allocated_nodeinfo(
      ::CRYSTAL_NET::service::NodeHeartbeatInfo* nodeinfo);
  ::CRYSTAL_NET::service::NodeHeartbeatInfo* unsafe_arena_release_nodeinfo();

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.RegisterNodeReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::CRYSTAL_NET::service::NodeHeartbeatInfo* nodeinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_heartbeat_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(26), nolog(false)]
class RegisterNodeRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.RegisterNodeRes) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message RegisterNodeRes failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message RegisterNodeRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message RegisterNodeRes failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message RegisterNodeRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message RegisterNodeRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message RegisterNodeRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString CoderToString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}


 public:
  inline RegisterNodeRes() : RegisterNodeRes(nullptr) {}
  ~RegisterNodeRes() override;
  explicit PROTOBUF_CONSTEXPR RegisterNodeRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterNodeRes(const RegisterNodeRes& from);
  RegisterNodeRes(RegisterNodeRes&& from) noexcept
    : RegisterNodeRes() {
    *this = ::std::move(from);
  }

  inline RegisterNodeRes& operator=(const RegisterNodeRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterNodeRes& operator=(RegisterNodeRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterNodeRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterNodeRes* internal_default_instance() {
    return reinterpret_cast<const RegisterNodeRes*>(
               &_RegisterNodeRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RegisterNodeRes& a, RegisterNodeRes& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterNodeRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterNodeRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterNodeRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterNodeRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterNodeRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RegisterNodeRes& from) {
    RegisterNodeRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterNodeRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.RegisterNodeRes";
  }
  protected:
  explicit RegisterNodeRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrCodeFieldNumber = 1,
  };
  // sint32 ErrCode = 1;
  void clear_errcode();
  int32_t errcode() const;
  void set_errcode(int32_t value);
  private:
  int32_t _internal_errcode() const;
  void _internal_set_errcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.RegisterNodeRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t errcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_heartbeat_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(27), nolog(false)]
class GetNodeListReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.GetNodeListReq) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetNodeListReq failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetNodeListReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetNodeListReq failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetNodeListReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message GetNodeListReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message GetNodeListReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString CoderToString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}


 public:
  inline GetNodeListReq() : GetNodeListReq(nullptr) {}
  ~GetNodeListReq() override;
  explicit PROTOBUF_CONSTEXPR GetNodeListReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetNodeListReq(const GetNodeListReq& from);
  GetNodeListReq(GetNodeListReq&& from) noexcept
    : GetNodeListReq() {
    *this = ::std::move(from);
  }

  inline GetNodeListReq& operator=(const GetNodeListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNodeListReq& operator=(GetNodeListReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNodeListReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNodeListReq* internal_default_instance() {
    return reinterpret_cast<const GetNodeListReq*>(
               &_GetNodeListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetNodeListReq& a, GetNodeListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNodeListReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNodeListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNodeListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetNodeListReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetNodeListReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetNodeListReq& from) {
    GetNodeListReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNodeListReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.GetNodeListReq";
  }
  protected:
  explicit GetNodeListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCareNodeServiceNameListFieldNumber = 2,
    kClusterNameFieldNumber = 1,
  };
  // repeated string CareNodeServiceNameList = 2;
  int carenodeservicenamelist_size() const;
  private:
  int _internal_carenodeservicenamelist_size() const;
  public:
  void clear_carenodeservicenamelist();
  const std::string& carenodeservicenamelist(int index) const;
  std::string* mutable_carenodeservicenamelist(int index);
  void set_carenodeservicenamelist(int index, const std::string& value);
  void set_carenodeservicenamelist(int index, std::string&& value);
  void set_carenodeservicenamelist(int index, const char* value);
  void set_carenodeservicenamelist(int index, const char* value, size_t size);
  std::string* add_carenodeservicenamelist();
  void add_carenodeservicenamelist(const std::string& value);
  void add_carenodeservicenamelist(std::string&& value);
  void add_carenodeservicenamelist(const char* value);
  void add_carenodeservicenamelist(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& carenodeservicenamelist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_carenodeservicenamelist();
  private:
  const std::string& _internal_carenodeservicenamelist(int index) const;
  std::string* _internal_add_carenodeservicenamelist();
  public:

  // string ClusterName = 1;
  void clear_clustername();
  const std::string& clustername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clustername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clustername();
  PROTOBUF_NODISCARD std::string* release_clustername();
  void set_allocated_clustername(std::string* clustername);
  private:
  const std::string& _internal_clustername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clustername(const std::string& value);
  std::string* _internal_mutable_clustername();
  public:

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.GetNodeListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> carenodeservicenamelist_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clustername_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_heartbeat_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(28), nolog(false)]
class GetNodeListRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.GetNodeListRes) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetNodeListRes failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetNodeListRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetNodeListRes failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message GetNodeListRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message GetNodeListRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message GetNodeListRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString CoderToString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}


 public:
  inline GetNodeListRes() : GetNodeListRes(nullptr) {}
  ~GetNodeListRes() override;
  explicit PROTOBUF_CONSTEXPR GetNodeListRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetNodeListRes(const GetNodeListRes& from);
  GetNodeListRes(GetNodeListRes&& from) noexcept
    : GetNodeListRes() {
    *this = ::std::move(from);
  }

  inline GetNodeListRes& operator=(const GetNodeListRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNodeListRes& operator=(GetNodeListRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNodeListRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNodeListRes* internal_default_instance() {
    return reinterpret_cast<const GetNodeListRes*>(
               &_GetNodeListRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetNodeListRes& a, GetNodeListRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNodeListRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNodeListRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNodeListRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetNodeListRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetNodeListRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetNodeListRes& from) {
    GetNodeListRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNodeListRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.GetNodeListRes";
  }
  protected:
  explicit GetNodeListRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeInfoListFieldNumber = 1,
  };
  // repeated .CRYSTAL_NET.service.NodeHeartbeatInfo NodeInfoList = 1;
  int nodeinfolist_size() const;
  private:
  int _internal_nodeinfolist_size() const;
  public:
  void clear_nodeinfolist();
  ::CRYSTAL_NET::service::NodeHeartbeatInfo* mutable_nodeinfolist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRYSTAL_NET::service::NodeHeartbeatInfo >*
      mutable_nodeinfolist();
  private:
  const ::CRYSTAL_NET::service::NodeHeartbeatInfo& _internal_nodeinfolist(int index) const;
  ::CRYSTAL_NET::service::NodeHeartbeatInfo* _internal_add_nodeinfolist();
  public:
  const ::CRYSTAL_NET::service::NodeHeartbeatInfo& nodeinfolist(int index) const;
  ::CRYSTAL_NET::service::NodeHeartbeatInfo* add_nodeinfolist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRYSTAL_NET::service::NodeHeartbeatInfo >&
      nodeinfolist() const;

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.GetNodeListRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRYSTAL_NET::service::NodeHeartbeatInfo > nodeinfolist_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_heartbeat_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(29), nolog(true)]
class ClientHeartbeatReq final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.ClientHeartbeatReq) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message ClientHeartbeatReq failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message ClientHeartbeatReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message ClientHeartbeatReq failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message ClientHeartbeatReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message ClientHeartbeatReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message ClientHeartbeatReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString CoderToString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}


 public:
  inline ClientHeartbeatReq() : ClientHeartbeatReq(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ClientHeartbeatReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientHeartbeatReq(const ClientHeartbeatReq& from);
  ClientHeartbeatReq(ClientHeartbeatReq&& from) noexcept
    : ClientHeartbeatReq() {
    *this = ::std::move(from);
  }

  inline ClientHeartbeatReq& operator=(const ClientHeartbeatReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientHeartbeatReq& operator=(ClientHeartbeatReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientHeartbeatReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientHeartbeatReq* internal_default_instance() {
    return reinterpret_cast<const ClientHeartbeatReq*>(
               &_ClientHeartbeatReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ClientHeartbeatReq& a, ClientHeartbeatReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientHeartbeatReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientHeartbeatReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientHeartbeatReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientHeartbeatReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ClientHeartbeatReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ClientHeartbeatReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.ClientHeartbeatReq";
  }
  protected:
  explicit ClientHeartbeatReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.ClientHeartbeatReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_heartbeat_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(30), nolog(true)]
class ClientHeartbeatRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.ClientHeartbeatRes) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message ClientHeartbeatRes failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message ClientHeartbeatRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message ClientHeartbeatRes failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message ClientHeartbeatRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message ClientHeartbeatRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message ClientHeartbeatRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString CoderToString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}


 public:
  inline ClientHeartbeatRes() : ClientHeartbeatRes(nullptr) {}
  ~ClientHeartbeatRes() override;
  explicit PROTOBUF_CONSTEXPR ClientHeartbeatRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientHeartbeatRes(const ClientHeartbeatRes& from);
  ClientHeartbeatRes(ClientHeartbeatRes&& from) noexcept
    : ClientHeartbeatRes() {
    *this = ::std::move(from);
  }

  inline ClientHeartbeatRes& operator=(const ClientHeartbeatRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientHeartbeatRes& operator=(ClientHeartbeatRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientHeartbeatRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientHeartbeatRes* internal_default_instance() {
    return reinterpret_cast<const ClientHeartbeatRes*>(
               &_ClientHeartbeatRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ClientHeartbeatRes& a, ClientHeartbeatRes& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientHeartbeatRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientHeartbeatRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientHeartbeatRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientHeartbeatRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientHeartbeatRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientHeartbeatRes& from) {
    ClientHeartbeatRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientHeartbeatRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.ClientHeartbeatRes";
  }
  protected:
  explicit ClientHeartbeatRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerTimeMsFieldNumber = 1,
  };
  // sint64 ServerTimeMs = 1;
  void clear_servertimems();
  int64_t servertimems() const;
  void set_servertimems(int64_t value);
  private:
  int64_t _internal_servertimems() const;
  void _internal_set_servertimems(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.ClientHeartbeatRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t servertimems_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_heartbeat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NodeHeartbeatReq

// -------------------------------------------------------------------

// NodeHeartbeatRes

// sint64 NowTimeNanoseconds = 1;
inline void NodeHeartbeatRes::clear_nowtimenanoseconds() {
  _impl_.nowtimenanoseconds_ = int64_t{0};
}
inline int64_t NodeHeartbeatRes::_internal_nowtimenanoseconds() const {
  return _impl_.nowtimenanoseconds_;
}
inline int64_t NodeHeartbeatRes::nowtimenanoseconds() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.NodeHeartbeatRes.NowTimeNanoseconds)
  return _internal_nowtimenanoseconds();
}
inline void NodeHeartbeatRes::_internal_set_nowtimenanoseconds(int64_t value) {
  
  _impl_.nowtimenanoseconds_ = value;
}
inline void NodeHeartbeatRes::set_nowtimenanoseconds(int64_t value) {
  _internal_set_nowtimenanoseconds(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.NodeHeartbeatRes.NowTimeNanoseconds)
}

// -------------------------------------------------------------------

// RegisterNodeReq

// .CRYSTAL_NET.service.NodeHeartbeatInfo NodeInfo = 1;
inline bool RegisterNodeReq::_internal_has_nodeinfo() const {
  return this != internal_default_instance() && _impl_.nodeinfo_ != nullptr;
}
inline bool RegisterNodeReq::has_nodeinfo() const {
  return _internal_has_nodeinfo();
}
inline const ::CRYSTAL_NET::service::NodeHeartbeatInfo& RegisterNodeReq::_internal_nodeinfo() const {
  const ::CRYSTAL_NET::service::NodeHeartbeatInfo* p = _impl_.nodeinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::CRYSTAL_NET::service::NodeHeartbeatInfo&>(
      ::CRYSTAL_NET::service::_NodeHeartbeatInfo_default_instance_);
}
inline const ::CRYSTAL_NET::service::NodeHeartbeatInfo& RegisterNodeReq::nodeinfo() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.RegisterNodeReq.NodeInfo)
  return _internal_nodeinfo();
}
inline void RegisterNodeReq::unsafe_arena_set_allocated_nodeinfo(
    ::CRYSTAL_NET::service::NodeHeartbeatInfo* nodeinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nodeinfo_);
  }
  _impl_.nodeinfo_ = nodeinfo;
  if (nodeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CRYSTAL_NET.service.RegisterNodeReq.NodeInfo)
}
inline ::CRYSTAL_NET::service::NodeHeartbeatInfo* RegisterNodeReq::release_nodeinfo() {
  
  ::CRYSTAL_NET::service::NodeHeartbeatInfo* temp = _impl_.nodeinfo_;
  _impl_.nodeinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CRYSTAL_NET::service::NodeHeartbeatInfo* RegisterNodeReq::unsafe_arena_release_nodeinfo() {
  // @@protoc_insertion_point(field_release:CRYSTAL_NET.service.RegisterNodeReq.NodeInfo)
  
  ::CRYSTAL_NET::service::NodeHeartbeatInfo* temp = _impl_.nodeinfo_;
  _impl_.nodeinfo_ = nullptr;
  return temp;
}
inline ::CRYSTAL_NET::service::NodeHeartbeatInfo* RegisterNodeReq::_internal_mutable_nodeinfo() {
  
  if (_impl_.nodeinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::CRYSTAL_NET::service::NodeHeartbeatInfo>(GetArenaForAllocation());
    _impl_.nodeinfo_ = p;
  }
  return _impl_.nodeinfo_;
}
inline ::CRYSTAL_NET::service::NodeHeartbeatInfo* RegisterNodeReq::mutable_nodeinfo() {
  ::CRYSTAL_NET::service::NodeHeartbeatInfo* _msg = _internal_mutable_nodeinfo();
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.RegisterNodeReq.NodeInfo)
  return _msg;
}
inline void RegisterNodeReq::set_allocated_nodeinfo(::CRYSTAL_NET::service::NodeHeartbeatInfo* nodeinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nodeinfo_);
  }
  if (nodeinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nodeinfo));
    if (message_arena != submessage_arena) {
      nodeinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nodeinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.nodeinfo_ = nodeinfo;
  // @@protoc_insertion_point(field_set_allocated:CRYSTAL_NET.service.RegisterNodeReq.NodeInfo)
}

// -------------------------------------------------------------------

// RegisterNodeRes

// sint32 ErrCode = 1;
inline void RegisterNodeRes::clear_errcode() {
  _impl_.errcode_ = 0;
}
inline int32_t RegisterNodeRes::_internal_errcode() const {
  return _impl_.errcode_;
}
inline int32_t RegisterNodeRes::errcode() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.RegisterNodeRes.ErrCode)
  return _internal_errcode();
}
inline void RegisterNodeRes::_internal_set_errcode(int32_t value) {
  
  _impl_.errcode_ = value;
}
inline void RegisterNodeRes::set_errcode(int32_t value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.RegisterNodeRes.ErrCode)
}

// -------------------------------------------------------------------

// GetNodeListReq

// string ClusterName = 1;
inline void GetNodeListReq::clear_clustername() {
  _impl_.clustername_.ClearToEmpty();
}
inline const std::string& GetNodeListReq::clustername() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.GetNodeListReq.ClusterName)
  return _internal_clustername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetNodeListReq::set_clustername(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clustername_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.GetNodeListReq.ClusterName)
}
inline std::string* GetNodeListReq::mutable_clustername() {
  std::string* _s = _internal_mutable_clustername();
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.GetNodeListReq.ClusterName)
  return _s;
}
inline const std::string& GetNodeListReq::_internal_clustername() const {
  return _impl_.clustername_.Get();
}
inline void GetNodeListReq::_internal_set_clustername(const std::string& value) {
  
  _impl_.clustername_.Set(value, GetArenaForAllocation());
}
inline std::string* GetNodeListReq::_internal_mutable_clustername() {
  
  return _impl_.clustername_.Mutable(GetArenaForAllocation());
}
inline std::string* GetNodeListReq::release_clustername() {
  // @@protoc_insertion_point(field_release:CRYSTAL_NET.service.GetNodeListReq.ClusterName)
  return _impl_.clustername_.Release();
}
inline void GetNodeListReq::set_allocated_clustername(std::string* clustername) {
  if (clustername != nullptr) {
    
  } else {
    
  }
  _impl_.clustername_.SetAllocated(clustername, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clustername_.IsDefault()) {
    _impl_.clustername_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRYSTAL_NET.service.GetNodeListReq.ClusterName)
}

// repeated string CareNodeServiceNameList = 2;
inline int GetNodeListReq::_internal_carenodeservicenamelist_size() const {
  return _impl_.carenodeservicenamelist_.size();
}
inline int GetNodeListReq::carenodeservicenamelist_size() const {
  return _internal_carenodeservicenamelist_size();
}
inline void GetNodeListReq::clear_carenodeservicenamelist() {
  _impl_.carenodeservicenamelist_.Clear();
}
inline std::string* GetNodeListReq::add_carenodeservicenamelist() {
  std::string* _s = _internal_add_carenodeservicenamelist();
  // @@protoc_insertion_point(field_add_mutable:CRYSTAL_NET.service.GetNodeListReq.CareNodeServiceNameList)
  return _s;
}
inline const std::string& GetNodeListReq::_internal_carenodeservicenamelist(int index) const {
  return _impl_.carenodeservicenamelist_.Get(index);
}
inline const std::string& GetNodeListReq::carenodeservicenamelist(int index) const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.GetNodeListReq.CareNodeServiceNameList)
  return _internal_carenodeservicenamelist(index);
}
inline std::string* GetNodeListReq::mutable_carenodeservicenamelist(int index) {
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.GetNodeListReq.CareNodeServiceNameList)
  return _impl_.carenodeservicenamelist_.Mutable(index);
}
inline void GetNodeListReq::set_carenodeservicenamelist(int index, const std::string& value) {
  _impl_.carenodeservicenamelist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.GetNodeListReq.CareNodeServiceNameList)
}
inline void GetNodeListReq::set_carenodeservicenamelist(int index, std::string&& value) {
  _impl_.carenodeservicenamelist_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.GetNodeListReq.CareNodeServiceNameList)
}
inline void GetNodeListReq::set_carenodeservicenamelist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.carenodeservicenamelist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CRYSTAL_NET.service.GetNodeListReq.CareNodeServiceNameList)
}
inline void GetNodeListReq::set_carenodeservicenamelist(int index, const char* value, size_t size) {
  _impl_.carenodeservicenamelist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CRYSTAL_NET.service.GetNodeListReq.CareNodeServiceNameList)
}
inline std::string* GetNodeListReq::_internal_add_carenodeservicenamelist() {
  return _impl_.carenodeservicenamelist_.Add();
}
inline void GetNodeListReq::add_carenodeservicenamelist(const std::string& value) {
  _impl_.carenodeservicenamelist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CRYSTAL_NET.service.GetNodeListReq.CareNodeServiceNameList)
}
inline void GetNodeListReq::add_carenodeservicenamelist(std::string&& value) {
  _impl_.carenodeservicenamelist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CRYSTAL_NET.service.GetNodeListReq.CareNodeServiceNameList)
}
inline void GetNodeListReq::add_carenodeservicenamelist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.carenodeservicenamelist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CRYSTAL_NET.service.GetNodeListReq.CareNodeServiceNameList)
}
inline void GetNodeListReq::add_carenodeservicenamelist(const char* value, size_t size) {
  _impl_.carenodeservicenamelist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CRYSTAL_NET.service.GetNodeListReq.CareNodeServiceNameList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetNodeListReq::carenodeservicenamelist() const {
  // @@protoc_insertion_point(field_list:CRYSTAL_NET.service.GetNodeListReq.CareNodeServiceNameList)
  return _impl_.carenodeservicenamelist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetNodeListReq::mutable_carenodeservicenamelist() {
  // @@protoc_insertion_point(field_mutable_list:CRYSTAL_NET.service.GetNodeListReq.CareNodeServiceNameList)
  return &_impl_.carenodeservicenamelist_;
}

// -------------------------------------------------------------------

// GetNodeListRes

// repeated .CRYSTAL_NET.service.NodeHeartbeatInfo NodeInfoList = 1;
inline int GetNodeListRes::_internal_nodeinfolist_size() const {
  return _impl_.nodeinfolist_.size();
}
inline int GetNodeListRes::nodeinfolist_size() const {
  return _internal_nodeinfolist_size();
}
inline ::CRYSTAL_NET::service::NodeHeartbeatInfo* GetNodeListRes::mutable_nodeinfolist(int index) {
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.GetNodeListRes.NodeInfoList)
  return _impl_.nodeinfolist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRYSTAL_NET::service::NodeHeartbeatInfo >*
GetNodeListRes::mutable_nodeinfolist() {
  // @@protoc_insertion_point(field_mutable_list:CRYSTAL_NET.service.GetNodeListRes.NodeInfoList)
  return &_impl_.nodeinfolist_;
}
inline const ::CRYSTAL_NET::service::NodeHeartbeatInfo& GetNodeListRes::_internal_nodeinfolist(int index) const {
  return _impl_.nodeinfolist_.Get(index);
}
inline const ::CRYSTAL_NET::service::NodeHeartbeatInfo& GetNodeListRes::nodeinfolist(int index) const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.GetNodeListRes.NodeInfoList)
  return _internal_nodeinfolist(index);
}
inline ::CRYSTAL_NET::service::NodeHeartbeatInfo* GetNodeListRes::_internal_add_nodeinfolist() {
  return _impl_.nodeinfolist_.Add();
}
inline ::CRYSTAL_NET::service::NodeHeartbeatInfo* GetNodeListRes::add_nodeinfolist() {
  ::CRYSTAL_NET::service::NodeHeartbeatInfo* _add = _internal_add_nodeinfolist();
  // @@protoc_insertion_point(field_add:CRYSTAL_NET.service.GetNodeListRes.NodeInfoList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CRYSTAL_NET::service::NodeHeartbeatInfo >&
GetNodeListRes::nodeinfolist() const {
  // @@protoc_insertion_point(field_list:CRYSTAL_NET.service.GetNodeListRes.NodeInfoList)
  return _impl_.nodeinfolist_;
}

// -------------------------------------------------------------------

// ClientHeartbeatReq

// -------------------------------------------------------------------

// ClientHeartbeatRes

// sint64 ServerTimeMs = 1;
inline void ClientHeartbeatRes::clear_servertimems() {
  _impl_.servertimems_ = int64_t{0};
}
inline int64_t ClientHeartbeatRes::_internal_servertimems() const {
  return _impl_.servertimems_;
}
inline int64_t ClientHeartbeatRes::servertimems() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.ClientHeartbeatRes.ServerTimeMs)
  return _internal_servertimems();
}
inline void ClientHeartbeatRes::_internal_set_servertimems(int64_t value) {
  
  _impl_.servertimems_ = value;
}
inline void ClientHeartbeatRes::set_servertimems(int64_t value) {
  _internal_set_servertimems(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.ClientHeartbeatRes.ServerTimeMs)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service
}  // namespace CRYSTAL_NET

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>

class NodeHeartbeatReqFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, NodeHeartbeatReqFactory);
public:

    virtual void Release() override {
        NodeHeartbeatReqFactory::Delete_NodeHeartbeatReqFactory(this);
    }

    static NodeHeartbeatReqFactory *CreateFactory() {
        return NodeHeartbeatReqFactory::New_NodeHeartbeatReqFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::NodeHeartbeatReq();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::NodeHeartbeatReq(*dynamic_cast<const ::CRYSTAL_NET::service::NodeHeartbeatReq *>(coder));
    }

};


class NodeHeartbeatResFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, NodeHeartbeatResFactory);
public:

    virtual void Release() override {
        NodeHeartbeatResFactory::Delete_NodeHeartbeatResFactory(this);
    }

    static NodeHeartbeatResFactory *CreateFactory() {
        return NodeHeartbeatResFactory::New_NodeHeartbeatResFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::NodeHeartbeatRes();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::NodeHeartbeatRes(*dynamic_cast<const ::CRYSTAL_NET::service::NodeHeartbeatRes *>(coder));
    }

};


class RegisterNodeReqFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, RegisterNodeReqFactory);
public:

    virtual void Release() override {
        RegisterNodeReqFactory::Delete_RegisterNodeReqFactory(this);
    }

    static RegisterNodeReqFactory *CreateFactory() {
        return RegisterNodeReqFactory::New_RegisterNodeReqFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::RegisterNodeReq();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::RegisterNodeReq(*dynamic_cast<const ::CRYSTAL_NET::service::RegisterNodeReq *>(coder));
    }

};


class RegisterNodeResFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, RegisterNodeResFactory);
public:

    virtual void Release() override {
        RegisterNodeResFactory::Delete_RegisterNodeResFactory(this);
    }

    static RegisterNodeResFactory *CreateFactory() {
        return RegisterNodeResFactory::New_RegisterNodeResFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::RegisterNodeRes();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::RegisterNodeRes(*dynamic_cast<const ::CRYSTAL_NET::service::RegisterNodeRes *>(coder));
    }

};


class GetNodeListReqFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, GetNodeListReqFactory);
public:

    virtual void Release() override {
        GetNodeListReqFactory::Delete_GetNodeListReqFactory(this);
    }

    static GetNodeListReqFactory *CreateFactory() {
        return GetNodeListReqFactory::New_GetNodeListReqFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::GetNodeListReq();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::GetNodeListReq(*dynamic_cast<const ::CRYSTAL_NET::service::GetNodeListReq *>(coder));
    }

};


class GetNodeListResFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, GetNodeListResFactory);
public:

    virtual void Release() override {
        GetNodeListResFactory::Delete_GetNodeListResFactory(this);
    }

    static GetNodeListResFactory *CreateFactory() {
        return GetNodeListResFactory::New_GetNodeListResFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::GetNodeListRes();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::GetNodeListRes(*dynamic_cast<const ::CRYSTAL_NET::service::GetNodeListRes *>(coder));
    }

};


class ClientHeartbeatReqFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, ClientHeartbeatReqFactory);
public:

    virtual void Release() override {
        ClientHeartbeatReqFactory::Delete_ClientHeartbeatReqFactory(this);
    }

    static ClientHeartbeatReqFactory *CreateFactory() {
        return ClientHeartbeatReqFactory::New_ClientHeartbeatReqFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::ClientHeartbeatReq();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::ClientHeartbeatReq(*dynamic_cast<const ::CRYSTAL_NET::service::ClientHeartbeatReq *>(coder));
    }

};


class ClientHeartbeatResFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, ClientHeartbeatResFactory);
public:

    virtual void Release() override {
        ClientHeartbeatResFactory::Delete_ClientHeartbeatResFactory(this);
    }

    static ClientHeartbeatResFactory *CreateFactory() {
        return ClientHeartbeatResFactory::New_ClientHeartbeatResFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::ClientHeartbeatRes();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::ClientHeartbeatRes(*dynamic_cast<const ::CRYSTAL_NET::service::ClientHeartbeatRes *>(coder));
    }

};

#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_heartbeat_2eproto
