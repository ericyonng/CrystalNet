// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com_heartbeat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_com_5fheartbeat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_com_5fheartbeat_2eproto

// KERNEL_INCLUDED
#include <kernel/kernel.h>
#include <service_common/ServiceCommon.h>
#ifdef GetMessage
 #undef GetMessage
#endif


#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_com_5fheartbeat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_com_5fheartbeat_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_com_5fheartbeat_2eproto;
class NODE_IPTYPE;
struct NODE_IPTYPEDefaultTypeInternal;
extern NODE_IPTYPEDefaultTypeInternal _NODE_IPTYPE_default_instance_;
class NodeHeartbeatInfo;
struct NodeHeartbeatInfoDefaultTypeInternal;
extern NodeHeartbeatInfoDefaultTypeInternal _NodeHeartbeatInfo_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::NODE_IPTYPE* Arena::CreateMaybeMessage<::NODE_IPTYPE>(Arena*);
template<> ::NodeHeartbeatInfo* Arena::CreateMaybeMessage<::NodeHeartbeatInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum NODE_IPTYPE_TYPE_ENUMS : int {
  NODE_IPTYPE_TYPE_ENUMS_IPV4 = 0,
  NODE_IPTYPE_TYPE_ENUMS_IPV6 = 1,
  NODE_IPTYPE_TYPE_ENUMS_NODE_IPTYPE_TYPE_ENUMS_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NODE_IPTYPE_TYPE_ENUMS_NODE_IPTYPE_TYPE_ENUMS_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NODE_IPTYPE_TYPE_ENUMS_IsValid(int value);
constexpr NODE_IPTYPE_TYPE_ENUMS NODE_IPTYPE_TYPE_ENUMS_TYPE_ENUMS_MIN = NODE_IPTYPE_TYPE_ENUMS_IPV4;
constexpr NODE_IPTYPE_TYPE_ENUMS NODE_IPTYPE_TYPE_ENUMS_TYPE_ENUMS_MAX = NODE_IPTYPE_TYPE_ENUMS_IPV6;
constexpr int NODE_IPTYPE_TYPE_ENUMS_TYPE_ENUMS_ARRAYSIZE = NODE_IPTYPE_TYPE_ENUMS_TYPE_ENUMS_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NODE_IPTYPE_TYPE_ENUMS_descriptor();
template<typename T>
inline const std::string& NODE_IPTYPE_TYPE_ENUMS_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NODE_IPTYPE_TYPE_ENUMS>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NODE_IPTYPE_TYPE_ENUMS_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NODE_IPTYPE_TYPE_ENUMS_descriptor(), enum_t_value);
}
inline bool NODE_IPTYPE_TYPE_ENUMS_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NODE_IPTYPE_TYPE_ENUMS* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NODE_IPTYPE_TYPE_ENUMS>(
    NODE_IPTYPE_TYPE_ENUMS_descriptor(), name, value);
}
// ===================================================================

// AnnotaionInfo[opcode(0)]
class NODE_IPTYPE final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:NODE_IPTYPE) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message NODE_IPTYPE failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message NODE_IPTYPE failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message NODE_IPTYPE failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message NODE_IPTYPE failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message NODE_IPTYPE failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message NODE_IPTYPE failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}


 public:
  inline NODE_IPTYPE() : NODE_IPTYPE(nullptr) {}
  explicit PROTOBUF_CONSTEXPR NODE_IPTYPE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NODE_IPTYPE(const NODE_IPTYPE& from);
  NODE_IPTYPE(NODE_IPTYPE&& from) noexcept
    : NODE_IPTYPE() {
    *this = ::std::move(from);
  }

  inline NODE_IPTYPE& operator=(const NODE_IPTYPE& from) {
    CopyFrom(from);
    return *this;
  }
  inline NODE_IPTYPE& operator=(NODE_IPTYPE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NODE_IPTYPE& default_instance() {
    return *internal_default_instance();
  }
  static inline const NODE_IPTYPE* internal_default_instance() {
    return reinterpret_cast<const NODE_IPTYPE*>(
               &_NODE_IPTYPE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NODE_IPTYPE& a, NODE_IPTYPE& b) {
    a.Swap(&b);
  }
  inline void Swap(NODE_IPTYPE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NODE_IPTYPE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NODE_IPTYPE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NODE_IPTYPE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const NODE_IPTYPE& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const NODE_IPTYPE& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NODE_IPTYPE";
  }
  protected:
  explicit NODE_IPTYPE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef NODE_IPTYPE_TYPE_ENUMS TYPE_ENUMS;
  static constexpr TYPE_ENUMS IPV4 =
    NODE_IPTYPE_TYPE_ENUMS_IPV4;
  static constexpr TYPE_ENUMS IPV6 =
    NODE_IPTYPE_TYPE_ENUMS_IPV6;
  static inline bool TYPE_ENUMS_IsValid(int value) {
    return NODE_IPTYPE_TYPE_ENUMS_IsValid(value);
  }
  static constexpr TYPE_ENUMS TYPE_ENUMS_MIN =
    NODE_IPTYPE_TYPE_ENUMS_TYPE_ENUMS_MIN;
  static constexpr TYPE_ENUMS TYPE_ENUMS_MAX =
    NODE_IPTYPE_TYPE_ENUMS_TYPE_ENUMS_MAX;
  static constexpr int TYPE_ENUMS_ARRAYSIZE =
    NODE_IPTYPE_TYPE_ENUMS_TYPE_ENUMS_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TYPE_ENUMS_descriptor() {
    return NODE_IPTYPE_TYPE_ENUMS_descriptor();
  }
  template<typename T>
  static inline const std::string& TYPE_ENUMS_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TYPE_ENUMS>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TYPE_ENUMS_Name.");
    return NODE_IPTYPE_TYPE_ENUMS_Name(enum_t_value);
  }
  static inline bool TYPE_ENUMS_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TYPE_ENUMS* value) {
    return NODE_IPTYPE_TYPE_ENUMS_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:NODE_IPTYPE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_com_5fheartbeat_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(0)]
class NodeHeartbeatInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NodeHeartbeatInfo) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message NodeHeartbeatInfo failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message NodeHeartbeatInfo failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message NodeHeartbeatInfo failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message NodeHeartbeatInfo failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message NodeHeartbeatInfo failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message NodeHeartbeatInfo failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}


 public:
  inline NodeHeartbeatInfo() : NodeHeartbeatInfo(nullptr) {}
  ~NodeHeartbeatInfo() override;
  explicit PROTOBUF_CONSTEXPR NodeHeartbeatInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeHeartbeatInfo(const NodeHeartbeatInfo& from);
  NodeHeartbeatInfo(NodeHeartbeatInfo&& from) noexcept
    : NodeHeartbeatInfo() {
    *this = ::std::move(from);
  }

  inline NodeHeartbeatInfo& operator=(const NodeHeartbeatInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeHeartbeatInfo& operator=(NodeHeartbeatInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeHeartbeatInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeHeartbeatInfo* internal_default_instance() {
    return reinterpret_cast<const NodeHeartbeatInfo*>(
               &_NodeHeartbeatInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NodeHeartbeatInfo& a, NodeHeartbeatInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeHeartbeatInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeHeartbeatInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeHeartbeatInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NodeHeartbeatInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NodeHeartbeatInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NodeHeartbeatInfo& from) {
    NodeHeartbeatInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeHeartbeatInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NodeHeartbeatInfo";
  }
  protected:
  explicit NodeHeartbeatInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubscribeOpcodesFieldNumber = 5,
    kApiListFieldNumber = 6,
    kServiceNameFieldNumber = 1,
    kAddressFieldNumber = 2,
    kIpTypeFieldNumber = 3,
    kInnerLinkPortFieldNumber = 4,
  };
  // repeated sint32 SubscribeOpcodes = 5;
  int subscribeopcodes_size() const;
  private:
  int _internal_subscribeopcodes_size() const;
  public:
  void clear_subscribeopcodes();
  private:
  int32_t _internal_subscribeopcodes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_subscribeopcodes() const;
  void _internal_add_subscribeopcodes(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_subscribeopcodes();
  public:
  int32_t subscribeopcodes(int index) const;
  void set_subscribeopcodes(int index, int32_t value);
  void add_subscribeopcodes(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      subscribeopcodes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_subscribeopcodes();

  // repeated string ApiList = 6;
  int apilist_size() const;
  private:
  int _internal_apilist_size() const;
  public:
  void clear_apilist();
  const std::string& apilist(int index) const;
  std::string* mutable_apilist(int index);
  void set_apilist(int index, const std::string& value);
  void set_apilist(int index, std::string&& value);
  void set_apilist(int index, const char* value);
  void set_apilist(int index, const char* value, size_t size);
  std::string* add_apilist();
  void add_apilist(const std::string& value);
  void add_apilist(std::string&& value);
  void add_apilist(const char* value);
  void add_apilist(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& apilist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_apilist();
  private:
  const std::string& _internal_apilist(int index) const;
  std::string* _internal_add_apilist();
  public:

  // string ServiceName = 1;
  void clear_servicename();
  const std::string& servicename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_servicename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_servicename();
  PROTOBUF_NODISCARD std::string* release_servicename();
  void set_allocated_servicename(std::string* servicename);
  private:
  const std::string& _internal_servicename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_servicename(const std::string& value);
  std::string* _internal_mutable_servicename();
  public:

  // string address = 2;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // sint32 IpType = 3;
  void clear_iptype();
  int32_t iptype() const;
  void set_iptype(int32_t value);
  private:
  int32_t _internal_iptype() const;
  void _internal_set_iptype(int32_t value);
  public:

  // uint32 InnerLinkPort = 4;
  void clear_innerlinkport();
  uint32_t innerlinkport() const;
  void set_innerlinkport(uint32_t value);
  private:
  uint32_t _internal_innerlinkport() const;
  void _internal_set_innerlinkport(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:NodeHeartbeatInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > subscribeopcodes_;
    mutable std::atomic<int> _subscribeopcodes_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> apilist_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servicename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    int32_t iptype_;
    uint32_t innerlinkport_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_com_5fheartbeat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NODE_IPTYPE

// -------------------------------------------------------------------

// NodeHeartbeatInfo

// string ServiceName = 1;
inline void NodeHeartbeatInfo::clear_servicename() {
  _impl_.servicename_.ClearToEmpty();
}
inline const std::string& NodeHeartbeatInfo::servicename() const {
  // @@protoc_insertion_point(field_get:NodeHeartbeatInfo.ServiceName)
  return _internal_servicename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeHeartbeatInfo::set_servicename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.servicename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NodeHeartbeatInfo.ServiceName)
}
inline std::string* NodeHeartbeatInfo::mutable_servicename() {
  std::string* _s = _internal_mutable_servicename();
  // @@protoc_insertion_point(field_mutable:NodeHeartbeatInfo.ServiceName)
  return _s;
}
inline const std::string& NodeHeartbeatInfo::_internal_servicename() const {
  return _impl_.servicename_.Get();
}
inline void NodeHeartbeatInfo::_internal_set_servicename(const std::string& value) {
  
  _impl_.servicename_.Set(value, GetArenaForAllocation());
}
inline std::string* NodeHeartbeatInfo::_internal_mutable_servicename() {
  
  return _impl_.servicename_.Mutable(GetArenaForAllocation());
}
inline std::string* NodeHeartbeatInfo::release_servicename() {
  // @@protoc_insertion_point(field_release:NodeHeartbeatInfo.ServiceName)
  return _impl_.servicename_.Release();
}
inline void NodeHeartbeatInfo::set_allocated_servicename(std::string* servicename) {
  if (servicename != nullptr) {
    
  } else {
    
  }
  _impl_.servicename_.SetAllocated(servicename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.servicename_.IsDefault()) {
    _impl_.servicename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NodeHeartbeatInfo.ServiceName)
}

// string address = 2;
inline void NodeHeartbeatInfo::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& NodeHeartbeatInfo::address() const {
  // @@protoc_insertion_point(field_get:NodeHeartbeatInfo.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeHeartbeatInfo::set_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NodeHeartbeatInfo.address)
}
inline std::string* NodeHeartbeatInfo::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:NodeHeartbeatInfo.address)
  return _s;
}
inline const std::string& NodeHeartbeatInfo::_internal_address() const {
  return _impl_.address_.Get();
}
inline void NodeHeartbeatInfo::_internal_set_address(const std::string& value) {
  
  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* NodeHeartbeatInfo::_internal_mutable_address() {
  
  return _impl_.address_.Mutable(GetArenaForAllocation());
}
inline std::string* NodeHeartbeatInfo::release_address() {
  // @@protoc_insertion_point(field_release:NodeHeartbeatInfo.address)
  return _impl_.address_.Release();
}
inline void NodeHeartbeatInfo::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  _impl_.address_.SetAllocated(address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NodeHeartbeatInfo.address)
}

// sint32 IpType = 3;
inline void NodeHeartbeatInfo::clear_iptype() {
  _impl_.iptype_ = 0;
}
inline int32_t NodeHeartbeatInfo::_internal_iptype() const {
  return _impl_.iptype_;
}
inline int32_t NodeHeartbeatInfo::iptype() const {
  // @@protoc_insertion_point(field_get:NodeHeartbeatInfo.IpType)
  return _internal_iptype();
}
inline void NodeHeartbeatInfo::_internal_set_iptype(int32_t value) {
  
  _impl_.iptype_ = value;
}
inline void NodeHeartbeatInfo::set_iptype(int32_t value) {
  _internal_set_iptype(value);
  // @@protoc_insertion_point(field_set:NodeHeartbeatInfo.IpType)
}

// uint32 InnerLinkPort = 4;
inline void NodeHeartbeatInfo::clear_innerlinkport() {
  _impl_.innerlinkport_ = 0u;
}
inline uint32_t NodeHeartbeatInfo::_internal_innerlinkport() const {
  return _impl_.innerlinkport_;
}
inline uint32_t NodeHeartbeatInfo::innerlinkport() const {
  // @@protoc_insertion_point(field_get:NodeHeartbeatInfo.InnerLinkPort)
  return _internal_innerlinkport();
}
inline void NodeHeartbeatInfo::_internal_set_innerlinkport(uint32_t value) {
  
  _impl_.innerlinkport_ = value;
}
inline void NodeHeartbeatInfo::set_innerlinkport(uint32_t value) {
  _internal_set_innerlinkport(value);
  // @@protoc_insertion_point(field_set:NodeHeartbeatInfo.InnerLinkPort)
}

// repeated sint32 SubscribeOpcodes = 5;
inline int NodeHeartbeatInfo::_internal_subscribeopcodes_size() const {
  return _impl_.subscribeopcodes_.size();
}
inline int NodeHeartbeatInfo::subscribeopcodes_size() const {
  return _internal_subscribeopcodes_size();
}
inline void NodeHeartbeatInfo::clear_subscribeopcodes() {
  _impl_.subscribeopcodes_.Clear();
}
inline int32_t NodeHeartbeatInfo::_internal_subscribeopcodes(int index) const {
  return _impl_.subscribeopcodes_.Get(index);
}
inline int32_t NodeHeartbeatInfo::subscribeopcodes(int index) const {
  // @@protoc_insertion_point(field_get:NodeHeartbeatInfo.SubscribeOpcodes)
  return _internal_subscribeopcodes(index);
}
inline void NodeHeartbeatInfo::set_subscribeopcodes(int index, int32_t value) {
  _impl_.subscribeopcodes_.Set(index, value);
  // @@protoc_insertion_point(field_set:NodeHeartbeatInfo.SubscribeOpcodes)
}
inline void NodeHeartbeatInfo::_internal_add_subscribeopcodes(int32_t value) {
  _impl_.subscribeopcodes_.Add(value);
}
inline void NodeHeartbeatInfo::add_subscribeopcodes(int32_t value) {
  _internal_add_subscribeopcodes(value);
  // @@protoc_insertion_point(field_add:NodeHeartbeatInfo.SubscribeOpcodes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NodeHeartbeatInfo::_internal_subscribeopcodes() const {
  return _impl_.subscribeopcodes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NodeHeartbeatInfo::subscribeopcodes() const {
  // @@protoc_insertion_point(field_list:NodeHeartbeatInfo.SubscribeOpcodes)
  return _internal_subscribeopcodes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NodeHeartbeatInfo::_internal_mutable_subscribeopcodes() {
  return &_impl_.subscribeopcodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NodeHeartbeatInfo::mutable_subscribeopcodes() {
  // @@protoc_insertion_point(field_mutable_list:NodeHeartbeatInfo.SubscribeOpcodes)
  return _internal_mutable_subscribeopcodes();
}

// repeated string ApiList = 6;
inline int NodeHeartbeatInfo::_internal_apilist_size() const {
  return _impl_.apilist_.size();
}
inline int NodeHeartbeatInfo::apilist_size() const {
  return _internal_apilist_size();
}
inline void NodeHeartbeatInfo::clear_apilist() {
  _impl_.apilist_.Clear();
}
inline std::string* NodeHeartbeatInfo::add_apilist() {
  std::string* _s = _internal_add_apilist();
  // @@protoc_insertion_point(field_add_mutable:NodeHeartbeatInfo.ApiList)
  return _s;
}
inline const std::string& NodeHeartbeatInfo::_internal_apilist(int index) const {
  return _impl_.apilist_.Get(index);
}
inline const std::string& NodeHeartbeatInfo::apilist(int index) const {
  // @@protoc_insertion_point(field_get:NodeHeartbeatInfo.ApiList)
  return _internal_apilist(index);
}
inline std::string* NodeHeartbeatInfo::mutable_apilist(int index) {
  // @@protoc_insertion_point(field_mutable:NodeHeartbeatInfo.ApiList)
  return _impl_.apilist_.Mutable(index);
}
inline void NodeHeartbeatInfo::set_apilist(int index, const std::string& value) {
  _impl_.apilist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:NodeHeartbeatInfo.ApiList)
}
inline void NodeHeartbeatInfo::set_apilist(int index, std::string&& value) {
  _impl_.apilist_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:NodeHeartbeatInfo.ApiList)
}
inline void NodeHeartbeatInfo::set_apilist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.apilist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NodeHeartbeatInfo.ApiList)
}
inline void NodeHeartbeatInfo::set_apilist(int index, const char* value, size_t size) {
  _impl_.apilist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NodeHeartbeatInfo.ApiList)
}
inline std::string* NodeHeartbeatInfo::_internal_add_apilist() {
  return _impl_.apilist_.Add();
}
inline void NodeHeartbeatInfo::add_apilist(const std::string& value) {
  _impl_.apilist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NodeHeartbeatInfo.ApiList)
}
inline void NodeHeartbeatInfo::add_apilist(std::string&& value) {
  _impl_.apilist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NodeHeartbeatInfo.ApiList)
}
inline void NodeHeartbeatInfo::add_apilist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.apilist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NodeHeartbeatInfo.ApiList)
}
inline void NodeHeartbeatInfo::add_apilist(const char* value, size_t size) {
  _impl_.apilist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NodeHeartbeatInfo.ApiList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NodeHeartbeatInfo::apilist() const {
  // @@protoc_insertion_point(field_list:NodeHeartbeatInfo.ApiList)
  return _impl_.apilist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NodeHeartbeatInfo::mutable_apilist() {
  // @@protoc_insertion_point(field_mutable_list:NodeHeartbeatInfo.ApiList)
  return &_impl_.apilist_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::NODE_IPTYPE_TYPE_ENUMS> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NODE_IPTYPE_TYPE_ENUMS>() {
  return ::NODE_IPTYPE_TYPE_ENUMS_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>

class NODE_IPTYPEFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, NODE_IPTYPEFactory);
public:

    virtual void Release() override {
        NODE_IPTYPEFactory::Delete_NODE_IPTYPEFactory(this);
    }

    static NODE_IPTYPEFactory *CreateFactory() {
        return NODE_IPTYPEFactory::New_NODE_IPTYPEFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new NODE_IPTYPE();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new NODE_IPTYPE(*dynamic_cast<const NODE_IPTYPE *>(coder));
    }

};


class NodeHeartbeatInfoFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, NodeHeartbeatInfoFactory);
public:

    virtual void Release() override {
        NodeHeartbeatInfoFactory::Delete_NodeHeartbeatInfoFactory(this);
    }

    static NodeHeartbeatInfoFactory *CreateFactory() {
        return NodeHeartbeatInfoFactory::New_NodeHeartbeatInfoFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new NodeHeartbeatInfo();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new NodeHeartbeatInfo(*dynamic_cast<const NodeHeartbeatInfo *>(coder));
    }

};

#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_com_5fheartbeat_2eproto
