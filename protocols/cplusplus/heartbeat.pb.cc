#include <pch.h>
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: heartbeat.proto

#include <protocols/cplusplus/heartbeat.pb.h>
POOL_CREATE_OBJ_DEFAULT_IMPL(NodeHeartbeatReqFactory);
POOL_CREATE_OBJ_DEFAULT_IMPL(NodeHeartbeatResFactory);
POOL_CREATE_OBJ_DEFAULT_IMPL(RegisterNodeReqFactory);
POOL_CREATE_OBJ_DEFAULT_IMPL(RegisterNodeResFactory);
POOL_CREATE_OBJ_DEFAULT_IMPL(GetNodeListReqFactory);
POOL_CREATE_OBJ_DEFAULT_IMPL(GetNodeListResFactory);
POOL_CREATE_OBJ_DEFAULT_IMPL(ClientHeartbeatReqFactory);

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR NodeHeartbeatReq::NodeHeartbeatReq(
    ::_pbi::ConstantInitialized) {}
struct NodeHeartbeatReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeHeartbeatReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeHeartbeatReqDefaultTypeInternal() {}
  union {
    NodeHeartbeatReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeHeartbeatReqDefaultTypeInternal _NodeHeartbeatReq_default_instance_;
PROTOBUF_CONSTEXPR NodeHeartbeatRes::NodeHeartbeatRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nowtimenanoseconds_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NodeHeartbeatResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeHeartbeatResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeHeartbeatResDefaultTypeInternal() {}
  union {
    NodeHeartbeatRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeHeartbeatResDefaultTypeInternal _NodeHeartbeatRes_default_instance_;
PROTOBUF_CONSTEXPR RegisterNodeReq::RegisterNodeReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nodeinfo_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterNodeReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterNodeReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterNodeReqDefaultTypeInternal() {}
  union {
    RegisterNodeReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterNodeReqDefaultTypeInternal _RegisterNodeReq_default_instance_;
PROTOBUF_CONSTEXPR RegisterNodeRes::RegisterNodeRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.errcode_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterNodeResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterNodeResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterNodeResDefaultTypeInternal() {}
  union {
    RegisterNodeRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterNodeResDefaultTypeInternal _RegisterNodeRes_default_instance_;
PROTOBUF_CONSTEXPR GetNodeListReq::GetNodeListReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.carenodeservicenamelist_)*/{}
  , /*decltype(_impl_.clustername_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetNodeListReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetNodeListReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetNodeListReqDefaultTypeInternal() {}
  union {
    GetNodeListReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetNodeListReqDefaultTypeInternal _GetNodeListReq_default_instance_;
PROTOBUF_CONSTEXPR GetNodeListRes::GetNodeListRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nodeinfolist_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetNodeListResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetNodeListResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetNodeListResDefaultTypeInternal() {}
  union {
    GetNodeListRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetNodeListResDefaultTypeInternal _GetNodeListRes_default_instance_;
PROTOBUF_CONSTEXPR ClientHeartbeatReq::ClientHeartbeatReq(
    ::_pbi::ConstantInitialized) {}
struct ClientHeartbeatReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientHeartbeatReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientHeartbeatReqDefaultTypeInternal() {}
  union {
    ClientHeartbeatReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientHeartbeatReqDefaultTypeInternal _ClientHeartbeatReq_default_instance_;
static ::_pb::Metadata file_level_metadata_heartbeat_2eproto[7];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_heartbeat_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_heartbeat_2eproto = nullptr;

const uint32_t TableStruct_heartbeat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NodeHeartbeatReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NodeHeartbeatRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::NodeHeartbeatRes, _impl_.nowtimenanoseconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RegisterNodeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RegisterNodeReq, _impl_.nodeinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RegisterNodeRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RegisterNodeRes, _impl_.errcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetNodeListReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GetNodeListReq, _impl_.clustername_),
  PROTOBUF_FIELD_OFFSET(::GetNodeListReq, _impl_.carenodeservicenamelist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetNodeListRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GetNodeListRes, _impl_.nodeinfolist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientHeartbeatReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::NodeHeartbeatReq)},
  { 6, -1, -1, sizeof(::NodeHeartbeatRes)},
  { 13, -1, -1, sizeof(::RegisterNodeReq)},
  { 20, -1, -1, sizeof(::RegisterNodeRes)},
  { 27, -1, -1, sizeof(::GetNodeListReq)},
  { 35, -1, -1, sizeof(::GetNodeListRes)},
  { 42, -1, -1, sizeof(::ClientHeartbeatReq)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_NodeHeartbeatReq_default_instance_._instance,
  &::_NodeHeartbeatRes_default_instance_._instance,
  &::_RegisterNodeReq_default_instance_._instance,
  &::_RegisterNodeRes_default_instance_._instance,
  &::_GetNodeListReq_default_instance_._instance,
  &::_GetNodeListRes_default_instance_._instance,
  &::_ClientHeartbeatReq_default_instance_._instance,
};

const char descriptor_table_protodef_heartbeat_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017heartbeat.proto\032\023com_heartbeat.proto\"\022"
  "\n\020NodeHeartbeatReq\".\n\020NodeHeartbeatRes\022\032"
  "\n\022NowTimeNanoseconds\030\001 \001(\022\"7\n\017RegisterNo"
  "deReq\022$\n\010NodeInfo\030\001 \001(\0132\022.NodeHeartbeatI"
  "nfo\"\"\n\017RegisterNodeRes\022\017\n\007ErrCode\030\001 \001(\021\""
  "F\n\016GetNodeListReq\022\023\n\013ClusterName\030\001 \001(\t\022\037"
  "\n\027CareNodeServiceNameList\030\002 \003(\t\":\n\016GetNo"
  "deListRes\022(\n\014NodeInfoList\030\001 \003(\0132\022.NodeHe"
  "artbeatInfo\"\024\n\022ClientHeartbeatReqb\006proto"
  "3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_heartbeat_2eproto_deps[1] = {
  &::descriptor_table_com_5fheartbeat_2eproto,
};
static ::_pbi::once_flag descriptor_table_heartbeat_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_heartbeat_2eproto = {
    false, false, 361, descriptor_table_protodef_heartbeat_2eproto,
    "heartbeat.proto",
    &descriptor_table_heartbeat_2eproto_once, descriptor_table_heartbeat_2eproto_deps, 1, 7,
    schemas, file_default_instances, TableStruct_heartbeat_2eproto::offsets,
    file_level_metadata_heartbeat_2eproto, file_level_enum_descriptors_heartbeat_2eproto,
    file_level_service_descriptors_heartbeat_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_heartbeat_2eproto_getter() {
  return &descriptor_table_heartbeat_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_heartbeat_2eproto(&descriptor_table_heartbeat_2eproto);

// ===================================================================

class NodeHeartbeatReq::_Internal {
 public:
};

NodeHeartbeatReq::NodeHeartbeatReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:NodeHeartbeatReq)
}
NodeHeartbeatReq::NodeHeartbeatReq(const NodeHeartbeatReq& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  NodeHeartbeatReq* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NodeHeartbeatReq)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeHeartbeatReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeHeartbeatReq::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata NodeHeartbeatReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_heartbeat_2eproto_getter, &descriptor_table_heartbeat_2eproto_once,
      file_level_metadata_heartbeat_2eproto[0]);
}

// ===================================================================

class NodeHeartbeatRes::_Internal {
 public:
};

NodeHeartbeatRes::NodeHeartbeatRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:NodeHeartbeatRes)
}
NodeHeartbeatRes::NodeHeartbeatRes(const NodeHeartbeatRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NodeHeartbeatRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nowtimenanoseconds_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.nowtimenanoseconds_ = from._impl_.nowtimenanoseconds_;
  // @@protoc_insertion_point(copy_constructor:NodeHeartbeatRes)
}

inline void NodeHeartbeatRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nowtimenanoseconds_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NodeHeartbeatRes::~NodeHeartbeatRes() {
  // @@protoc_insertion_point(destructor:NodeHeartbeatRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NodeHeartbeatRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NodeHeartbeatRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NodeHeartbeatRes::Clear() {
// @@protoc_insertion_point(message_clear_start:NodeHeartbeatRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nowtimenanoseconds_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeHeartbeatRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint64 NowTimeNanoseconds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.nowtimenanoseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NodeHeartbeatRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodeHeartbeatRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint64 NowTimeNanoseconds = 1;
  if (this->_internal_nowtimenanoseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(1, this->_internal_nowtimenanoseconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodeHeartbeatRes)
  return target;
}

size_t NodeHeartbeatRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NodeHeartbeatRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint64 NowTimeNanoseconds = 1;
  if (this->_internal_nowtimenanoseconds() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_nowtimenanoseconds());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeHeartbeatRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NodeHeartbeatRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeHeartbeatRes::GetClassData() const { return &_class_data_; }


void NodeHeartbeatRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NodeHeartbeatRes*>(&to_msg);
  auto& from = static_cast<const NodeHeartbeatRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NodeHeartbeatRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_nowtimenanoseconds() != 0) {
    _this->_internal_set_nowtimenanoseconds(from._internal_nowtimenanoseconds());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeHeartbeatRes::CopyFrom(const NodeHeartbeatRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NodeHeartbeatRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeHeartbeatRes::IsInitialized() const {
  return true;
}

void NodeHeartbeatRes::InternalSwap(NodeHeartbeatRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.nowtimenanoseconds_, other->_impl_.nowtimenanoseconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeHeartbeatRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_heartbeat_2eproto_getter, &descriptor_table_heartbeat_2eproto_once,
      file_level_metadata_heartbeat_2eproto[1]);
}

// ===================================================================

class RegisterNodeReq::_Internal {
 public:
  static const ::NodeHeartbeatInfo& nodeinfo(const RegisterNodeReq* msg);
};

const ::NodeHeartbeatInfo&
RegisterNodeReq::_Internal::nodeinfo(const RegisterNodeReq* msg) {
  return *msg->_impl_.nodeinfo_;
}
void RegisterNodeReq::clear_nodeinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.nodeinfo_ != nullptr) {
    delete _impl_.nodeinfo_;
  }
  _impl_.nodeinfo_ = nullptr;
}
RegisterNodeReq::RegisterNodeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RegisterNodeReq)
}
RegisterNodeReq::RegisterNodeReq(const RegisterNodeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterNodeReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nodeinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_nodeinfo()) {
    _this->_impl_.nodeinfo_ = new ::NodeHeartbeatInfo(*from._impl_.nodeinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:RegisterNodeReq)
}

inline void RegisterNodeReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nodeinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegisterNodeReq::~RegisterNodeReq() {
  // @@protoc_insertion_point(destructor:RegisterNodeReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterNodeReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.nodeinfo_;
}

void RegisterNodeReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterNodeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:RegisterNodeReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.nodeinfo_ != nullptr) {
    delete _impl_.nodeinfo_;
  }
  _impl_.nodeinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterNodeReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .NodeHeartbeatInfo NodeInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_nodeinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterNodeReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RegisterNodeReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .NodeHeartbeatInfo NodeInfo = 1;
  if (this->_internal_has_nodeinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::nodeinfo(this),
        _Internal::nodeinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RegisterNodeReq)
  return target;
}

size_t RegisterNodeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RegisterNodeReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NodeHeartbeatInfo NodeInfo = 1;
  if (this->_internal_has_nodeinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nodeinfo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterNodeReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterNodeReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterNodeReq::GetClassData() const { return &_class_data_; }


void RegisterNodeReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterNodeReq*>(&to_msg);
  auto& from = static_cast<const RegisterNodeReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RegisterNodeReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_nodeinfo()) {
    _this->_internal_mutable_nodeinfo()->::NodeHeartbeatInfo::MergeFrom(
        from._internal_nodeinfo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterNodeReq::CopyFrom(const RegisterNodeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RegisterNodeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterNodeReq::IsInitialized() const {
  return true;
}

void RegisterNodeReq::InternalSwap(RegisterNodeReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.nodeinfo_, other->_impl_.nodeinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterNodeReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_heartbeat_2eproto_getter, &descriptor_table_heartbeat_2eproto_once,
      file_level_metadata_heartbeat_2eproto[2]);
}

// ===================================================================

class RegisterNodeRes::_Internal {
 public:
};

RegisterNodeRes::RegisterNodeRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RegisterNodeRes)
}
RegisterNodeRes::RegisterNodeRes(const RegisterNodeRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterNodeRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.errcode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.errcode_ = from._impl_.errcode_;
  // @@protoc_insertion_point(copy_constructor:RegisterNodeRes)
}

inline void RegisterNodeRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.errcode_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegisterNodeRes::~RegisterNodeRes() {
  // @@protoc_insertion_point(destructor:RegisterNodeRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterNodeRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RegisterNodeRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterNodeRes::Clear() {
// @@protoc_insertion_point(message_clear_start:RegisterNodeRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.errcode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterNodeRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 ErrCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.errcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterNodeRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RegisterNodeRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 ErrCode = 1;
  if (this->_internal_errcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_errcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RegisterNodeRes)
  return target;
}

size_t RegisterNodeRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RegisterNodeRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 ErrCode = 1;
  if (this->_internal_errcode() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_errcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterNodeRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterNodeRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterNodeRes::GetClassData() const { return &_class_data_; }


void RegisterNodeRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterNodeRes*>(&to_msg);
  auto& from = static_cast<const RegisterNodeRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RegisterNodeRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_errcode() != 0) {
    _this->_internal_set_errcode(from._internal_errcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterNodeRes::CopyFrom(const RegisterNodeRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RegisterNodeRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterNodeRes::IsInitialized() const {
  return true;
}

void RegisterNodeRes::InternalSwap(RegisterNodeRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.errcode_, other->_impl_.errcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterNodeRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_heartbeat_2eproto_getter, &descriptor_table_heartbeat_2eproto_once,
      file_level_metadata_heartbeat_2eproto[3]);
}

// ===================================================================

class GetNodeListReq::_Internal {
 public:
};

GetNodeListReq::GetNodeListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GetNodeListReq)
}
GetNodeListReq::GetNodeListReq(const GetNodeListReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetNodeListReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.carenodeservicenamelist_){from._impl_.carenodeservicenamelist_}
    , decltype(_impl_.clustername_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.clustername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clustername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clustername().empty()) {
    _this->_impl_.clustername_.Set(from._internal_clustername(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:GetNodeListReq)
}

inline void GetNodeListReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.carenodeservicenamelist_){arena}
    , decltype(_impl_.clustername_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.clustername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clustername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetNodeListReq::~GetNodeListReq() {
  // @@protoc_insertion_point(destructor:GetNodeListReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetNodeListReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.carenodeservicenamelist_.~RepeatedPtrField();
  _impl_.clustername_.Destroy();
}

void GetNodeListReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetNodeListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:GetNodeListReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.carenodeservicenamelist_.Clear();
  _impl_.clustername_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNodeListReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ClusterName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_clustername();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GetNodeListReq.ClusterName"));
        } else
          goto handle_unusual;
        continue;
      // repeated string CareNodeServiceNameList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_carenodeservicenamelist();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "GetNodeListReq.CareNodeServiceNameList"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetNodeListReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetNodeListReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ClusterName = 1;
  if (!this->_internal_clustername().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clustername().data(), static_cast<int>(this->_internal_clustername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetNodeListReq.ClusterName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clustername(), target);
  }

  // repeated string CareNodeServiceNameList = 2;
  for (int i = 0, n = this->_internal_carenodeservicenamelist_size(); i < n; i++) {
    const auto& s = this->_internal_carenodeservicenamelist(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetNodeListReq.CareNodeServiceNameList");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetNodeListReq)
  return target;
}

size_t GetNodeListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetNodeListReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string CareNodeServiceNameList = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.carenodeservicenamelist_.size());
  for (int i = 0, n = _impl_.carenodeservicenamelist_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.carenodeservicenamelist_.Get(i));
  }

  // string ClusterName = 1;
  if (!this->_internal_clustername().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clustername());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetNodeListReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetNodeListReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetNodeListReq::GetClassData() const { return &_class_data_; }


void GetNodeListReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetNodeListReq*>(&to_msg);
  auto& from = static_cast<const GetNodeListReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GetNodeListReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.carenodeservicenamelist_.MergeFrom(from._impl_.carenodeservicenamelist_);
  if (!from._internal_clustername().empty()) {
    _this->_internal_set_clustername(from._internal_clustername());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetNodeListReq::CopyFrom(const GetNodeListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetNodeListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeListReq::IsInitialized() const {
  return true;
}

void GetNodeListReq::InternalSwap(GetNodeListReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.carenodeservicenamelist_.InternalSwap(&other->_impl_.carenodeservicenamelist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clustername_, lhs_arena,
      &other->_impl_.clustername_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNodeListReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_heartbeat_2eproto_getter, &descriptor_table_heartbeat_2eproto_once,
      file_level_metadata_heartbeat_2eproto[4]);
}

// ===================================================================

class GetNodeListRes::_Internal {
 public:
};

void GetNodeListRes::clear_nodeinfolist() {
  _impl_.nodeinfolist_.Clear();
}
GetNodeListRes::GetNodeListRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GetNodeListRes)
}
GetNodeListRes::GetNodeListRes(const GetNodeListRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetNodeListRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nodeinfolist_){from._impl_.nodeinfolist_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GetNodeListRes)
}

inline void GetNodeListRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nodeinfolist_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetNodeListRes::~GetNodeListRes() {
  // @@protoc_insertion_point(destructor:GetNodeListRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetNodeListRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nodeinfolist_.~RepeatedPtrField();
}

void GetNodeListRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetNodeListRes::Clear() {
// @@protoc_insertion_point(message_clear_start:GetNodeListRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nodeinfolist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNodeListRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .NodeHeartbeatInfo NodeInfoList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodeinfolist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetNodeListRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetNodeListRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NodeHeartbeatInfo NodeInfoList = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nodeinfolist_size()); i < n; i++) {
    const auto& repfield = this->_internal_nodeinfolist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetNodeListRes)
  return target;
}

size_t GetNodeListRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetNodeListRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NodeHeartbeatInfo NodeInfoList = 1;
  total_size += 1UL * this->_internal_nodeinfolist_size();
  for (const auto& msg : this->_impl_.nodeinfolist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetNodeListRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetNodeListRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetNodeListRes::GetClassData() const { return &_class_data_; }


void GetNodeListRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetNodeListRes*>(&to_msg);
  auto& from = static_cast<const GetNodeListRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GetNodeListRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.nodeinfolist_.MergeFrom(from._impl_.nodeinfolist_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetNodeListRes::CopyFrom(const GetNodeListRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetNodeListRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeListRes::IsInitialized() const {
  return true;
}

void GetNodeListRes::InternalSwap(GetNodeListRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.nodeinfolist_.InternalSwap(&other->_impl_.nodeinfolist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNodeListRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_heartbeat_2eproto_getter, &descriptor_table_heartbeat_2eproto_once,
      file_level_metadata_heartbeat_2eproto[5]);
}

// ===================================================================

class ClientHeartbeatReq::_Internal {
 public:
};

ClientHeartbeatReq::ClientHeartbeatReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:ClientHeartbeatReq)
}
ClientHeartbeatReq::ClientHeartbeatReq(const ClientHeartbeatReq& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ClientHeartbeatReq* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ClientHeartbeatReq)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientHeartbeatReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientHeartbeatReq::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ClientHeartbeatReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_heartbeat_2eproto_getter, &descriptor_table_heartbeat_2eproto_once,
      file_level_metadata_heartbeat_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::NodeHeartbeatReq*
Arena::CreateMaybeMessage< ::NodeHeartbeatReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NodeHeartbeatReq >(arena);
}
template<> PROTOBUF_NOINLINE ::NodeHeartbeatRes*
Arena::CreateMaybeMessage< ::NodeHeartbeatRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NodeHeartbeatRes >(arena);
}
template<> PROTOBUF_NOINLINE ::RegisterNodeReq*
Arena::CreateMaybeMessage< ::RegisterNodeReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RegisterNodeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::RegisterNodeRes*
Arena::CreateMaybeMessage< ::RegisterNodeRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RegisterNodeRes >(arena);
}
template<> PROTOBUF_NOINLINE ::GetNodeListReq*
Arena::CreateMaybeMessage< ::GetNodeListReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetNodeListReq >(arena);
}
template<> PROTOBUF_NOINLINE ::GetNodeListRes*
Arena::CreateMaybeMessage< ::GetNodeListRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetNodeListRes >(arena);
}
template<> PROTOBUF_NOINLINE ::ClientHeartbeatReq*
Arena::CreateMaybeMessage< ::ClientHeartbeatReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClientHeartbeatReq >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
