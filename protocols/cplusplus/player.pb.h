// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_player_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_player_2eproto

// KERNEL_INCLUDED
#include <kernel/kernel.h>
#include <google/protobuf/util/json_util.h>
#include <google/protobuf/text_format.h>

#ifdef GetMessage
 #undef GetMessage
#endif


#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "com_player.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_player_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_player_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_player_2eproto;
namespace CRYSTAL_NET {
namespace service {
class ModifyPlayerNameReq;
struct ModifyPlayerNameReqDefaultTypeInternal;
extern ModifyPlayerNameReqDefaultTypeInternal _ModifyPlayerNameReq_default_instance_;
class ModifyPlayerNameRes;
struct ModifyPlayerNameResDefaultTypeInternal;
extern ModifyPlayerNameResDefaultTypeInternal _ModifyPlayerNameRes_default_instance_;
class PlayerDataNty;
struct PlayerDataNtyDefaultTypeInternal;
extern PlayerDataNtyDefaultTypeInternal _PlayerDataNty_default_instance_;
class PlayerDataReq;
struct PlayerDataReqDefaultTypeInternal;
extern PlayerDataReqDefaultTypeInternal _PlayerDataReq_default_instance_;
class PlayerDataRes;
struct PlayerDataResDefaultTypeInternal;
extern PlayerDataResDefaultTypeInternal _PlayerDataRes_default_instance_;
}  // namespace service
}  // namespace CRYSTAL_NET
PROTOBUF_NAMESPACE_OPEN
template<> ::CRYSTAL_NET::service::ModifyPlayerNameReq* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::ModifyPlayerNameReq>(Arena*);
template<> ::CRYSTAL_NET::service::ModifyPlayerNameRes* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::ModifyPlayerNameRes>(Arena*);
template<> ::CRYSTAL_NET::service::PlayerDataNty* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::PlayerDataNty>(Arena*);
template<> ::CRYSTAL_NET::service::PlayerDataReq* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::PlayerDataReq>(Arena*);
template<> ::CRYSTAL_NET::service::PlayerDataRes* Arena::CreateMaybeMessage<::CRYSTAL_NET::service::PlayerDataRes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CRYSTAL_NET {
namespace service {

// ===================================================================

// AnnotaionInfo[opcode(7), nolog(false), XorEncrypt(false), KeyBase64(false)]
class PlayerDataReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.PlayerDataReq) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) const override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message PlayerDataReq failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message PlayerDataReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) const override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message PlayerDataReq failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message PlayerDataReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message PlayerDataReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message PlayerDataReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline PlayerDataReq() : PlayerDataReq(nullptr) {}
  ~PlayerDataReq() override;
  explicit PROTOBUF_CONSTEXPR PlayerDataReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerDataReq(const PlayerDataReq& from);
  PlayerDataReq(PlayerDataReq&& from) noexcept
    : PlayerDataReq() {
    *this = ::std::move(from);
  }

  inline PlayerDataReq& operator=(const PlayerDataReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerDataReq& operator=(PlayerDataReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerDataReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerDataReq* internal_default_instance() {
    return reinterpret_cast<const PlayerDataReq*>(
               &_PlayerDataReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlayerDataReq& a, PlayerDataReq& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerDataReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerDataReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerDataReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerDataReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerDataReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerDataReq& from) {
    PlayerDataReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerDataReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.PlayerDataReq";
  }
  protected:
  explicit PlayerDataReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kPwdFieldNumber = 2,
  };
  // optional string account = 1;
  bool has_account() const;
  private:
  bool _internal_has_account() const;
  public:
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_NODISCARD std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // optional string pwd = 2;
  bool has_pwd() const;
  private:
  bool _internal_has_pwd() const;
  public:
  void clear_pwd();
  const std::string& pwd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pwd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pwd();
  PROTOBUF_NODISCARD std::string* release_pwd();
  void set_allocated_pwd(std::string* pwd);
  private:
  const std::string& _internal_pwd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pwd(const std::string& value);
  std::string* _internal_mutable_pwd();
  public:

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.PlayerDataReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pwd_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_player_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(8), nolog(false), XorEncrypt(false), KeyBase64(false)]
class PlayerDataRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.PlayerDataRes) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) const override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message PlayerDataRes failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message PlayerDataRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) const override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message PlayerDataRes failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message PlayerDataRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message PlayerDataRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message PlayerDataRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline PlayerDataRes() : PlayerDataRes(nullptr) {}
  ~PlayerDataRes() override;
  explicit PROTOBUF_CONSTEXPR PlayerDataRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerDataRes(const PlayerDataRes& from);
  PlayerDataRes(PlayerDataRes&& from) noexcept
    : PlayerDataRes() {
    *this = ::std::move(from);
  }

  inline PlayerDataRes& operator=(const PlayerDataRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerDataRes& operator=(PlayerDataRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerDataRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerDataRes* internal_default_instance() {
    return reinterpret_cast<const PlayerDataRes*>(
               &_PlayerDataRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PlayerDataRes& a, PlayerDataRes& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerDataRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerDataRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerDataRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerDataRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerDataRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerDataRes& from) {
    PlayerDataRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerDataRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.PlayerDataRes";
  }
  protected:
  explicit PlayerDataRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginTokenFieldNumber = 3,
    kPlayerDataFieldNumber = 2,
    kErrCodeFieldNumber = 1,
  };
  // optional string loginToken = 3;
  bool has_logintoken() const;
  private:
  bool _internal_has_logintoken() const;
  public:
  void clear_logintoken();
  const std::string& logintoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_logintoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_logintoken();
  PROTOBUF_NODISCARD std::string* release_logintoken();
  void set_allocated_logintoken(std::string* logintoken);
  private:
  const std::string& _internal_logintoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_logintoken(const std::string& value);
  std::string* _internal_mutable_logintoken();
  public:

  // optional .CRYSTAL_NET.service.PlayerData playerData = 2;
  bool has_playerdata() const;
  private:
  bool _internal_has_playerdata() const;
  public:
  void clear_playerdata();
  const ::CRYSTAL_NET::service::PlayerData& playerdata() const;
  PROTOBUF_NODISCARD ::CRYSTAL_NET::service::PlayerData* release_playerdata();
  ::CRYSTAL_NET::service::PlayerData* mutable_playerdata();
  void set_allocated_playerdata(::CRYSTAL_NET::service::PlayerData* playerdata);
  private:
  const ::CRYSTAL_NET::service::PlayerData& _internal_playerdata() const;
  ::CRYSTAL_NET::service::PlayerData* _internal_mutable_playerdata();
  public:
  void unsafe_arena_set_allocated_playerdata(
      ::CRYSTAL_NET::service::PlayerData* playerdata);
  ::CRYSTAL_NET::service::PlayerData* unsafe_arena_release_playerdata();

  // optional sint32 errCode = 1;
  bool has_errcode() const;
  private:
  bool _internal_has_errcode() const;
  public:
  void clear_errcode();
  int32_t errcode() const;
  void set_errcode(int32_t value);
  private:
  int32_t _internal_errcode() const;
  void _internal_set_errcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.PlayerDataRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logintoken_;
    ::CRYSTAL_NET::service::PlayerData* playerdata_;
    int32_t errcode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_player_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(9), nolog(false), XorEncrypt(false), KeyBase64(false)]
class ModifyPlayerNameReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.ModifyPlayerNameReq) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) const override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message ModifyPlayerNameReq failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message ModifyPlayerNameReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) const override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message ModifyPlayerNameReq failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message ModifyPlayerNameReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message ModifyPlayerNameReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message ModifyPlayerNameReq failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline ModifyPlayerNameReq() : ModifyPlayerNameReq(nullptr) {}
  ~ModifyPlayerNameReq() override;
  explicit PROTOBUF_CONSTEXPR ModifyPlayerNameReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModifyPlayerNameReq(const ModifyPlayerNameReq& from);
  ModifyPlayerNameReq(ModifyPlayerNameReq&& from) noexcept
    : ModifyPlayerNameReq() {
    *this = ::std::move(from);
  }

  inline ModifyPlayerNameReq& operator=(const ModifyPlayerNameReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModifyPlayerNameReq& operator=(ModifyPlayerNameReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModifyPlayerNameReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModifyPlayerNameReq* internal_default_instance() {
    return reinterpret_cast<const ModifyPlayerNameReq*>(
               &_ModifyPlayerNameReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ModifyPlayerNameReq& a, ModifyPlayerNameReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ModifyPlayerNameReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModifyPlayerNameReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModifyPlayerNameReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModifyPlayerNameReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModifyPlayerNameReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ModifyPlayerNameReq& from) {
    ModifyPlayerNameReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModifyPlayerNameReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.ModifyPlayerNameReq";
  }
  protected:
  explicit ModifyPlayerNameReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewNameFieldNumber = 1,
  };
  // optional string newName = 1;
  bool has_newname() const;
  private:
  bool _internal_has_newname() const;
  public:
  void clear_newname();
  const std::string& newname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_newname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_newname();
  PROTOBUF_NODISCARD std::string* release_newname();
  void set_allocated_newname(std::string* newname);
  private:
  const std::string& _internal_newname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_newname(const std::string& value);
  std::string* _internal_mutable_newname();
  public:

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.ModifyPlayerNameReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newname_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_player_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(10), nolog(false), XorEncrypt(false), KeyBase64(false)]
class ModifyPlayerNameRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.ModifyPlayerNameRes) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) const override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message ModifyPlayerNameRes failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message ModifyPlayerNameRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) const override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message ModifyPlayerNameRes failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message ModifyPlayerNameRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message ModifyPlayerNameRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message ModifyPlayerNameRes failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline ModifyPlayerNameRes() : ModifyPlayerNameRes(nullptr) {}
  ~ModifyPlayerNameRes() override;
  explicit PROTOBUF_CONSTEXPR ModifyPlayerNameRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModifyPlayerNameRes(const ModifyPlayerNameRes& from);
  ModifyPlayerNameRes(ModifyPlayerNameRes&& from) noexcept
    : ModifyPlayerNameRes() {
    *this = ::std::move(from);
  }

  inline ModifyPlayerNameRes& operator=(const ModifyPlayerNameRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModifyPlayerNameRes& operator=(ModifyPlayerNameRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModifyPlayerNameRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModifyPlayerNameRes* internal_default_instance() {
    return reinterpret_cast<const ModifyPlayerNameRes*>(
               &_ModifyPlayerNameRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ModifyPlayerNameRes& a, ModifyPlayerNameRes& b) {
    a.Swap(&b);
  }
  inline void Swap(ModifyPlayerNameRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModifyPlayerNameRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModifyPlayerNameRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModifyPlayerNameRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModifyPlayerNameRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ModifyPlayerNameRes& from) {
    ModifyPlayerNameRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModifyPlayerNameRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.ModifyPlayerNameRes";
  }
  protected:
  explicit ModifyPlayerNameRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrCodeFieldNumber = 1,
  };
  // optional sint32 errCode = 1;
  bool has_errcode() const;
  private:
  bool _internal_has_errcode() const;
  public:
  void clear_errcode();
  int32_t errcode() const;
  void set_errcode(int32_t value);
  private:
  int32_t _internal_errcode() const;
  void _internal_set_errcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.ModifyPlayerNameRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t errcode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_player_2eproto;
};
// -------------------------------------------------------------------

// AnnotaionInfo[opcode(11), nolog(false), XorEncrypt(false), KeyBase64(false)]
class PlayerDataNty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CRYSTAL_NET.service.PlayerDataNty) */ , public KERNEL_NS::ICoder {
public:
virtual void Release() override {
    delete this;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) const override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message PlayerDataNty failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message PlayerDataNty failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Encode(KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) const override {
    if (UNLIKELY(!IsInitialized()))
    {
      g_Log->Error(LOGFMT_OBJ_TAG("Encode message PlayerDataNty failed, error: %s"), InitializationErrorString().c_str());
      return false;
    }

    size_t payloadSize = ByteSizeLong();
    if (payloadSize == 0)
      return true;

    if(UNLIKELY(stream.GetBuffer() == NULL))
        stream.Init(payloadSize);

    auto writableSize = stream.GetWritableSize();
    if (writableSize < static_cast<Int64>(payloadSize))
    {
        if(UNLIKELY(!stream.AppendCapacity(static_cast<Int64>(payloadSize) - writableSize)))
        {
            g_Log->Error(LOGFMT_OBJ_TAG("stream append capacity fail IsAttach:%d"), stream.IsAttach());
            return false;
        }
    }

    if (UNLIKELY(!SerializeToArray(stream.GetWriteBegin(), static_cast<Int32>(stream.GetWritableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Encode message PlayerDataNty failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    stream.ShiftWritePos(payloadSize);
    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::MT> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message PlayerDataNty failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual bool Decode(const KERNEL_NS::LibStream<KERNEL_NS::_Build::TL> &stream) override {
    if (stream.GetReadableSize() == 0)
    {
        Clear();
        return true;
    }

    if (UNLIKELY(!ParseFromArray(stream.GetReadBegin(), static_cast<Int32>(stream.GetReadableSize()))))
    {
        g_Log->Error(LOGFMT_OBJ_TAG("Decode message PlayerDataNty failed, error: %s"), InitializationErrorString().c_str());
        return false;
    }

    return true;
}

virtual KERNEL_NS::LibString ToJsonString() const override {
    KERNEL_NS::LibString data;
    if(!::google::protobuf::util::MessageToJsonString(*this, &data.GetRaw()).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return "";
    }

    return data;
}

virtual bool ToJsonString(std::string *data) const override {
    if(!::google::protobuf::util::MessageToJsonString(*this, data).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("Turn JsonString fail:%s"), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}

virtual bool FromJsonString(const Byte8 *data, size_t len) override {
    auto &&jsonString = ::google::protobuf::StringPiece(data, len);
    if(!::google::protobuf::util::JsonStringToMessage(jsonString, this).ok())
    {
        g_Log->Warn(LOGFMT_OBJ_TAG("SimpleInfo field JsonStringToMessage fail jsonString:%s, message name:%s"), jsonString.as_string().c_str(), KERNEL_NS::RttiUtil::GetByObj(this));
        return false;
    }

    return true;
}


 public:
  inline PlayerDataNty() : PlayerDataNty(nullptr) {}
  ~PlayerDataNty() override;
  explicit PROTOBUF_CONSTEXPR PlayerDataNty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerDataNty(const PlayerDataNty& from);
  PlayerDataNty(PlayerDataNty&& from) noexcept
    : PlayerDataNty() {
    *this = ::std::move(from);
  }

  inline PlayerDataNty& operator=(const PlayerDataNty& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerDataNty& operator=(PlayerDataNty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerDataNty& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerDataNty* internal_default_instance() {
    return reinterpret_cast<const PlayerDataNty*>(
               &_PlayerDataNty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PlayerDataNty& a, PlayerDataNty& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerDataNty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerDataNty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerDataNty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerDataNty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerDataNty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerDataNty& from) {
    PlayerDataNty::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerDataNty* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CRYSTAL_NET.service.PlayerDataNty";
  }
  protected:
  explicit PlayerDataNty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerDataFieldNumber = 1,
  };
  // optional .CRYSTAL_NET.service.PlayerData playerData = 1;
  bool has_playerdata() const;
  private:
  bool _internal_has_playerdata() const;
  public:
  void clear_playerdata();
  const ::CRYSTAL_NET::service::PlayerData& playerdata() const;
  PROTOBUF_NODISCARD ::CRYSTAL_NET::service::PlayerData* release_playerdata();
  ::CRYSTAL_NET::service::PlayerData* mutable_playerdata();
  void set_allocated_playerdata(::CRYSTAL_NET::service::PlayerData* playerdata);
  private:
  const ::CRYSTAL_NET::service::PlayerData& _internal_playerdata() const;
  ::CRYSTAL_NET::service::PlayerData* _internal_mutable_playerdata();
  public:
  void unsafe_arena_set_allocated_playerdata(
      ::CRYSTAL_NET::service::PlayerData* playerdata);
  ::CRYSTAL_NET::service::PlayerData* unsafe_arena_release_playerdata();

  // @@protoc_insertion_point(class_scope:CRYSTAL_NET.service.PlayerDataNty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CRYSTAL_NET::service::PlayerData* playerdata_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_player_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlayerDataReq

// optional string account = 1;
inline bool PlayerDataReq::_internal_has_account() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PlayerDataReq::has_account() const {
  return _internal_has_account();
}
inline void PlayerDataReq::clear_account() {
  _impl_.account_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PlayerDataReq::account() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.PlayerDataReq.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerDataReq::set_account(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.account_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.PlayerDataReq.account)
}
inline std::string* PlayerDataReq::mutable_account() {
  std::string* _s = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.PlayerDataReq.account)
  return _s;
}
inline const std::string& PlayerDataReq::_internal_account() const {
  return _impl_.account_.Get();
}
inline void PlayerDataReq::_internal_set_account(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerDataReq::_internal_mutable_account() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.account_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerDataReq::release_account() {
  // @@protoc_insertion_point(field_release:CRYSTAL_NET.service.PlayerDataReq.account)
  if (!_internal_has_account()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.account_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.account_.IsDefault()) {
    _impl_.account_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PlayerDataReq::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.account_.SetAllocated(account, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.account_.IsDefault()) {
    _impl_.account_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRYSTAL_NET.service.PlayerDataReq.account)
}

// optional string pwd = 2;
inline bool PlayerDataReq::_internal_has_pwd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PlayerDataReq::has_pwd() const {
  return _internal_has_pwd();
}
inline void PlayerDataReq::clear_pwd() {
  _impl_.pwd_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PlayerDataReq::pwd() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.PlayerDataReq.pwd)
  return _internal_pwd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerDataReq::set_pwd(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.pwd_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.PlayerDataReq.pwd)
}
inline std::string* PlayerDataReq::mutable_pwd() {
  std::string* _s = _internal_mutable_pwd();
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.PlayerDataReq.pwd)
  return _s;
}
inline const std::string& PlayerDataReq::_internal_pwd() const {
  return _impl_.pwd_.Get();
}
inline void PlayerDataReq::_internal_set_pwd(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.pwd_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerDataReq::_internal_mutable_pwd() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.pwd_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerDataReq::release_pwd() {
  // @@protoc_insertion_point(field_release:CRYSTAL_NET.service.PlayerDataReq.pwd)
  if (!_internal_has_pwd()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.pwd_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pwd_.IsDefault()) {
    _impl_.pwd_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PlayerDataReq::set_allocated_pwd(std::string* pwd) {
  if (pwd != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.pwd_.SetAllocated(pwd, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pwd_.IsDefault()) {
    _impl_.pwd_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRYSTAL_NET.service.PlayerDataReq.pwd)
}

// -------------------------------------------------------------------

// PlayerDataRes

// optional sint32 errCode = 1;
inline bool PlayerDataRes::_internal_has_errcode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PlayerDataRes::has_errcode() const {
  return _internal_has_errcode();
}
inline void PlayerDataRes::clear_errcode() {
  _impl_.errcode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t PlayerDataRes::_internal_errcode() const {
  return _impl_.errcode_;
}
inline int32_t PlayerDataRes::errcode() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.PlayerDataRes.errCode)
  return _internal_errcode();
}
inline void PlayerDataRes::_internal_set_errcode(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.errcode_ = value;
}
inline void PlayerDataRes::set_errcode(int32_t value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.PlayerDataRes.errCode)
}

// optional .CRYSTAL_NET.service.PlayerData playerData = 2;
inline bool PlayerDataRes::_internal_has_playerdata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.playerdata_ != nullptr);
  return value;
}
inline bool PlayerDataRes::has_playerdata() const {
  return _internal_has_playerdata();
}
inline const ::CRYSTAL_NET::service::PlayerData& PlayerDataRes::_internal_playerdata() const {
  const ::CRYSTAL_NET::service::PlayerData* p = _impl_.playerdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::CRYSTAL_NET::service::PlayerData&>(
      ::CRYSTAL_NET::service::_PlayerData_default_instance_);
}
inline const ::CRYSTAL_NET::service::PlayerData& PlayerDataRes::playerdata() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.PlayerDataRes.playerData)
  return _internal_playerdata();
}
inline void PlayerDataRes::unsafe_arena_set_allocated_playerdata(
    ::CRYSTAL_NET::service::PlayerData* playerdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerdata_);
  }
  _impl_.playerdata_ = playerdata;
  if (playerdata) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CRYSTAL_NET.service.PlayerDataRes.playerData)
}
inline ::CRYSTAL_NET::service::PlayerData* PlayerDataRes::release_playerdata() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CRYSTAL_NET::service::PlayerData* temp = _impl_.playerdata_;
  _impl_.playerdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CRYSTAL_NET::service::PlayerData* PlayerDataRes::unsafe_arena_release_playerdata() {
  // @@protoc_insertion_point(field_release:CRYSTAL_NET.service.PlayerDataRes.playerData)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CRYSTAL_NET::service::PlayerData* temp = _impl_.playerdata_;
  _impl_.playerdata_ = nullptr;
  return temp;
}
inline ::CRYSTAL_NET::service::PlayerData* PlayerDataRes::_internal_mutable_playerdata() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.playerdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::CRYSTAL_NET::service::PlayerData>(GetArenaForAllocation());
    _impl_.playerdata_ = p;
  }
  return _impl_.playerdata_;
}
inline ::CRYSTAL_NET::service::PlayerData* PlayerDataRes::mutable_playerdata() {
  ::CRYSTAL_NET::service::PlayerData* _msg = _internal_mutable_playerdata();
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.PlayerDataRes.playerData)
  return _msg;
}
inline void PlayerDataRes::set_allocated_playerdata(::CRYSTAL_NET::service::PlayerData* playerdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerdata_);
  }
  if (playerdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerdata));
    if (message_arena != submessage_arena) {
      playerdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerdata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.playerdata_ = playerdata;
  // @@protoc_insertion_point(field_set_allocated:CRYSTAL_NET.service.PlayerDataRes.playerData)
}

// optional string loginToken = 3;
inline bool PlayerDataRes::_internal_has_logintoken() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PlayerDataRes::has_logintoken() const {
  return _internal_has_logintoken();
}
inline void PlayerDataRes::clear_logintoken() {
  _impl_.logintoken_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PlayerDataRes::logintoken() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.PlayerDataRes.loginToken)
  return _internal_logintoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerDataRes::set_logintoken(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.logintoken_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.PlayerDataRes.loginToken)
}
inline std::string* PlayerDataRes::mutable_logintoken() {
  std::string* _s = _internal_mutable_logintoken();
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.PlayerDataRes.loginToken)
  return _s;
}
inline const std::string& PlayerDataRes::_internal_logintoken() const {
  return _impl_.logintoken_.Get();
}
inline void PlayerDataRes::_internal_set_logintoken(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.logintoken_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerDataRes::_internal_mutable_logintoken() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.logintoken_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerDataRes::release_logintoken() {
  // @@protoc_insertion_point(field_release:CRYSTAL_NET.service.PlayerDataRes.loginToken)
  if (!_internal_has_logintoken()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.logintoken_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.logintoken_.IsDefault()) {
    _impl_.logintoken_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PlayerDataRes::set_allocated_logintoken(std::string* logintoken) {
  if (logintoken != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.logintoken_.SetAllocated(logintoken, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.logintoken_.IsDefault()) {
    _impl_.logintoken_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRYSTAL_NET.service.PlayerDataRes.loginToken)
}

// -------------------------------------------------------------------

// ModifyPlayerNameReq

// optional string newName = 1;
inline bool ModifyPlayerNameReq::_internal_has_newname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ModifyPlayerNameReq::has_newname() const {
  return _internal_has_newname();
}
inline void ModifyPlayerNameReq::clear_newname() {
  _impl_.newname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ModifyPlayerNameReq::newname() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.ModifyPlayerNameReq.newName)
  return _internal_newname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModifyPlayerNameReq::set_newname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.newname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.ModifyPlayerNameReq.newName)
}
inline std::string* ModifyPlayerNameReq::mutable_newname() {
  std::string* _s = _internal_mutable_newname();
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.ModifyPlayerNameReq.newName)
  return _s;
}
inline const std::string& ModifyPlayerNameReq::_internal_newname() const {
  return _impl_.newname_.Get();
}
inline void ModifyPlayerNameReq::_internal_set_newname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.newname_.Set(value, GetArenaForAllocation());
}
inline std::string* ModifyPlayerNameReq::_internal_mutable_newname() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.newname_.Mutable(GetArenaForAllocation());
}
inline std::string* ModifyPlayerNameReq::release_newname() {
  // @@protoc_insertion_point(field_release:CRYSTAL_NET.service.ModifyPlayerNameReq.newName)
  if (!_internal_has_newname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.newname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.newname_.IsDefault()) {
    _impl_.newname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ModifyPlayerNameReq::set_allocated_newname(std::string* newname) {
  if (newname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.newname_.SetAllocated(newname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.newname_.IsDefault()) {
    _impl_.newname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CRYSTAL_NET.service.ModifyPlayerNameReq.newName)
}

// -------------------------------------------------------------------

// ModifyPlayerNameRes

// optional sint32 errCode = 1;
inline bool ModifyPlayerNameRes::_internal_has_errcode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ModifyPlayerNameRes::has_errcode() const {
  return _internal_has_errcode();
}
inline void ModifyPlayerNameRes::clear_errcode() {
  _impl_.errcode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t ModifyPlayerNameRes::_internal_errcode() const {
  return _impl_.errcode_;
}
inline int32_t ModifyPlayerNameRes::errcode() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.ModifyPlayerNameRes.errCode)
  return _internal_errcode();
}
inline void ModifyPlayerNameRes::_internal_set_errcode(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.errcode_ = value;
}
inline void ModifyPlayerNameRes::set_errcode(int32_t value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:CRYSTAL_NET.service.ModifyPlayerNameRes.errCode)
}

// -------------------------------------------------------------------

// PlayerDataNty

// optional .CRYSTAL_NET.service.PlayerData playerData = 1;
inline bool PlayerDataNty::_internal_has_playerdata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.playerdata_ != nullptr);
  return value;
}
inline bool PlayerDataNty::has_playerdata() const {
  return _internal_has_playerdata();
}
inline const ::CRYSTAL_NET::service::PlayerData& PlayerDataNty::_internal_playerdata() const {
  const ::CRYSTAL_NET::service::PlayerData* p = _impl_.playerdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::CRYSTAL_NET::service::PlayerData&>(
      ::CRYSTAL_NET::service::_PlayerData_default_instance_);
}
inline const ::CRYSTAL_NET::service::PlayerData& PlayerDataNty::playerdata() const {
  // @@protoc_insertion_point(field_get:CRYSTAL_NET.service.PlayerDataNty.playerData)
  return _internal_playerdata();
}
inline void PlayerDataNty::unsafe_arena_set_allocated_playerdata(
    ::CRYSTAL_NET::service::PlayerData* playerdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerdata_);
  }
  _impl_.playerdata_ = playerdata;
  if (playerdata) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CRYSTAL_NET.service.PlayerDataNty.playerData)
}
inline ::CRYSTAL_NET::service::PlayerData* PlayerDataNty::release_playerdata() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CRYSTAL_NET::service::PlayerData* temp = _impl_.playerdata_;
  _impl_.playerdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CRYSTAL_NET::service::PlayerData* PlayerDataNty::unsafe_arena_release_playerdata() {
  // @@protoc_insertion_point(field_release:CRYSTAL_NET.service.PlayerDataNty.playerData)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CRYSTAL_NET::service::PlayerData* temp = _impl_.playerdata_;
  _impl_.playerdata_ = nullptr;
  return temp;
}
inline ::CRYSTAL_NET::service::PlayerData* PlayerDataNty::_internal_mutable_playerdata() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.playerdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::CRYSTAL_NET::service::PlayerData>(GetArenaForAllocation());
    _impl_.playerdata_ = p;
  }
  return _impl_.playerdata_;
}
inline ::CRYSTAL_NET::service::PlayerData* PlayerDataNty::mutable_playerdata() {
  ::CRYSTAL_NET::service::PlayerData* _msg = _internal_mutable_playerdata();
  // @@protoc_insertion_point(field_mutable:CRYSTAL_NET.service.PlayerDataNty.playerData)
  return _msg;
}
inline void PlayerDataNty::set_allocated_playerdata(::CRYSTAL_NET::service::PlayerData* playerdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerdata_);
  }
  if (playerdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerdata));
    if (message_arena != submessage_arena) {
      playerdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerdata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.playerdata_ = playerdata;
  // @@protoc_insertion_point(field_set_allocated:CRYSTAL_NET.service.PlayerDataNty.playerData)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service
}  // namespace CRYSTAL_NET

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>

class PlayerDataReqFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, PlayerDataReqFactory);
public:

    virtual void Release() override {
        PlayerDataReqFactory::Delete_PlayerDataReqFactory(this);
    }

    static PlayerDataReqFactory *CreateFactory() {
        return PlayerDataReqFactory::New_PlayerDataReqFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::PlayerDataReq();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::PlayerDataReq(*dynamic_cast<const ::CRYSTAL_NET::service::PlayerDataReq *>(coder));
    }

};


class PlayerDataResFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, PlayerDataResFactory);
public:

    virtual void Release() override {
        PlayerDataResFactory::Delete_PlayerDataResFactory(this);
    }

    static PlayerDataResFactory *CreateFactory() {
        return PlayerDataResFactory::New_PlayerDataResFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::PlayerDataRes();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::PlayerDataRes(*dynamic_cast<const ::CRYSTAL_NET::service::PlayerDataRes *>(coder));
    }

};


class ModifyPlayerNameReqFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, ModifyPlayerNameReqFactory);
public:

    virtual void Release() override {
        ModifyPlayerNameReqFactory::Delete_ModifyPlayerNameReqFactory(this);
    }

    static ModifyPlayerNameReqFactory *CreateFactory() {
        return ModifyPlayerNameReqFactory::New_ModifyPlayerNameReqFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::ModifyPlayerNameReq();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::ModifyPlayerNameReq(*dynamic_cast<const ::CRYSTAL_NET::service::ModifyPlayerNameReq *>(coder));
    }

};


class ModifyPlayerNameResFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, ModifyPlayerNameResFactory);
public:

    virtual void Release() override {
        ModifyPlayerNameResFactory::Delete_ModifyPlayerNameResFactory(this);
    }

    static ModifyPlayerNameResFactory *CreateFactory() {
        return ModifyPlayerNameResFactory::New_ModifyPlayerNameResFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::ModifyPlayerNameRes();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::ModifyPlayerNameRes(*dynamic_cast<const ::CRYSTAL_NET::service::ModifyPlayerNameRes *>(coder));
    }

};


class PlayerDataNtyFactory : public KERNEL_NS::ICoderFactory {
    POOL_CREATE_OBJ_DEFAULT_P1(ICoderFactory, PlayerDataNtyFactory);
public:

    virtual void Release() override {
        PlayerDataNtyFactory::Delete_PlayerDataNtyFactory(this);
    }

    static PlayerDataNtyFactory *CreateFactory() {
        return PlayerDataNtyFactory::New_PlayerDataNtyFactory();
    }

    virtual KERNEL_NS::ICoder *Create() const override {
        return new ::CRYSTAL_NET::service::PlayerDataNty();
    }

    virtual KERNEL_NS::ICoder *Create(const KERNEL_NS::ICoder *coder) const override {
        return new ::CRYSTAL_NET::service::PlayerDataNty(*dynamic_cast<const ::CRYSTAL_NET::service::PlayerDataNty *>(coder));
    }

};

#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_player_2eproto
